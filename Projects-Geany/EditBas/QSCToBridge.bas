'// QSCToBridge.bas
'//-------------------------------------------------------------------
'// QSCToBridge - Query SC extracted .csv sheet to Admin-Bridge sheet.
'//		10/24/20.	wmk.	16:45
'//-------------------------------------------------------------------

public sub QSCToBridge()

'//	Usage.	macro call or
'//			call QSCToBridge(); used to get multiowner condos from SC
'//			query to MultiMail.db [SplitOwners table] via Bridge
'//
'// Entry.
'//	sheet selected with .csv fields generated by SQL/Query of any of the
'// SC download tables (e.g. VeniceNTerritory) with rows selected by query
'// (typically a property address that may be a multiunit/multiowner condo.
'// QSCToBridge assumes headings row present from query.
'//
'// Following are the SC columns and .Props columns:
'//
'//	"Account #"	"Owner 1"	"Owner 2"	"Owner 3"	"Mailing Address 1"
'//		A			B			C			D			E
'//	"Mailing Address 2"	  "Mailing City"	"Mailing State"	"Mailing Zip Code"
'//			F					G					H				I
'//
'//	"Mailing Country"   Situs Address (Property Address)	Situs City
'//		J						K								L		
'//
'//	Situs State 	Situs Zip Code		Property Use
'// 	M				N					O				
'//
'//	Exit.	produces an "Admin-Bridge" formatted sheet with the x..Props columns:
'//	OwningParcel  UnitAddress  	Unit		 Resident1	 Phone1 Phone2 RefUSA-Phone
'//	 A (from A)	  B (from K)	C (from K)  D (from B)		E	   F		G	
'//
'//  SubTerrItory CongTerrID DoNotCall RSO Foreign  RecordDate SitusAddress
'//		H				I		   J     K     L	(header C2)		N (from K)
'//
'//  Property Use	DelPending
'//		O (from O)		P
'//
'//		along with 4 header rows, populated with the Admin-Bridge header information.
'//&lt;Area-CommonName&gt;			Property ID	&lt;OwnerParcel&gt;			Admin-Bridge formatted sheet
'//Units shown:	63	9/16/20	Owner		&lt;OwnerName1&gt;
'//City	Venice	34285	Streets/Addrs	&lt;Streets-Address(s)&gt;
'//SubTerritory		CongTerrID
'//
'// Calls.	InsertTerrHdr, ForceRecalc.
'//
'//	Modification history.
'//	---------------------
'//	9/23/20.	wmk.	original code; adapted from QcsvToBridge
'// 9/30/20.	wmk.	added BoldHeadings, FreezeView calls; dead code removed
'// 10/24/20.	wmk.	modified to support Unit field, Resident2 field dropped
'//
'//	Notes.	When this routine is picking up rows of a resultant query
'// from SC data, if the rows are territory parcels that are NOT 
'// SplitProps parcels, there will be relevant unit information in the
'// SC data. If they ARE parcels that are SplitProps, there should NEVER
'// be any unit token in the situs address.
'//
'// Method.
'//		Remove all columns P through rightmost (AW?)
'//			Z is index 25 AZ is 51  AW is 47
'//		Move column B contents to D
'//		Move column K contents (substr(1,35) to B
'//     Move column K contents (substr(36,*) to C
'//		Remove columns E through J
'//		Insert Territory sheet header at top
'//		
'//	constants.
const COL_PARCEL=0		'// "OwningParcel" column index
const COL_A=0
const COL_B=1
const COL_C=2	
const COL_D=3
const COL_E=4
const COL_F=5
const COL_G=6			'// column G index
const COL_H=7			'// column H index
const COL_I=8			'// column I index
const COL_J=9			'// column J index
const COL_K=10			'// column K index
const COL_L=11			'// column L index (DoNotCall)
const COL_M=12			'// column M index (RSO)
const COL_N=13			'// column N index (Foreign)
const COL_O=14			'// column O index (Property Use)
const COL_P=15			'// column P index
const COL_AW=47			'// column AW index (Status)
const ROW_1=0
const ROW_2=1
const ROW_3=2
const ROW_4=3
const ROW_HEADING=4		'// headings row index
const LJUST=1		'// left-justify HoriJustify				'// mod052020
const CJUST=2		'// center HoriJustify						'// mod052020
const RJUST=3		'// right-justify HoriJustify				'// mod052320
const MDYY=30		'// 'M/D/YY' format value
const ZEROS_4=121	'// four zeros number format value

'//	local variables.
Dim oDoc As Object
Dim oSheet As Object
Dim NewColumn As Object
dim oSel as Object
dim oSel2	As Object		'// active row selection
dim iSheetIx as integer
dim oRange as Object
dim lThisRow as long		'// current row selected on sheet
dim oMrgRange	As Object	'// merge range

dim oCell	As Object		'// cell working on
dim oCell2	As Object		'// related to cell working on
dim i		As Integer		'// loop index
dim sPropID	As String		'// property ID
dim sSubTerr	As String	'// subterritory
dim sCongTerr	As String	'// cong terr ID
dim lRowCount	As Long		'// row count of addresses
dim dDate		As Double	'// date value
dim sCityStZip	As String	'// concatenated City, State, Zip
dim sNotes		As String	'// notes field
dim nCols		As Integer	'// removal column count
dim oCols		As Object	'// .Columns this sheet
dim sCity		As String
dim sZip		As String

	'// code.
	ON ERROR GoTo ErrorHandler
	oDoc = ThisComponent
	oSel = oDoc.getCurrentSelection()
	oRange = oSel.RangeAddress
	iSheetIx = oRange.Sheet
	oSheet = oDoc.Sheets(iSheetIx)
	oCols = oSheet.Columns
	
	'// get active row count (no heading)
	SelectActiveRows()
	oSel2 = oDoc.getCurrentSelection()
	oMrgRange = oSel2.RangeAddress
	lRowCount = oMrgRange.EndRow+1 - oMrgRange.StartRow + ROW_HEADING
	SetSelection(oRange)		'// restore entry selection



'//		Remove all columns P through rightmost (AW?)
'//			Z is index 25 AZ is 51  AW is 47
	oSheet.Columns.removeByIndex(COL_P, COL_AW+1-COL_O)

'//		Move column B contents to D
	oMrgRange = oRange
	oMrgRange.StartColumn = COL_B
	oMrgRange.EndColumn = COL_B
	oMrgRange.StartRow = ROW_2
	oMrgRange.EndRow = ROW_2 + lRowCount-1
dim oTarget as new com.sun.star.table.CellAddress
	oTarget.Sheet = oRange.Sheet
	oTarget.Column = COL_D
	oTarget.Row = ROW_2
	oSheet.moveRange(oTarget,oMrgRange)
	

'//		Move column B contents to C
	oMrgRange = oRange
	oMrgRange.StartColumn = COL_B
	oMrgRange.EndColumn = COL_B
	oMrgRange.StartRow = ROW_2
	oMrgRange.EndRow = ROW_2 + lRowCount-1
	oTarget.Sheet = oRange.Sheet
	oTarget.Column = COL_C
	oTarget.Row = ROW_2
	oSheet.moveRange(oTarget,oMrgRange)

'//		Copy column K contents (with unit) to B
	oMrgRange = oRange
	oMrgRange.StartColumn = COL_K
	oMrgRange.EndColumn = COL_K
	oMrgRange.StartRow = ROW_2
	oMrgRange.EndRow = ROW_2 + lRowCount-1
	oTarget.Sheet = oRange.Sheet
	oTarget.Column = COL_B
	oTarget.Row = ROW_2
	oSheet.copyRange(oTarget,oMrgRange)

'//		Remove columns E through J
	oSheet.Columns.removeByIndex(COL_E, COL_J+1-COL_E)

'//		Move column I to column O
	oMrgRange = oRange
	oMrgRange.StartColumn = COL_I
	oMrgRange.EndColumn = COL_I
	oMrgRange.StartRow = ROW_2
	oMrgRange.EndRow = ROW_2 + lRowCount-1
	oTarget.Sheet = oRange.Sheet
	oTarget.Column = COL_O
	oTarget.Row = ROW_2
	oSheet.moveRange(oTarget,oMrgRange)
	oCols(COL_O).setPropertyValue("NumberFormat", ZEROS_4)
	oCols(COL_O).setPropertyValue("HoriJustify", CJUST)
	
'//		Insert Territory sheet header at top
	InsertTerrHdr("Admin-Bridge formatted sheet")

'//     column E info to col N
	oMrgRange = oRange
	oMrgRange.StartColumn = COL_E
	oMrgRange.EndColumn = COL_E
	oMrgRange.StartRow = ROW_HEADING+1
	oMrgRange.EndRow = ROW_HEADING + lRowCount
	oTarget.Sheet = oRange.Sheet
	oTarget.Column = COL_N
	oTarget.Row = ROW_HEADING+1
	oSheet.moveRange(oTarget,oMrgRange)

'//		City from F6 to B3
	oCell = oSheet.getCellByPosition(COL_F, ROW_HEADING+1)
	sCity = oCell.String
	oCell2 = oSheet.getCellByPosition(COL_B, ROW_3)
	oCell2.String = sCity
	
'//		Zip  from H6 to C3
	oCell = oSheet.getCellByPosition(COL_H, ROW_HEADING+1)
	sZip = oCell.String
	oCell2 = oSheet.getCellByPosition(COL_C, ROW_3)
	oCell2.String = sZip
	
'//	empty columns F - H, using columns I - K
	oMrgRange = oRange
	oMrgRange.StartColumn = COL_I
	oMrgRange.EndColumn = COL_K
	oMrgRange.StartRow = ROW_HEADING+1
	oMrgRange.EndRow = ROW_HEADING + lRowCount
	oTarget.Sheet = oRange.Sheet
	oTarget.Column = COL_F
	oTarget.Row = ROW_HEADING+1
	oSheet.copyRange(oTarget,oMrgRange)

	lThisRow = ROW_HEADING
'// for each active row
'// set all H values to "=$B$4" formula, SubTerritory
'// set all I values to "=$D$4" formula, CongTerrID

	for i = 0 to lRowCount-1
		lThisRow = lThisRow + 1

	'// set all C values (Unit) to substr(B,36)
		oCell = oSheet.getCellByPosition(COL_B, lThisRow)
		oCell2 = oSheet.getCellByPosition(COL_C, lThisRow)
		oCell2.String = substr(oCell.String, 36)
		
	'// set all B values (UnitAddress) to substr(B,1,35)
		oCell.String = trim(substr(oCell.String, 1, 35))
		
	'//	set all H values to "=$B$4" SubTerritory
		oCell = oSheet.getCellByPosition(COL_H, lThisRow)
		oCell.setFormula("=$B$4")
		oCell.HoriJustify = CJUST
		
	'// set all I values to "$D$4"	CongTerrID
		oCell = oSheet.getCellByPosition(COL_I, lThisRow)
		oCell.setFormula("=$D$4")
		oCell.HoriJustify = CJUST

'// next row
	next i
	
	SetBridgeHeadings()
	SetBridgeColWidths()
	BoldHeadings()
	ForceRecalc()
	FreezeView()
	
NormalExit:
	exit sub

ErrorHandler:
	msgbox("QSCToBridge - unprocessed error.")
	GoTo NormalExit

end sub		'// end QSCToBridge		10/24/20
