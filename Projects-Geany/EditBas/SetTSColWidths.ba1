&apos;// SetTSColWidths.bas
&apos;//---------------------------------------------------------------
&apos;// SetTSColWidths - Set column widths on TS formatted sheet columns.
&apos;//		9/11/20.	wmk.	23:00
&apos;//---------------------------------------------------------------

public sub SetTSColWidths()

&apos;//	Usage.	macro call or
&apos;//			call SetTSColWidths()
&apos;//
&apos;// Entry.	User in TS formatted territory sheet
&apos;//
&apos;//	Exit.	A = 0.75&quot;, B = 1.75, C = 1.0&quot; , D = 1.75, E = 1.75, F = 2.0&quot;
&apos;//
&apos;// Calls.
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	9/9/20.		wmk.	original code
&apos;//
&apos;//	Notes. UNO Dispatcher exits this module, corrupting any module-wide
&apos;//	vars. Only way to preserve user cell selection on entry is in local
&apos;//	vars this sub.

&apos;//	constants.
const ONE_INCH=2540
const COL_A=0
const COL_B=1
const COL_C=2
const COL_D=3
const COL_E=4
const COL_F=5

&apos;// column widths
const A_WIDTH=0.75		&apos;// 0.75
const B_WIDTH=1.75		&apos;// 1.75
const C_WIDTH=1.1		&apos;// 1.1
const D_WIDTH=1.75		&apos;// 1.75
const E_WIDTH=1.75		&apos;// 1.75
const F_WIDTH=2.0		&apos;// 2.0

&apos;//	local variables.
dim oDocument   as object
dim oDispatcher as object
dim oDoc	As Object	&apos;// ThisComponent
dim oSel	As Object	&apos;// current cell selection on entry
dim oRange	As Object	&apos;// RangeAddress selected
dim iSheetIx	As Integer	&apos;// this sheet index
dim oSheet	As Object	&apos;// this sheet
dim oCols	As Object	&apos;// .Columns this sheet

	&apos;// code.
	ON ERROR GOTO ErrorHandler
	
	&apos;// preserve user cell selection
	oDoc = ThisComponent
	oSel = oDoc.getCurrentSelection()
	oRange = oSel.RangeAddress
	iSheetIx = oRange.Sheet
	oSheet = oDoc.Sheets(iSheetIx)
	oCols = oSheet.Columns
	oCols(COL_A).setPropertyValue(&quot;Width&quot;, A_WIDTH*ONE_INCH)
	oCols(COL_B).setPropertyValue(&quot;Width&quot;, B_WIDTH*ONE_INCH)
	oCols(COL_C).setPropertyValue(&quot;Width&quot;, C_WIDTH*ONE_INCH)
	oCols(COL_D).setPropertyValue(&quot;Width&quot;, D_WIDTH*ONE_INCH)
	oCols(COL_E).setPropertyValue(&quot;Width&quot;, E_WIDTH*ONE_INCH)
	oCols(COL_F).setPropertyValue(&quot;Width&quot;, F_WIDTH*ONE_INCH)

if true then
	GoTo EndOldCode
endif
&apos;//-------------------------------------------------------------------
	oDocument   = ThisComponent.CurrentController.Frame
	oDispatcher = createUnoService(&quot;com.sun.star.frame.DispatchHelper&quot;)
	&apos;// set column widths to width constants
&apos;//--------
	&apos;// set up arguments for uno:GoToCell interface
dim args1(0) as new com.sun.star.beans.PropertyValue
	args1(0).Name = &quot;ToPoint&quot;
	args1(0).Value = &quot;$A$6&quot;

	oDispatcher.executeDispatch(oDocument, &quot;.uno:GoToCell&quot;, &quot;&quot;, 0, args1())


dim args2(0) as new com.sun.star.beans.PropertyValue
	args2(0).Name = &quot;ColumnWidth&quot;
	args2(0).Value = A_WIDTH

	oDispatcher.executeDispatch(oDocument, &quot;.uno:ColumnWidth&quot;, &quot;&quot;, 0, args2())

&apos;//----------
	&apos;// set up arguments for uno:GoToCell interface
	args1(0).Name = &quot;ToPoint&quot;
	args1(0).Value = &quot;$B$6&quot;

	oDispatcher.executeDispatch(oDocument, &quot;.uno:GoToCell&quot;, &quot;&quot;, 0, args1())

	args2(0).Name = &quot;ColumnWidth&quot;
	args2(0).Value = B_WIDTH

	oDispatcher.executeDispatch(oDocument, &quot;.uno:ColumnWidth&quot;, &quot;&quot;, 0, args2())

&apos;//----------
	&apos;// set up arguments for uno:GoToCell interface
	args1(0).Name = &quot;ToPoint&quot;
	args1(0).Value = &quot;$C$6&quot;

	oDispatcher.executeDispatch(oDocument, &quot;.uno:GoToCell&quot;, &quot;&quot;, 0, args1())

	args2(0).Name = &quot;ColumnWidth&quot;
	args2(0).Value = C_WIDTH

	oDispatcher.executeDispatch(oDocument, &quot;.uno:ColumnWidth&quot;, &quot;&quot;, 0, args2())

&apos;//----------
	&apos;// set up arguments for uno:GoToCell interface
	args1(0).Name = &quot;ToPoint&quot;
	args1(0).Value = &quot;$D$6&quot;

	oDispatcher.executeDispatch(oDocument, &quot;.uno:GoToCell&quot;, &quot;&quot;, 0, args1())

	args2(0).Name = &quot;ColumnWidth&quot;
	args2(0).Value = D_WIDTH

	oDispatcher.executeDispatch(oDocument, &quot;.uno:ColumnWidth&quot;, &quot;&quot;, 0, args2())

&apos;//----------
	&apos;// set up arguments for uno:GoToCell interface
	args1(0).Name = &quot;ToPoint&quot;
	args1(0).Value = &quot;$E$6&quot;

	oDispatcher.executeDispatch(oDocument, &quot;.uno:GoToCell&quot;, &quot;&quot;, 0, args1())

	args2(0).Name = &quot;ColumnWidth&quot;
	args2(0).Value = E_WIDTH

	oDispatcher.executeDispatch(oDocument, &quot;.uno:ColumnWidth&quot;, &quot;&quot;, 0, args2())

&apos;//----------
	&apos;// set up arguments for uno:GoToCell interface
	args1(0).Name = &quot;ToPoint&quot;
	args1(0).Value = &quot;$F$6&quot;

	oDispatcher.executeDispatch(oDocument, &quot;.uno:GoToCell&quot;, &quot;&quot;, 0, args1())

	args2(0).Name = &quot;ColumnWidth&quot;
	args2(0).Value = F_WIDTH

	oDispatcher.executeDispatch(oDocument, &quot;.uno:ColumnWidth&quot;, &quot;&quot;, 0, args2())
&apos;//--------------------------------------------------------------------------
EndOldCode:
NormalExit:
	SetSelection(oRange)	&apos;// restore user cell selection
	exit sub
	
ErrorHandler:
	msgbox(&quot;SetTSColWidths - unprocessed error.&quot;)
	
end sub		&apos;// end SetTSColWidths	9/11/20
