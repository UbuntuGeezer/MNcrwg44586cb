&apos;// MoveToDocSheet.bas - Jump over to different sheet by sheet name.
&apos;//---------------------------------------------------------------
&apos;// MoveToDocSheet - Jump over to different sheet by sheet name.
&apos;//		7/11/21.	wmk.	09:03
&apos;//---------------------------------------------------------------

public sub MoveToDocSheet(poDocument AS Object, psSheetName As String)

&apos;//	Usage.	macro call or
&apos;//			call MoveToDocSheet( oDocument,sSheetName )
&apos;//
&apos;//		oDocument = document object containing sheet
&apos;//		sSheetName = name of sheet to move to
&apos;//
&apos;// Entry.	user focused on some sheet in workbook
&apos;//
&apos;//	Exit.	user focus moved to sSheetName in workbook, if exists
&apos;//
&apos;// Calls.	uno Dispatcher.
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	7/9/21.		wmk.	original code; cloned from macro recording.
&apos;// 7/11/21.	wmk.	sheet not found message corrected.
&apos;//
&apos;//	Notes. &lt;Insert notes here&gt;
&apos;//

&apos;//	constants.

&apos;// local variables.

dim oDoc		As Object		&apos;// ThisComponent
dim oSheets		As Object		&apos;// Sheets() array
dim iSheetIx	As Integer		&apos;// desired sheet index
dim iUnoSheet	As Integer		&apos;// uno sheet number
dim bSheetExists	As Boolean	&apos;// sheet exists flag
dim oSheet		As Object		&apos;// this sheet

	&apos;// code.
	ON ERROR GOTO ErrorHandler
&apos;	oDoc = ThisComponent
	oDoc = poDocument

if 1 = 0 then
 msgbox(&quot;in MoveToDocSheet.. document URL = &quot; &amp; CHR(13) &amp; CHR(10)_ 
  &amp; oDoc.getURL() )
endif

	oSheets = oDoc.Sheets()
	bSheetExists = oSheets.hasByName(psSheetName)
&apos;XRay oSheets
	if bSheetExists then
		oSheet = oSheets.getByName(psSheetName)
		iSheetIx = oSheet.RangeAddress.Sheet

if not true then
	msgbox(&quot;Index of target sheet is &quot; + iSheetIx)
	goto NormalExit
endif
		iUnoSheet = iSheetIx + 1	&apos;// add 1 for uno indexing

	else		&apos;// sheet not found
		msgbox(&quot;In MoveToDocSheet: &quot; + psSheetName + &quot; - sheet not found!&quot;)
		goto ErrorHandler
	endif

	&apos;// use uno - macro-generated code to jump to desired sheet.

rem ----------------------------------------------------------------------
rem define variables
dim document   as object
dim dispatcher as object
rem ----------------------------------------------------------------------
rem get access to the document
&apos;document   = ThisComponent.CurrentController.Frame
document = oDoc.CurrentController.Frame
dispatcher = createUnoService(&quot;com.sun.star.frame.DispatchHelper&quot;)

rem ----------------------------------------------------------------------
dim args1(0) as new com.sun.star.beans.PropertyValue

args1(0).Name = &quot;Nr&quot;
&apos;//args1(0).Value = 4			&apos;// PubTerr sheet index
args1(0).Value = iUnoSheet		&apos;// jump to desired sheet
dispatcher.executeDispatch(document, &quot;.uno:JumpToTable&quot;, &quot;&quot;, 0, args1())

if 1 = 1 then
dim oDocument	As Object
dim oDispatcher	As Object
&apos; now jump to A6 to &quot;get into&quot; sheet...
	oDocument   = ThisComponent.CurrentController.Frame
	oDispatcher = createUnoService(&quot;com.sun.star.frame.DispatchHelper&quot;)

	&apos;// move to cell $A$1
dim args2(0) as new com.sun.star.beans.PropertyValue
	args2(0).Name = &quot;ToPoint&quot;
	args2(0).Value = &quot;$A$1&quot;

	oDispatcher.executeDispatch(oDocument, &quot;.uno:GoToCell&quot;, &quot;&quot;, 0, args2())
endif

NormalExit:
	exit sub

ErrorHandler:
	ON ERROR GOTO
	msgbox(&quot;In MoveToDocSheet - unprocessed error.&quot;)
	GOTO NormalExit

end sub		&apos;// MoveToDocSheet		7/11/21.	09:03


&apos;// MoveToSheet.bas - Jump over to different sheet by sheet name.
&apos;//---------------------------------------------------------------
&apos;// MoveToSheet - Jump over to different sheet by sheet name.
&apos;//		3/16/21.	wmk.	13:38
&apos;//---------------------------------------------------------------

public sub MoveToSheet(psSheetName As String)

&apos;//	Usage.	macro call or
&apos;//			call MoveToSheet( sSheetName )
&apos;//
&apos;//		sSheetName = name of sheet to move to
&apos;//
&apos;// Entry.	user focused on some sheet in workbook
&apos;//
&apos;//	Exit.	user focus moved to sSheetName in workbook, if exists
&apos;//
&apos;// Calls.	uno Dispatcher.
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	3/16/21.		wmk.	original code; cloned from macro recording
&apos;//
&apos;//	Notes. &lt;Insert notes here&gt;
&apos;//

&apos;//	constants.

&apos;// local variables.

dim oDoc		As Object		&apos;// ThisComponent
dim oSheets		As Object		&apos;// Sheets() array
dim iSheetIx	As Integer		&apos;// desired sheet index
dim iUnoSheet	As Integer		&apos;// uno sheet number
dim bSheetExists	As Boolean	&apos;// sheet exists flag
dim oSheet		As Object		&apos;// this sheet

	&apos;// code.
	ON ERROR GOTO ErrorHandler
	oDoc = ThisComponent
	oSheets = oDoc.Sheets()
	bSheetExists = oSheets.hasByName(psSheetName)
&apos;XRay oSheets
	if bSheetExists then
		oSheet = oSheets.getByName(psSheetName)
		iSheetIx = oSheet.RangeAddress.Sheet

if not true then
	msgbox(&quot;Index of target sheet is &quot; + iSheetIx)
	goto NormalExit
endif
		iUnoSheet = iSheetIx + 1	&apos;// add 1 for uno indexing

	else		&apos;// sheet not found
		msgbox(&quot;In MoveToSheet: &quot; + psSheetName + &quot; - sheet not found!&quot;)
		goto ErrorHandler
	endif

	&apos;// use uno - macro-generated code to jump to desired sheet.

rem ----------------------------------------------------------------------
rem define variables
dim document   as object
dim dispatcher as object
rem ----------------------------------------------------------------------
rem get access to the document
document   = ThisComponent.CurrentController.Frame
dispatcher = createUnoService(&quot;com.sun.star.frame.DispatchHelper&quot;)

rem ----------------------------------------------------------------------
dim args1(0) as new com.sun.star.beans.PropertyValue
args1(0).Name = &quot;Nr&quot;
&apos;//args1(0).Value = 4			&apos;// PubTerr sheet index
args1(0).Value = iUnoSheet		&apos;// jump to desired sheet
dispatcher.executeDispatch(document, &quot;.uno:JumpToTable&quot;, &quot;&quot;, 0, args1())

NormalExit:
	exit sub

ErrorHandler:
	msgbox(&quot;In MoveToSheet - unprocessed error.&quot;)
	GOTO NormalExit

end sub		&apos;// MoveToSheet		3/16/21.	13:38
