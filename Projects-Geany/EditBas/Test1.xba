<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE script:module PUBLIC "-//OpenOffice.org//DTD OfficeDocument 1.0//EN" "module.dtd">
<script:module xmlns:script="http://openoffice.org/2000/script" script:name="Module1" script:language="StarBasic">REM  *****  BASIC  *****
&apos;// Module1 - Territories LibreOffice Library Code.
&apos;//		8/18/20.	wmk.
&apos;// Module1 - Bay-Indes-A_L.ods/Bay-Indes-M_Z common code.
&apos;//		8/16/20.	wmk.
&apos;//	Main - test sub for checking GenHLinkM/sGenPhoneURL code.
&apos;// sGenPhoneURL - generate truepeoplesearch URL from address
&apos;// sGen411URL - generate 411.com URL from address
&apos;//	Crack - general purpose multiseparator parsing sub
&apos;//	ParseSitus - parse situs into number, street, unit
&apos;//	WriteHTML - write HTML file to access given web site
&apos;// GenHLinkM - generate hyperlinks into selected sheet area

OPTION EXPLICIT			&apos;// code protection

&apos;// publicsMM.bas
&apos;// publics for MultiMail parented spreadsheet processing
&apos;//	sheet processing constants.
&apos;// Modified 7/9/21, goCurrDocument added.
public const COL_ADDR=0		&apos;// column index for extracting address
public const COL_HLINK=5		&apos;// column for truepeople hyperlink
public const COL_HLINK1=6		&apos;// column for 411 hyperlink
public const COL_HLINK2=7		&apos;// column for whitepages hyperlink
public const COL_CITY=1		&apos;// column index for city
public const ROW_CITY=2		&apos;// row index for city -B3

public const CJUST=2		&apos;// center HoriJustify
public const RJUST=0		&apos;// right-justify HoriJustify
public const YELLOW=16776960		&apos;// decimal value of YELLOW color
public const TXT_HLINK=&quot;HYPERLINK(&quot;&quot;&quot;	&apos;// HYPERLINK prefix
&apos;// end publics for MultiMail parented spreadsheet processing
&apos;/**/


&apos;// Main.bas
Sub Main
&apos;// use as generic Territories libarary testing macro; invoke with ctrl-9

&apos;// copy current sheet to end and unprotect.
CopyToEnd()
UnprotectSheet()

if true then
  GoTo EndRun
endif
dim sSitus	As String
dim sNumber	As String
dim sStreet	As String
dim sUnit	As String
dim sFile	As String
dim sURL	As String

GenHLinkM()
if true then
 GoTo EndRun
endif

sFile = &quot;BIPhone3&quot;
sSitus = &quot;415 Andros&quot;
sURL = sGenPhoneURL(sSitus, &quot;Venice&quot;)
WriteHTML(sFile, sURL)     

sFile = &quot;BIPhone4&quot;
sSitus = &quot;416 Andros&quot;
sURL = sGenPhoneURL(sSitus, &quot;Venice&quot;)
WriteHTML(sFile, sURL)     

sFile = &quot;BIPhone5&quot;
sSitus = &quot;417 Andros&quot;
sURL = sGenPhoneURL(sSitus, &quot;Venice&quot;)
WriteHTML(sFile, sURL)     

sFile = &quot;BIPhone6&quot;
sSitus = &quot;418 Andros&quot;
sURL = sGenPhoneURL(sSitus, &quot;Venice&quot;)
WriteHTML(sFile, sURL)     

sFile = &quot;BIPhone7&quot;
sSitus = &quot;419 Andros&quot;
sURL = sGenPhoneURL(sSitus, &quot;Venice&quot;)
WriteHTML(sFile, sURL)     

sFile = &quot;BIPhone8&quot;
sSitus = &quot;420 Andros&quot;
sURL = sGenPhoneURL(sSitus, &quot;Venice&quot;)
WriteHTML(sFile, sURL)     

sFile = &quot;BIPhone9&quot;
sSitus = &quot;421 Andros&quot;
sURL = sGenPhoneURL(sSitus, &quot;Venice&quot;)
WriteHTML(sFile, sURL)     

sFile = &quot;BIPhone10&quot;
sSitus = &quot;422 Andros&quot;
sURL = sGenPhoneURL(sSitus, &quot;Venice&quot;)
WriteHTML(sFile, sURL)     

EndRun:

End Sub	&apos;// end Main
&apos;/**/

&apos;// DoBizTerrWithCalc.bas - Process territory from .csv to PubTerr.
&apos;//----------------------------------------------------------------
&apos;// DoBizTerrWithCalc - Process territory from .csv to PubTerr.
&apos;//		9/29/21.	wmk.	13:16
&apos;//----------------------------------------------------------------

public sub DoBizTerrWithCalc( psTerrID )

&apos;//	Usage.	macro call or
&apos;//			call DoBizTerrWithCalc( sTerrID )
&apos;//
&apos;//		sTerrID = territory ID to do with Calc
&apos;//
&apos;// Dependencies. This sub must be resident in Territories Library.
&apos;//
&apos;// Entry.	goTerrODSdoc = (reserved) component for territory ODS 
&apos;//			  workbook	
&apos;//
&apos;//	Exit.	goTerrODSdoc = territory ODS workbook component
&apos;//
&apos;// Calls.	OpenBQTerr, QodsToBizTerr
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;// 9/26/21.	wmk.	original code; adapted from DoTerrWithCalc.
&apos;// 9/29/21.	wmk.	gbKillProcess flag checked after OpenBQTerr.
&apos;// Legacy mods.
&apos;//	7/10/21.	wmk.	original code; goTerrODSdoc global var
&apos;//							dependency added.
&apos;// 7/11/21.	wmk.	code advanced to point of saving territory
&apos;//						workbook as	.ods file; SaveQsvODS moved to
&apos;//						QOpenCSV
&apos;// 8/28/21.	wmk.	comments corrected; FreezeView call added.
&apos;//
&apos;//	Notes. DoBizTerrWithCalc will eventually completely process a territory
&apos;// from its QTerrxxx.csv file all the way through to formatting and
&apos;// saving the PubTerr and SuperTerr versions.
&apos;// SetGridLand dialog gets in the way of frame focusing... figure out
&apos;// where to put it..
&apos;//

&apos;//	constants.

&apos;//	local variables.
dim sTerrID			As	String			&apos;// copy of passed territory ID
dim oDoc			As	Object			&apos;// ThisComponent to save to gs
dim oUntitledDoc	As 	Object			&apos;// untitled PubTerr
dim oParentDoc		As	Object			&apos;// parent document of PubTerr workbook

	&apos;// code.
	ON ERROR GOTO ErrorHandler
	sTerrID = psTerrID
	OpenBQTerr( sTerrID )
	if gbKillProcess then
		gbKillProcess = false
		GoTo NormalExit
	endif
&apos;	AddHdrToQBTerr(sTerrID)
	QodsToBizTerr(sTerrID)
	

&apos;//*****************************************************************
if 1 = 1 then
  GoTo NormalExit
endif

	oDoc = ThisComponent
&apos;	goCurrDocument = ThisComponent
&apos;	SaveQCsvODS
	oDoc.Close(1)			&apos;// close the newly saved QTerrxxx.ods
	

dim oSel		As Object
	oParentDoc = ThisComponent	&apos;// set doc to current component
&apos;	goTerrODSdoc = oDoc
	QToPubTerr
	oUntitledDoc = ThisComponent
	oSel = oUntitledDoc.getCurrentSelection()
	MoveToDocSheet(oUntitledDoc, &quot;Terr240_PubTerr&quot;)
	
&apos;	SetGridLand			&apos;// set Grid on, landscape format
&apos;	MoveToDocSheet(oUntitledDoc, &quot;Terr240_PubTerr&quot;)		&apos;// reset focus
&apos;	oDoc = goNewWorkdoc
	oSel = oUntitledDoc.getCurrentSelection()
	MoveToDocSheet(oDoc, &quot;Terr240_PubTerr&quot;)
	FreezeView()
	oDoc = ThisComponent
	oSel = oDoc.getCurrentSelection()	
	SaveTerrAsODS(oUntitledDoc,oParentDoc.getURL())		&apos;// save new workbook Untitled n.ods as ods
if 1 = 0 then
	SaveXlsx			&apos;// save for Excel
	ExportTerrAsPDF		&apos;// export PDF file
endif

NormalExit:
	exit sub
	
ErrorHandler:
	msgbox(&quot;DoBizTerrWithCalc - unprocessed error&quot;)
	GoTo NormalExit
	
end sub		&apos;// end DoBizTerrWithCalc	9/29/21.	13:16
&apos;/**/

&apos;// DoTerrWithCalc.bas - Process territory from .csv to PubTerr.
&apos;//---------------------------------------------------------------
&apos;// DoTerrWithCalc - Process territory from .csv to PubTerr.
&apos;//		8/28/21.	wmk.	09:15
&apos;//---------------------------------------------------------------

public sub DoTerrWithCalc( psTerrID )

&apos;//	Usage.	macro call or
&apos;//			call DoTerrWithCalc( sTerrID )
&apos;//
&apos;//		sTerrID = territory ID to do with Calc
&apos;//
&apos;// Dependencies. This sub must be resident in Territories Library.
&apos;//
&apos;// Entry.	goTerrODSdoc = (reserved) component for territory ODS 
&apos;//			  workbook	
&apos;//
&apos;//	Exit.	goTerrODSdoc = territory ODS workbook component
&apos;//
&apos;// Calls.	OpenQTerr, AddHdrToQTerr
&apos;// 	SaveCsvToODS, QToPubTerr3, MoveToDocSheet,SaveTerrAsODS,
&apos;//		FreezeView.
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	7/10/21.	wmk.	original code; goTerrODSdoc global var
&apos;//							dependency added.
&apos;// 7/11/21.	wmk.	code advanced to point of saving territory
&apos;//						workbook as	.ods file; SaveQsvODS moved to
&apos;//						QOpenCSV
&apos;// 8/28/21.	wmk.	comments corrected; FreezeView call added.
&apos;//
&apos;//	Notes. DoTerrWithCalc will eventually completely process a territory
&apos;// from its QTerrxxx.csv file all the way through to formatting and
&apos;// saving the PubTerr and SuperTerr versions.
&apos;// SetGridLand dialog gets in the way of frame focusing... figure out
&apos;// where to put it..
&apos;//

&apos;//	constants.

&apos;//	local variables.
dim sTerrID			As	String			&apos;// copy of passed territory ID
dim oDoc			As	Object			&apos;// ThisComponent to save to gs
dim oUntitledDoc	As 	Object			&apos;// untitled PubTerr
dim oParentDoc		As	Object			&apos;// parent document of PubTerr workbook

	&apos;// code.
	ON ERROR GOTO ErrorHandler
	sTerrID = psTerrID
	OpenQTerr( sTerrID )
	AddHdrToQTerr(sTerrID)
	QodsToPubTerr(sTerrID)

if 1 = 1 then
  GoTo NormalExit
endif

	oDoc = ThisComponent
&apos;	goCurrDocument = ThisComponent
&apos;	SaveQCsvODS
	oDoc.Close(1)			&apos;// close the newly saved QTerrxxx.ods
	

dim oSel		As Object
	oParentDoc = ThisComponent	&apos;// set doc to current component
&apos;	goTerrODSdoc = oDoc
	QToPubTerr
	oUntitledDoc = ThisComponent
	oSel = oUntitledDoc.getCurrentSelection()
	MoveToDocSheet(oUntitledDoc, &quot;Terr240_PubTerr&quot;)
	
&apos;	SetGridLand			&apos;// set Grid on, landscape format
&apos;	MoveToDocSheet(oUntitledDoc, &quot;Terr240_PubTerr&quot;)		&apos;// reset focus
&apos;	oDoc = goNewWorkdoc
	oSel = oUntitledDoc.getCurrentSelection()
	MoveToDocSheet(oDoc, &quot;Terr240_PubTerr&quot;)
	FreezeView()
	oDoc = ThisComponent
	oSel = oDoc.getCurrentSelection()	
	SaveTerrAsODS(oUntitledDoc,oParentDoc.getURL())		&apos;// save new workbook Untitled n.ods as ods
if 1 = 0 then
	SaveXlsx			&apos;// save for Excel
	ExportTerrAsPDF		&apos;// export PDF file
endif

NormalExit:
	exit sub
	
ErrorHandler:
	msgbox(&quot;DoTerrWithCalc - unprocessed error&quot;)
	GoTo NormalExit
	
end sub		&apos;// end DoTerrWithCalc	7/11/21.	22:09
&apos;/**/



&apos;// DoSuperWithCalc.bas - Process territory from .csv to PubTerr.
&apos;//---------------------------------------------------------------
&apos;// DoSuperWithCalc - Process territory from .csv to PubTerr.
&apos;//		7/12/21.	wmk.	21:09
&apos;//---------------------------------------------------------------

public sub DoSuperWithCalc( psTerrID )

&apos;//	Usage.	macro call or
&apos;//			call DoSuperWithCalc( sTerrID )
&apos;//
&apos;//		sTerrID = territory ID to do with Calc
&apos;//
&apos;// Dependencies. This sub must be resident in Territories Library.
&apos;//
&apos;// Entry.	goTerrODSdoc = (reserved) component for territory ODS 
&apos;//			  workbook	
&apos;//
&apos;//	Exit.	goTerrODSdoc = territory ODS workbook component
&apos;//
&apos;// Calls.	CreateSuperTerr
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	7/12/21.	wmk.	original code; adapted from DoTerrWithCalc.
&apos;//
&apos;//	Notes. DoSuperWithCalc will take a territory Terrxxx_PubTerr.ods
&apos;// and make a second workbook Terrxxx_SuperTerr.ods which contains
&apos;// search hyperlinks for all records in the territory.
&apos;// The process involves opening both the Terrxxx_PubTerr.ods, and its
&apos;// build parent QTerrxxx.ods (resident in the Working-Files folder for
&apos;// the territory.

&apos;//	constants.

&apos;//	local variables.
dim sTerrID			As	String			&apos;// copy of passed territory ID
dim oDoc			As	Object			&apos;// ThisComponent to save to gs
dim oUntitledDoc	As 	Object			&apos;// untitled PubTerr
dim oParentDoc		As	Object			&apos;// parent document of PubTerr workbook

	&apos;// code.
	ON ERROR GOTO ErrorHandler
	sTerrID = psTerrID
	CreateSuperTerr(psTerrID)

if 1 = 1 then
  GoTo NormalExit
endif


NormalExit:
	exit sub
	
ErrorHandler:
	msgbox(&quot;DoSuperWithCalc - unprocessed error&quot;)
	GoTo NormalExit
	
end sub		&apos;// end DoSuperWithCalc	7/12/21.	21:09
&apos;/**/


&apos;// AddHdrToQTerr.bas
&apos;//---------------------------------------------------------------
&apos;// AddHdrToQTerr - Add TerrxxxHdr sheet to QTerrxxx.ods workbook.
&apos;//		12/23/21.	wmk.	16:21
&apos;//---------------------------------------------------------------

public sub AddHdrToQTerr( psTerrID As String )

&apos;//	Usage.	call AddHdrToQTerr( sTerrID )
&apos;//
&apos;//		sTerrID = territory ID for which to open QTerrxxx.csv
&apos;//
&apos;// Entry.	Territories/.../TerrData/Terrxxx/Working-Files/QTerrxxx.ods
&apos;//				contains territory records for territory xxx, in sheet
&apos;//				QTerrxxx.
&apos;//			Territories/.../TerrData/Terrxxx/Working-Files/TerrxxxHdr.ods
&apos;//				contains territory header information from TerrIDData.db
&apos;//
&apos;//	Exit.	QTerrxxx.ods has sheet TerrxxxHdr added as last sheet, from
&apos;//			workbook TerrxxxHdr.ods
&apos;//
&apos;// Calls.
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	7/11/21.	wmk.	original code; adapted from abandoned code
&apos;//				 in OpenQTerr.bas.
&apos;// 12/23/21.	wmk.	modified to use module-wide constant
&apos;//				 csTerrDataPath.		
&apos;//
&apos;//	Notes. This is the second step in processing a QTerrxxx.csv file
&apos;// into a PubTerr workbook. The first step openend the .csv file and
&apos;// saved it as QTerrxxx.ods, closing it. This step re-opens the
&apos;// QTerxxx.ods workbook, opens a second workbook TerrxxxHdr.ods, and
&apos;// adds its TerxxxHdr sheet to the end of the QTerrxx.ods workbook,
&apos;// closing both when finished.
&apos;//

&apos;//	constants.
&apos;const csTerrBase = &quot;defined above&quot;
&apos;const csTerrDataPath = &quot;defiend above&quot;

&apos;//	local variables.
dim oDoc			As Object	&apos;// generic document object
dim sBaseName		As string	&apos;// target base filename
dim sBasePath		As String	&apos;// target base folder
dim sTargPath		As String	&apos;// target access path
dim sTargFile		As string	&apos;// target filename to open
dim sTerrID			As String	&apos;// local territory ID
dim sFullTargPath	As String	&apos;// full target path
dim sTargetURL		As String	&apos;// target URL
dim oTestDoc		As Object	&apos;// document object
dim oTestDoc2		As Object	&apos;// 2nd document object

	&apos;// code.
	ON ERROR GOTO ErrorHandler
	oTestDoc = ThisComponent
	sTerrID = psTerrID
	sBaseName = &quot;QTerr&quot;
	sBasePath = &quot;/Terr&quot;
	sTargPath = sBasePath &amp; sTerrID

	&apos;// open QTerrxxx.ods
    sFullTargPath = csTerrDataPath &amp; sBasePath &amp; sTerrID &amp; &quot;/Working-Files/&quot;_ 
		&amp; sBaseName &amp; sTerrID &amp; &quot;.ods&quot;
		
dim Args(1)	As new com.sun.star.beans.PropertyValue 
	sTargetURL = convertToURL(sFullTargPath)
	Args(1).name = &quot;FilterName&quot;
	Args(1).Value = &quot;calc8&quot;
	Args(0).name = &quot;Hidden&quot;
	Args(0).value = False
	oTestDoc = StarDesktop.loadComponentFromURL(sTargetURL, &quot;_blank&quot;, 0, Args())

	&apos;// open TerrxxxHdr.ods
    sFullTargPath = csTerrDataPath &amp; sBasePath &amp; sTerrID &amp; &quot;/Working-Files/&quot;_ 
		&amp; sBasePath &amp; sTerrID &amp; &quot;Hdr.ods&quot;

dim Args2(1) 	As new com.sun.star.beans.PropertyValue 
	sTargetURL = convertToURL(sFullTargPath)
	Args2(1).name = &quot;FilterName&quot;
	Args2(1).Value = &quot;calc8&quot;
	Args2(0).name = &quot;Hidden&quot;
	Args2(0).value = False
    oTestDoc2 = StarDesktop.loadComponentFromURL(sTargetURL, &quot;_blank&quot;, 0, Args2())

	&apos;// Now export the header to the QTerrxxx.ods workbook.
	ExportTerrHdr()
	
if 1 = 0 then
xray oTestDoc	
endif

	oTestDoc.Store

CloseFiles:
	&apos;// close the workbooks and cleanup.
	oTestDoc2.close(1)
	oTestDoc.close(1)
	
	&apos;// Now ready to process territory....

NormalExit:
	exit sub
	
ErrorHandler:
	msgbox(&quot;AddHdrToQTerr - unprocessed error&quot;)
	GoTo NormalExit
	
end sub		&apos;// end AddHdrToQTerr	12/23/21.	16:21
&apos;/**/


&apos;// AddHdrToQBTerr.bas
&apos;//--------------------------------------------------------------------
&apos;// AddHdrToQBTerr - Add TerrxxxHdr sheet to biz QTerrxxx.ods workbook.
&apos;//		12/23/21.	wmk.	16:30
&apos;//--------------------------------------------------------------------

public sub AddHdrToQBTerr( psTerrID As String )

&apos;//	Usage.	call AddHdrToQBTerr( sTerrID )
&apos;//
&apos;//		sTerrID = territory ID for which to open QTerrxxx.csv
&apos;//
&apos;// Entry.	Territories/.../TerrData/Terrxxx/Working-Files/QTerrxxx.ods
&apos;//				contains territory records for territory xxx, in sheet
&apos;//				QTerrxxx.
&apos;//			Territories/.../TerrData/Terrxxx/Working-Files/TerrxxxHdr.ods
&apos;//				contains territory header information from TerrIDData.db
&apos;//
&apos;//	Exit.	QTerrxxx.ods has sheet TerrxxxHdr added as last sheet, from
&apos;//			workbook TerrxxxHdr.ods
&apos;//
&apos;// Calls.
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	7/11/21.	wmk.	original code; adapted from abandoned code
&apos;//				 in OpenQTerr.bas.
&apos;// 12/23/21.	wmk.	csTerrBase, csBTerrDataPath module-wide vars
&apos;//				 used for multi-host support.		
&apos;//
&apos;//	Notes. This is the second step in processing a QTerrxxx.csv file
&apos;// into a PubTerr workbook. The first step openend the .csv file and
&apos;// saved it as QTerrxxx.ods, closing it. This step re-opens the
&apos;// QTerxxx.ods workbook, opens a second workbook TerrxxxHdr.ods, and
&apos;// adds its TerxxxHdr sheet to the end of the QTerrxx.ods workbook,
&apos;// closing both when finished.
&apos;//

&apos;//	constants.
&apos;const csTerrBase = &quot;defined above&quot;
&apos;const csBTerrDataPath = &quot;defined above&quot;

&apos;//	local variables.
dim oDoc			As Object	&apos;// generic document object
dim sBaseName		As string	&apos;// target base filename
dim sBasePath		As String	&apos;// target base folder
dim sTargPath		As String	&apos;// target access path
dim sTargFile		As string	&apos;// target filename to open
dim sTerrID			As String	&apos;// local territory ID
dim sFullTargPath	As String	&apos;// full target path
dim sTargetURL		As String	&apos;// target URL
dim oTestDoc		As Object	&apos;// document object
dim oTestDoc2		As Object	&apos;// 2nd document object

	&apos;// code.
	ON ERROR GOTO ErrorHandler
	oTestDoc = ThisComponent
	sTerrID = psTerrID
	sBaseName = &quot;QTerr&quot;
	sBasePath = &quot;/Terr&quot;
	sTargPath = sBasePath &amp; sTerrID
if 1 = 0 then

	&apos;// open QTerrxxx.ods
    sFullTargPath = csBTerrPath &amp; sBasePath &amp; sTerrID &amp; &quot;/Working-Files/&quot;_ 
		&amp; sBaseName &amp; sTerrID &amp; &quot;.ods&quot;
		
dim Args(1)	As new com.sun.star.beans.PropertyValue 
	sTargetURL = convertToURL(sFullTargPath)
	Args(1).name = &quot;FilterName&quot;
	Args(1).Value = &quot;calc8&quot;
	Args(0).name = &quot;Hidden&quot;
	Args(0).value = False
	oTestDoc = StarDesktop.loadComponentFromURL(sTargetURL, &quot;_blank&quot;, 0, Args())
endif

	&apos;// open TerrxxxHdr.ods
    sFullTargPath = csBTerrPath &amp; sBasePath &amp; sTerrID &amp; &quot;/Working-Files/&quot;_ 
		&amp; sBasePath &amp; sTerrID &amp; &quot;Hdr.ods&quot;

dim Args2(1) 	As new com.sun.star.beans.PropertyValue 
	sTargetURL = convertToURL(sFullTargPath)
	Args2(1).name = &quot;FilterName&quot;
	Args2(1).Value = &quot;calc8&quot;
	Args2(0).name = &quot;Hidden&quot;
	Args2(0).value = False
    oTestDoc2 = StarDesktop.loadComponentFromURL(sTargetURL, &quot;_blank&quot;, 0, Args2())

	&apos;// Now export the header to the QTerrxxx.ods workbook.
	ExportTerrHdr()
	
if 1 = 0 then
xray oTestDoc	
endif

	oTestDoc.Store

CloseFiles:
	&apos;// close the workbooks and cleanup.
	oTestDoc2.close(1)
&apos;	oTestDoc.close(1)
	
	&apos;// Now ready to process territory....

NormalExit:
	exit sub
	
ErrorHandler:
	msgbox(&quot;AddHdrToQBTerr - unprocessed error&quot;)
	GoTo NormalExit
	
end sub		&apos;// end AddHdrToQBTerr	12/23/21	16:30
&apos;/**/


&apos;// CreateSuperTerr.bas
&apos;//---------------------------------------------------------------
&apos;// CreateSuperTerr - Create SuperTerr from territory.
&apos;//		12/23/21.	wmk.	16:34
&apos;//---------------------------------------------------------------

public sub CreateSuperTerr( psTerrID As String )

&apos;//	Usage.	macro call or
&apos;//			call CreateSuperTerr( sTerrID )
&apos;//
&apos;//		sTerrID = territory ID
&apos;//
&apos;// Entry.	~/Territories/TerrData/Terrxxx/Terrxxx_PubTerr.ods exists
&apos;//			  as generated territory xxx.
&apos;//			~/Territories/.../Working-Files/QTerrxxx.ods exists with
&apos;//			  up-to-date territory records in Bridge table,  in
&apos;//			  Terrxxx_Bridge sheet
&apos;//
&apos;//	Exit.	~/Territories/.../Terrxxx/Terrxxx_SuperTerr.ods created
&apos;//				and Terrxxx_SuperTerr.xlsx created
&apos;//
&apos;// Calls. BridgeToSuper.
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	7/12/21.	wmk.	original code.
&apos;// 12/23/21.	wmk.	modified to use csTerrBase, csTerrDataPath for
&apos;//				 multihost support.
&apos;//				
&apos;//	Notes. CreateSuperTerr takes an existing workbook with sheet
&apos;//	Terrxxx_Bridge and creates a SuperTerritory
&apos;//

&apos;//	constants.
&apos;const csTerrBase = &quot;defined above&quot;
&apos;const csTerrDataPath = &quot;defined above&quot;

&apos;//	local variables.
dim sTerrID				As string
&apos;// uno document vars.
dim oTestDoc	As Object			&apos;// QTerrxxx.ods
dim oTestDoc2	As Object			&apos;// Terrxxx_PubTerr.ods
dim sBaseName	As String
dim sBasePath	As String
dim sTargPath	As String
dim sFullTargPath	As String
dim sTargetURL	As String

	&apos;// code.
	ON ERROR GOTO ErrorHandler
	sTerrID = psTerrID
	sBaseName = &quot;QTerr&quot;
	sBasePath = &quot;/Terr&quot;
	sTargPath = sBasePath &amp; sTerrID

	&apos;// open QTerrxxx.ods (contains Terrxxx_Bridge table)
	&apos;// open QTerrxxx.ods to process.

    sFullTargPath = csTerrDataPath &amp; sBasePath &amp; sTerrID &amp; &quot;/Working-Files/&quot;_ 
		&amp; sBaseName &amp; sTerrID &amp; &quot;.ods&quot;
		
dim Args(1)	As new com.sun.star.beans.PropertyValue 
	sTargetURL = convertToURL(sFullTargPath)
	Args(1).name = &quot;FilterName&quot;
	Args(1).Value = &quot;calc8&quot;
	Args(0).name = &quot;Hidden&quot;
	Args(0).value = False
	oTestDoc = StarDesktop.loadComponentFromURL(sTargetURL, &quot;_blank&quot;, 0, Args())

	&apos;// QTerrxxx.ods is active workbook, process Bridge to Super territory.
	BridgeToSuper()
	&apos;// at this point, should be in PubTerr with Search sheet added...
	
NormalExit:
	exit sub
	
ErrorHandler:
	msgbox(&quot;CreateSuperTerr - unprocessed error&quot;)
	GoTo NormalExit
	
end sub		&apos;// end CreateSuperTerr	12/23/21.	16:34
&apos;/**/


&apos;// QodsToBizTerr.bas
&apos;//-------------------------------------------------------------------
&apos;// QodsToBizTerr - Take SQL Territory query .csv data to PubTerr sheet.
&apos;//		12/23/21.	wmk.	16:39
&apos;//-------------------------------------------------------------------
	
public sub QodsToBizTerr(psTerrID As String)

&apos;//	Usage.	call QodsToBizTerr(sTerrID)
&apos;//
&apos;//		sTerrID = territory ID to process to PubTerr
&apos;//
&apos;// Entry.	~Territories/.../TerrData/Terrxxx/Working-Files/QTerrxxx.ods
&apos;//			  contains territory records worksheet QTerrxxx and header
&apos;//			  worksheet TerrxxxHdr to use as base for territory build
&apos;//		Assume all sheets are closed on entry, then start clean by re-opening
&apos;//		the workbooks/sheets needed.
&apos;//
&apos;//	Exit.	2 new sheets generated; Terrxxx-Bridge and Terrxxx_PubTerr.
&apos;//			The Terxxx_PubTerr is also copied to a new workbook, which
&apos;//			the user can save as a &quot;ready-to-go&quot; territory.
&apos;//
&apos;// Calls.	PickACell, CopyToEnd, UnprotectSheet,
&apos;//			*[QGetToBridge] QGetToBizBridge
&apos;// 		RenameSheet,
&apos;//			*[BridgeToTerr3] BizBridgeToBiz
&apos;//			CopyBizToNewWork, fsSetPubSheetName
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;// 9/25/21.	wmk.	original code; adapted from QodsToPubTerr;
&apos;//						csTerrBase constant changed; sPubTerrBase changed
&apos;//						to &apos;_BizTerr&apos; from &apos;_PubTerr&apos;; if 1=0 sections
&apos;//						removed.
&apos;// 9/26/21.	wmk.	QGetToBridge replaced with QBizGetToBridge;
&apos;//						BridgeToTerr3 replaced with BizBridgeToBiz;
&apos;//						entry assumes all workbooks/spreadsheets are closed
&apos;//						and ready for re-open for processing.
&apos;// 9/29/21.	wmk.	replace CopyToNewWork with CopyBizToNewWork.
&apos;// Legacy mods.
&apos;//	7/11/21.	wmk.	original code; adpated from QToPubTerr3; mod 
&apos;//				 history retained for reference.
&apos;// 2/20/21.	wmk.	move forward to use BridgeToTerr3.
&apos;// 3/16/21.	wmk.	preserve PubTerr sheet name for use
&apos;//				 by other subs via fsSetPubSheetName.
&apos;//	7/9/21.		wmk.	oDoc and oSel assignments moved ahead of all other code;
&apos;//				 PickACell called to anchor focus; code modified to use
&apos;//				 URL to extract territory ID instead of $D$4.
&apos;//	7/12/21.	wmk.	depend on BridgeToTerr3 to save QTerrxxx.ods after PubTerr
&apos;//				 generated; move sheet saving code to CopyToNewWork;
&apos;//				 remove call to ProtectSheet after Bridge; after
&apos;//				 BridgeToTerr3, re-open QTerrxxx.ods for subsequent
&apos;//				 operations.
&apos;// 12/23/21.	wmk.	updated to use csTerrBase, csBTerrDataPath for
&apos;//				 multihost support.
&apos;//
&apos;//	Notes. QodsToBizTerr opens the Working-Files QTerrxxx.ods, instead of
&apos;//	expecting it open on entry.

&apos;//	constants.
const COL_D=3
const ROW_4=3

&apos;const csTerrBase = &quot;/media/ubuntu/Windows/Users/Bill/Territories/BTerrData/&quot;
&apos;const csTerrBase = &quot;defined above&quot;
&apos;const csBTerrDataPath = &quot;defined above&quot;

&apos;//	local variables.
dim oDoc		As Object
dim oSel		As Object
dim oRange		As Object
dim iSheetIx	As Integer
dim oSheet		As Object
dim oCell		As Object
dim sTerrID		As String
dim sSheetName	As String

dim oTestDoc	As Object
dim sBaseName	As String
dim sBasePath	As String
dim sTargPath	As String
dim sFullTargPath	As String
dim sTargetURL	As String

&apos;// code.
	ON ERROR GOTO ErrorHandler

	&apos;// open QTerrxxx.ods to process.
	oTestDoc = ThisComponent
	sTerrID = psTerrID
	sBaseName = &quot;QTerr&quot;
	sBasePath = &quot;/Terr&quot;
	sTargPath = sBasePath &amp; sTerrID

	&apos;// open QTerrxxx.ods
    sFullTargPath = csBTerrDataPath &amp; sBasePath &amp; sTerrID &amp; &quot;/Working-Files/&quot;_ 
		&amp; sBaseName &amp; sTerrID &amp; &quot;.ods&quot;
		
dim Args(1)	As new com.sun.star.beans.PropertyValue 
	sTargetURL = convertToURL(sFullTargPath)
	Args(1).name = &quot;FilterName&quot;
	Args(1).Value = &quot;calc8&quot;
	Args(0).name = &quot;Hidden&quot;
	Args(0).value = False
	oTestDoc = StarDesktop.loadComponentFromURL(sTargetURL, &quot;_blank&quot;, 0, Args())
	PickACell()
	oDoc = ThisComponent
	oSel = oDoc.getCurrentSelection()
	CopyToEnd()
	UnprotectSheet()
&apos;//	QGetToBridge()
	QGetToBizBridge()

	oRange = oSel.RangeAddress
	iSheetIx = oRange.Sheet
	oSheet = oDoc.Sheets(iSheetIx)

dim sDocURL		As	String
dim nURLlen		As	Integer
dim sURLBase	As	String
dim sFileBase	As	String
dim sHdrFile	As	String

	&apos;// modify code to get sTerrID from URL ...QTerrxxx.ods
	sDocURL = ThisComponent.getURL()
	&apos;// expected URL = ../TerrData/Working-Files/QTerrxxx.ods
	nURLlen = len(sDocURL)
	sURLBase = left(sDocURL, nURLLen-12)	&apos;// up to last &apos;/&apos;
	sFileBase = right(sDocURL,11)	&apos;// Terrxxx.ods
	sHdrFile = left(sFileBase,7) + &quot;Hdr&quot; + right(sFileBase,4)
	sTerrID = mid(sFileBase,5,3)
		
&apos;	oCell = oSheet.getCellByPosition(COL_D, ROW_4)
&apos;	sTerrID = trim(oCell.String)
	sSheetName = &quot;Terr&quot; + sTerrID + &quot;_Bridge&quot;
	RenameSheet(sSheetName)
&apos;	ProtectSheet()								&apos;// protect sheet

	CopyToEnd()
	UnprotectSheet()
&apos;//	BridgeToTerr3()
	BizBridgeToBiz()

	&apos;// now re-open QTerrxxx.ods
    sFullTargPath = csBTerrDataPath &amp; sBasePath &amp; sTerrID &amp; &quot;/Working-Files/&quot;_ 
		&amp; sBaseName &amp; sTerrID &amp; &quot;.ods&quot;
		
dim Args4(1)	As new com.sun.star.beans.PropertyValue 
	sTargetURL = convertToURL(sFullTargPath)
	Args4(1).name = &quot;FilterName&quot;
	Args4(1).Value = &quot;calc8&quot;
	Args4(0).name = &quot;Hidden&quot;
	Args4(0).value = False
	oTestDoc = StarDesktop.loadComponentFromURL(sTargetURL, &quot;_blank&quot;, 0, Args4())

&apos;	sSheetName = &quot;Terr&quot; + sTerrID + &quot;_BizTerr&quot;
&apos;	RenameSheet(sSheetName)
&apos;	fsSetPubSheetName(sSheetName)
&apos;	ProtectSheet()

	CopyBizToNewWork(sSheetName)

	oTestDoc.Close(1)

&apos;dim oQTerrDoc	As Object
&apos;	oQTerrDoc = ThisComponent.CurrentController.Frame
&apos;	oQTerrDoc.close(1)

&apos;oPubTerrDoc.close(1)
	
NormalExit:
	exit sub
	
ErrorHandler:
	msgbox(&quot;QodsToBizTerr - unprocessed error&quot;)
	GoTo NormalExit
	
end sub 	&apos;// end QodsToBizTerr	12/23/21.	16:39
&apos;/**/


&apos;// QodsToPubTerr.bas
&apos;//-------------------------------------------------------------------
&apos;// QodsToPubTerr - Take SQL Territory query .csv data to PubTerr sheet.
&apos;//		12/23/21.	wmk.	21:05
&apos;//-------------------------------------------------------------------
	
public sub QodsToPubTerr(psTerrID As String)

&apos;//	Usage.	call QodsToPubTerr(sTerrID)
&apos;//
&apos;//		sTerrID = territory ID to process to PubTerr
&apos;//
&apos;// Entry.	~Territories/.../TerrData/Terrxxx/Working-Files/QTerrxxx.ods
&apos;//			  contains territory records worksheet QTerrxxx and header
&apos;//			  worksheet TerrxxxHdr to use as base for territory build
&apos;//
&apos;//	Exit.	2 new sheets generated; Terrxxx-Bridge and Terrxxx_PubTerr.
&apos;//			The Terxxx_PubTerr is also copied to a new workbook, which
&apos;//			the user can save as a &quot;ready-to-go&quot; territory.
&apos;//
&apos;// Calls.	CopyToEnd, UnprotectSheet, QGetToBridge, RenameSheet,
&apos;//			BridgeToTerr3, CopyToNewWork, fsSetPubSheetName
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	7/11/21.	wmk.	original code; adpated from QToPubTerr3; mod 
&apos;//						history retained for reference.
&apos;// 2/20/21.	wmk.	move forward to use BridgeToTerr3.
&apos;// 3/16/21.	wmk.	preserve PubTerr sheet name for use
&apos;//						by other subs via fsSetPubSheetName.
&apos;//	7/9/21.		wmk.	oDoc and oSel assignments moved ahead of all other code;
&apos;//						PickACell called to anchor focus; code modified to use
&apos;//						URL to extract territory ID instead of $D$4.
&apos;//	7/12/21.	wmk.	depend on BridgeToTerr3 to save QTerrxxx.ods after PubTerr
&apos;//				 generated; move sheet saving code to CopyToNewWork;
&apos;//				 remove call to ProtectSheet after Bridge; after
&apos;//				 BridgeToTerr3, re-open QTerrxxx.ods for subsequent
&apos;//				 operations.
&apos;// 12/23/21.	wmk.	modified to use csTerrBase, csTerrDataPath module-wide
&apos;//				 variables for multihost support.
&apos;//
&apos;//	Notes. QodsToPubTerr opens the Working-Files QTerrxxx.ods, instead of
&apos;//	expecting it open on entry.

&apos;//	constants.
const COL_D=3
const ROW_4=3
&apos;const csTerrBase = &quot;defined above&quot;
&apos;const csTerrDataPath = &quot;defined above&quot; 


&apos;//	local variables.
dim oDoc		As Object
dim oSel		As Object
dim oRange		As Object
dim iSheetIx	As Integer
dim oSheet		As Object
dim oCell		As Object
dim sTerrID		As String
dim sSheetName	As String

dim oTestDoc	As Object
dim sBaseName	As String
dim sBasePath	As String
dim sTargPath	As String
dim sFullTargPath	As String
dim sTargetURL	As String

&apos;// code.
	ON ERROR GOTO ErrorHandler

	&apos;// open QTerrxxx.ods to process.
	oTestDoc = ThisComponent
	sTerrID = psTerrID
	sBaseName = &quot;QTerr&quot;
	sBasePath = &quot;/Terr&quot;
	sTargPath = sBasePath &amp; sTerrID

	&apos;// open QTerrxxx.ods
    sFullTargPath = csTerrDataPath &amp; sBasePath &amp; sTerrID &amp; &quot;/Working-Files/&quot;_ 
		&amp; sBaseName &amp; sTerrID &amp; &quot;.ods&quot;
		
dim Args(1)	As new com.sun.star.beans.PropertyValue 
	sTargetURL = convertToURL(sFullTargPath)
	Args(1).name = &quot;FilterName&quot;
	Args(1).Value = &quot;calc8&quot;
	Args(0).name = &quot;Hidden&quot;
	Args(0).value = False
	oTestDoc = StarDesktop.loadComponentFromURL(sTargetURL, &quot;_blank&quot;, 0, Args())

if 1 = 0 then
  GoTo NormalExit
endif

	PickACell()
	oDoc = ThisComponent
	oSel = oDoc.getCurrentSelection()
	CopyToEnd()
	UnprotectSheet()
	QGetToBridge()

	oRange = oSel.RangeAddress
	iSheetIx = oRange.Sheet
	oSheet = oDoc.Sheets(iSheetIx)

dim sDocURL		As	String
dim nURLlen		As	Integer
dim sURLBase	As	String
dim sFileBase	As	String
dim sHdrFile	As	String

	&apos;// modify code to get sTerrID from URL ...QTerrxxx.ods
	sDocURL = ThisComponent.getURL()
	&apos;// expected URL = ../TerrData/Working-Files/QTerrxxx.ods
	nURLlen = len(sDocURL)
	sURLBase = left(sDocURL, nURLLen-12)	&apos;// up to last &apos;/&apos;
	sFileBase = right(sDocURL,11)	&apos;// Terrxxx.ods
	sHdrFile = left(sFileBase,7) + &quot;Hdr&quot; + right(sFileBase,4)
	sTerrID = mid(sFileBase,5,3)
		
&apos;	oCell = oSheet.getCellByPosition(COL_D, ROW_4)
&apos;	sTerrID = trim(oCell.String)
	sSheetName = &quot;Terr&quot; + sTerrID + &quot;_Bridge&quot;
	RenameSheet(sSheetName)
&apos;	ProtectSheet()								&apos;// protect sheet

	CopyToEnd()
	UnprotectSheet()
	BridgeToTerr3()

	&apos;// now re-open QTerrxxx.ods
    sFullTargPath = csTerrDataPath &amp; sBasePath &amp; sTerrID &amp; &quot;/Working-Files/&quot;_ 
		&amp; sBaseName &amp; sTerrID &amp; &quot;.ods&quot;
		
dim Args4(1)	As new com.sun.star.beans.PropertyValue 
	sTargetURL = convertToURL(sFullTargPath)
	Args4(1).name = &quot;FilterName&quot;
	Args4(1).Value = &quot;calc8&quot;
	Args4(0).name = &quot;Hidden&quot;
	Args4(0).value = False
	oTestDoc = StarDesktop.loadComponentFromURL(sTargetURL, &quot;_blank&quot;, 0, Args4())

&apos;	sSheetName = &quot;Terr&quot; + sTerrID + &quot;_PubTerr&quot;
&apos;	RenameSheet(sSheetName)
&apos;	fsSetPubSheetName(sSheetName)
&apos;	ProtectSheet()

if 1 = 0 then
&apos;//================================================================
&apos;// inline code to save sheet...
&apos;dim oQTerrDoc	As Object
dim Array()

&apos;	oQTerrDoc = ThisComponent.CurrentController.Frame
&apos;	oQTerrDoc.Store
dispatcher = createUnoService(&quot;com.sun.star.frame.DispatchHelper&quot;)

rem ----------------------------------------------------------------------
&apos;dispatcher.executeDispatch(oQTerrDoc, &quot;.uno:Save&quot;, &quot;&quot;, 0, Array())
&apos;//===============================================================
endif

	CopyToNewWork(sSheetName)

if 1 = 0 then
&apos;//============================================================
&apos;// now focus is on Untitled x.ods new workbook; save it
&apos;// there is no URL for it, so will have to generate a SaveAs
&apos;// uno request...
dim sPubTerrURL		As String
dim sPubTargPath	As String
dim sPubTerrBase	As String
dim sPubTargURL		As String
dim oPubTerrDoc		As Object
	oPubTerrDoc = ThisComponent.CurrentController.Frame
	sPubTerrBase = &quot;_PubTerr&quot;
    sPubTargPath = csTerrDataPath &amp; sBasePath &amp; sTerrID &amp; &quot;/&quot;_ 
		&amp; sBasePath &amp; sTerrID &amp; sPubTerrBase &amp; &quot;.ods&quot;
	sPubTargURL = convertToURL(sPubTargPath)
	
	&apos;// inline SaveAs to save Terrxxx_PubTerr.ods

rem ----------------------------------------------------------------------
rem get access to the document
dim document   as object
&apos;dim dispatcher as object

&apos;document   = ThisComponent.CurrentController.Frame
&apos;dispatcher = createUnoService(&quot;com.sun.star.frame.DispatchHelper&quot;)

rem ----------------------------------------------------------------------
dim args1(1) as new com.sun.star.beans.PropertyValue
args1(0).Name = &quot;URL&quot;
&apos;args1(0).Value = &quot;file:///media/ubuntu/Windows/Users/Bill/Documents/Cong-Files/Territories
&apos;                    /TerrData/Terrxxx/TerrData/Terrxxx_PubTerr.ods&quot;
args1(0).Value = sPubTargURL
args1(1).Name = &quot;FilterName&quot;
args1(1).Value = &quot;calc8&quot;

dispatcher.executeDispatch(oPubTerrDoc, &quot;.uno:SaveAs&quot;, &quot;&quot;, 0, args1())
&apos;//===========================================================================
endif

if 1 = 0 then
&apos;//===========================================================
	&apos;// Now reformat as Landscape with grid.
&apos;	oPubTerrDoc = ThisComponent.CurrentController.Frame
&apos;	SetGridLand()
&apos;	oPubTerrDoc.Store

	&apos;// Now save as .xlsx
	SaveXlsx()
	
	&apos;// Now save as .pdf.
&apos;	ExportPDF()
	ExportTerrAsPDF1()
	
document   = ThisComponent.CurrentController.Frame
document.close(1)
&apos;oQTerrDoc.close(1)
&apos;//==========================================================
endif

oTestDoc.Close(1)
&apos;dim oQTerrDoc	As Object
&apos;	oQTerrDoc = ThisComponent.CurrentController.Frame
&apos;	oQTerrDoc.close(1)

&apos;oPubTerrDoc.close(1)
	
NormalExit:
	exit sub
	
ErrorHandler:
	msgbox(&quot;QodsToPubTerr - unprocessed error&quot;)
	GoTo NormalExit
	
end sub 	&apos;// end QodsToPubTerr		12/23/21.	21:06
&apos;/**/


&apos;// sGenFastURL.bas
&apos;//---------------------------------------------------------------
&apos;// sGenFastURL - Generate fastpeoplesearch.com phone look-up url.
&apos;//		2/21/21.	wmk.	00:07
&apos;//---------------------------------------------------------------

public function sGenFastURL(psAddr As String,_
				psUnit As String, psCity As String) as String

&apos;//	Usage.	sURL = sGenFastURL( sAddr, sUnit, sCity )
&apos;//
&apos;//		sAddr = street address
&apos;//		sUnit = unit/apt number
&apos;//		sCity = situs city
&apos;//
&apos;// Entry.
&apos;//
&apos;//	Exit.	sURL = url of whitepages.com to search for phone number
&apos;//           by following the url in any browser; pattern is as follows:
&apos;//  &quot;https://www.fastpeoplesearch.com/address/413-Andros-unit_Venice-FL/?&quot;
&apos;//
&apos;// Calls.	ParseSitus, ParseUnit.
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	2/9/21.		wmk.	original code; adapted from sGenPhoneURL adding
&apos;//						unit parameter and ParseUnit call.
&apos;// 2/16/21.	wmk.	change to use ParseAddress to fully parse
&apos;//						address field since need street suffix for
&apos;//						fastpeople search hyperlink
&apos;// 2/19/21.	wmk.	add HWY, RTE, TPK, CWY, EXT, BYP to known
&apos;//						street types.
&apos;// 2/20/21.	wmk.	bug fix; all street field separators must be &quot;-&quot;
&apos;//						instead of spaces; fixed bug failing to include
&apos;//						street name if no street type suffix; fixed bug
&apos;//						where unit not trimmed prior to adding.
&apos;//	Notes. For now, City assumed to be &quot;Venice&quot;, State assumed to be &quot;FL&quot;
&apos;// Modify to accept City as 2nd parameter; caller will obtain from
&apos;// a fixed cell, say A4, in spreadsheet, or from Situs-City field
&apos;// if using SCPA data.

&apos;//	constants.
const csURLBase=&quot;https://www.fastpeoplesearch.com/address/&quot;
&apos;// insert house number here
const csSep=&quot;-&quot;
&apos;// insert street name here
&apos;const csSep here
&apos;// insert unit here
const csSep2=&quot;_&quot;
&apos;// insert city here
&apos;const csSep here
&apos;// insert state here


&apos;//	local variables.
dim sRetValue 	As String	&apos;// returned value
dim sState		As String	&apos;// state from address
dim sCity		As String	&apos;// city from address

dim sAddr		As String	&apos;// copy of passed situs
dim sFullUnit	As String	&apos;// full unit from bridge field
dim sSCUnit		As String	&apos;// parsed SC unit or just full unit
dim sBldUnit	As String	&apos;// parsed building/mailing unit
dim sBldg		As String	&apos;// parsed&quot;BLD&quot; or &quot;BLDG&quot; or empty
dim sBldNum		As String	&apos;// parsed building number

dim sUnit		As String	&apos;// bldg/mailing unit #, if present
dim sStreet		As String	&apos;// street here
dim sNumber		As String	&apos;// number here
dim sTokens()		As String	&apos;// address tokens array
dim sSeps			As String	&apos;// addres token delimiter(s)

dim i				As Integer	&apos;// loop index
dim nTokens		As Integer
dim bHasStreetDir	As Boolean
dim sStreetCompass	As String
dim sStreetType		As String
dim bHasStreetType	As Boolean

	&apos;// code.
	ON ERROR GOTO ErrorHandler
	sRetValue = &quot;&quot;
	
	&apos;// set actual values from situs
	sAddr = psAddr
&apos;	ParseSitus(sAddr, sNumber, sStreet, sUnit)
	sSeps = &quot; &quot;
	redim preserve sTokens(0)
	ParseAddress(sAddr, sSeps, sTokens())
	&apos;// flesh out address elements from tokens.
	sNumber = sTokens(0)
	sStreet = &quot;&quot;
	nTokens = UBound(sTokens)
	
	&apos;// account for direction N S E W NW NE SW SE as last field
	bHasStreetDir = instr(&quot;N S E W NW NE SW SE&quot;,sTokens(nTokens)) &gt; 0
	if bHasStreetDir then
	   sStreetCompass = &quot;-&quot; &amp; sTokens(nTokens)
	   sStreetType = UCase(sTokens(nTokens-1))
	else
	   sStreetCompass = &quot;&quot;
	   sStreetType = UCase(sTokens(nTokens))
	endif
	
	bHasStreetType = _
	 instr(&quot;AVE ST RD DR CIR LN TERR WAY CT RTE EXT HWY TPK CWY BYP&quot;,_
	 	 sStreetType) &gt; 0
	
	for i = 1 to nTokens
		sStreet = sStreet + sTokens(i)
		if i &lt; nTokens then
		   sStreet = sStreet &amp; &quot;-&quot;
		endif
	next i
	
&apos;	if bHasStreetType then
&apos;	   sStreet = sStreet &amp; &quot;-&quot; &amp; sStreetType
&apos;	endif
	
	&apos;// parse unit to get building/mailing unit.
	sFullUnit = trim(psUnit)
	if len(sFullUnit) &gt; 0 then
	   ParseUnit(sFullUnit, sSCUnit, sBldUnit, sBldg, sBldNum)
	   sUnit = sBldUnit
	   if len(sBldUnit) = 0 then
	      sUnit = sSCUnit
	   else
	      sUnit = sBldUnit
	   endif
	else
	   sUnit = &quot;&quot;
	endif

	&apos;// default city to Venice.
	if len(psCity) = 0 then
		sCity = &quot;Venice&quot;
	else
		sCity = psCity
	endif
	sState = &quot;FL&quot;
	
	&apos;// generate url from extracted information.
&apos;	sRetValue = csURLBase + sNumber + csSep _
&apos;	          + sStreet + sStreetCompass
	sRetValue = csURLBase + sNumber + csSep _
	          + sStreet					&apos;// compass already there..
	if len(sUnit) &gt; 0 then
&apos;	   sRetValue = sRetValue + csSep + sUnit
	   sRetValue = sRetValue + &quot;-Apt-&quot; + sUnit
	endif
	sRetValue = sRetValue + csSep2 + sCity + csSep _
	              + sState
	
NormalExit:
	sGenFastURL = sRetValue
	exit function
	
ErrorHandler:
   msgbox(&quot; sGenFastURL - unprocessed error.&quot;)
   GoTo NormalExit
end function 	&apos;// end sGenFastURL	2/20/21.	00:07
&apos;/**/

&apos;// sGenPhoneURL.bas
&apos;//---------------------------------------------------------------
&apos;// sGenPhoneURL - Generate phone look-up url.
&apos;//		8/16/20.	wmk.	15:45
&apos;//---------------------------------------------------------------

public function sGenPhoneURL(psSitus As String, psCity As String) as String

&apos;//	Usage.	sURL = sGenPhoneURL( sSitus, sCity )
&apos;//
&apos;//		sSitus = full situs street address
&apos;//		sCity = situs city
&apos;//
&apos;// Entry.	Cells pointed to by oRange.StartRow contain address information
&apos;//         from which to generate the returned url.
&apos;//
&apos;//	Exit.	sURL = url of truepeoplesearch.com to search for phone number
&apos;//           by following the url in any browser; pattern is as follows:
&apos;//&quot; https://www.truepeoplesearch.com/
&apos;//    details?streetaddress=&lt;number&gt;%20&lt;street name&gt;%20&lt;unit&gt;
&apos;//    &amp;citystatezip=&lt;city&gt;%2C%20&lt;state&gt;&amp;rid=0x0&quot;
&apos;//
&apos;// Calls.	ParseSitus.
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	8/9/20.		wmk.	original code
&apos;// 8/10/20.	wmk.	bug fixes
&apos;//	8/15/20.	wmk.	calling sequence changed adding City parameter
&apos;// 8/16/20.	wmk.	psState corrected to psCity
&apos;//
&apos;//	Notes.
&apos;//

&apos;//	constants.

&apos;// URL building constants.
const csURLBase=&quot;https://www.truepeoplesearch.com/&quot;
const csQuery=&quot;details?streetaddress=&quot;
&apos;// insert house number here
const csSep=&quot;%20&quot;
&apos;// insert street name here
&apos;const csSep here
&apos;// insert unit here
const csCityStateZip=&quot;&amp;citystatezip=&quot;
&apos;// insert city here
const csSep2=&quot;%2C%20&quot;
&apos;// insert state here
const csQEnd= &quot;&amp;rid=0x0&quot;

&apos;//	local variables.
dim sRetValue As String		&apos;// returned value
dim sState		As String	&apos;// state from address
dim sCity		As String	&apos;// city from address
dim sSitus		As String	&apos;// copy of passed situs
dim sUnit		As String	&apos;// unit #, if present
dim sStreet		As String	&apos;// street here
dim sNumber		As String	&apos;// number here

	&apos;// code.
	ON ERROR GOTO ErrorHandler
	sRetValue = &quot;&quot;
	
	&apos;// set actual values from situs
	sSitus = psSitus
	ParseSitus(sSitus, sNumber, sStreet, sUnit)
	if len(psCity) = 0 then
		sCity = &quot;Venice&quot;
	else
		sCity = psCity
	endif
	
	sState = &quot;FL&quot;
	
	&apos;// generate url from extracted information.
	sRetValue = csURLBase + csQuery + sNumber + csSep _
	          + sStreet
	if len(sUnit) &gt; 0 then
	   sRetValue = sRetValue + csSep + sUnit
	endif
	sRetValue = sRetValue + csCityStateZip + sCity + csSep2 _
	              + sState + csQEnd
	
NormalExit:
	sGenPhoneURL = sRetValue
	exit function
	
ErrorHandler:
   msgbox(&quot; sGenPhoneURL - unprocessed error.&quot;)
   GoTo NormalExit
end function 	&apos;// end sGenPhoneURL	8/15/20.
&apos;/**/

&apos;// sGen2PhoneURL.bas
&apos;//---------------------------------------------------------------
&apos;// sGen2PhoneURL - Generate phone look-up url with unit.
&apos;//		2/10/21.	wmk.	05:30
&apos;//---------------------------------------------------------------

public function sGen2PhoneURL(psAddr As String,_
				psUnit As String, psCity As String) as String

&apos;//	Usage.	sURL = sGen2PhoneURL( sAddr, sUnit, sCity )
&apos;//
&apos;//		sAddr = full situs street address
&apos;//		sCity = situs city
&apos;//
&apos;// Entry.	Cells pointed to by oRange.StartRow contain address information
&apos;//         from which to generate the returned url.
&apos;//
&apos;//	Exit.	sURL = url of truepeoplesearch.com to search for phone number
&apos;//           by following the url in any browser; pattern is as follows:
&apos;//&quot; https://www.truepeoplesearch.com/
&apos;//    details?streetaddress=&lt;number&gt;%20&lt;street name&gt;%20&lt;unit&gt;
&apos;//    &amp;citystatezip=&lt;city&gt;%2C%20&lt;state&gt;&amp;rid=0x0&quot;
&apos;//
&apos;// Calls.	ParseSitus, ParseUnit.
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	2/9/21.		wmk.	original code; adapted from sGenPhoneURL adding
&apos;//						unit parameter
&apos;//
&apos;//	Notes.
&apos;//

&apos;//	constants.

&apos;// URL building constants.
const csURLBase=&quot;https://www.truepeoplesearch.com/&quot;
const csQuery=&quot;details?streetaddress=&quot;
&apos;// insert house number here
const csSep=&quot;%20&quot;
&apos;// insert street name here
&apos;const csSep here
&apos;// insert unit here
const csCityStateZip=&quot;&amp;citystatezip=&quot;
&apos;// insert city here
const csSep2=&quot;%2C%20&quot;
&apos;// insert state here
const csQEnd= &quot;&amp;rid=0x0&quot;

&apos;//	local variables.
dim sRetValue As String		&apos;// returned value
dim sState		As String	&apos;// state from address
dim sCity		As String	&apos;// city from address
dim sAddr		As String	&apos;// copy of passed situs
dim sFullUnit	As String	&apos;// full unit from bridge field
dim sSCUnit		As String	&apos;// parsed SC unit or just full unit
dim sBldUnit	As String	&apos;// parsed building/mailing unit
dim sBldg		As String	&apos;// parsed&quot;BLD&quot; or &quot;BLDG&quot; or empty
dim sBldNum		As String	&apos;// parsed building number

dim sUnit		As String	&apos;// bldg/mailing unit #, if present
dim sStreet		As String	&apos;// street here
dim sNumber		As String	&apos;// number here

	&apos;// code.
	ON ERROR GOTO ErrorHandler
	sRetValue = &quot;&quot;
	
	&apos;// set values from address and unit
	sAddr = psAddr
	ParseSitus(sAddr, sNumber, sStreet, sFullUnit)
	
	&apos;// parse unit to get building/mailing unit.
	sFullUnit = psUnit
	if len(sFullUnit) &gt; 0 then
	   ParseUnit(sFullUnit, sSCUnit, sBldUnit, sBldg, sBldNum)
	   if len(sBldUnit) = 0 then
	      sUnit = sSCUnit
	   else
	      sUnit = sBldUnit
	   endif
	else
	   sUnit = &quot;&quot;
	endif
	
	&apos;// default city to Venice.
	if len(psCity) = 0 then
		sCity = &quot;Venice&quot;
	else
		sCity = psCity
	endif
	
	sState = &quot;FL&quot;
	
	&apos;// generate url from extracted information.
	sRetValue = csURLBase + csQuery + sNumber + csSep _
	          + sStreet
	if len(sUnit) &gt; 0 then
	   sRetValue = sRetValue + csSep + sUnit
	endif
	sRetValue = sRetValue + csCityStateZip + sCity + csSep2 _
	              + sState + csQEnd
	
NormalExit:
	sGen2PhoneURL = sRetValue
	exit function
	
ErrorHandler:
   msgbox(&quot; sGen2PhoneURL - unprocessed error.&quot;)
   GoTo NormalExit
end function 	&apos;// end sGen2PhoneURL	2/9/21. 17:45
&apos;/**/

&apos;// SetSearchWidths.bas
&apos;//---------------------------------------------------------------
&apos;// SetSearchWidths - Set column widths on search columns.
&apos;//		9/11/20.	wmk.	22:45
&apos;//---------------------------------------------------------------

public sub SetSearchWidths()

&apos;//	Usage.	macro call or
&apos;//			call SetSearchWidths()
&apos;//
&apos;// Entry.	User in RefUSA/Admin formatted territory sheet
&apos;//
&apos;//	Exit.	columns H-J widths set to 1.34&quot; (3404)
&apos;//
&apos;// Calls.
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	9/3/20.		wmk.	original code
&apos;//	9/8/20.		wmk.	change from M-P to H-J columns
&apos;//	9/11/20.	wmk.	code simplified
&apos;//
&apos;//	Notes. UNO Dispatcher exits this module, corrupting any module-wide
&apos;//	vars. Only way to preserve user cell selection on entry is in local
&apos;//	vars this sub.

&apos;//	constants.
const OnePt34=3404		&apos;// 1.34&quot;
const ONE_INCH=2540
const COL_H=7
const COL_I=8
const COL_J=9
const SRCH_WIDTH=1.34

&apos;//	local variables.
dim oDocument   as object
dim oDispatcher as object
dim oDoc	As Object	&apos;// ThisComponent
dim oSel	As Object	&apos;// current cell selection on entry
dim oRange	As Object	&apos;// RangeAddress selected
dim iSheetIx	As Integer	&apos;// current sheet index
dim oSheet	As Object	&apos;// current sheet
dim oCols	As Object	&apos;// .Columns current sheet

	&apos;// code.
	ON ERROR GOTO ErrorHandler
		
	&apos;// preserve user cell selection
	oDoc = ThisComponent
	oSel = oDoc.getCurrentSelection()
	oRange = oSel.RangeAddress
	iSheetIx = oRange.Sheet
	oSheet = oDoc.Sheets(iSheetIx)
	oCols = oSheet.Columns
	oCols(COL_H).setPropertyValue(&quot;Width&quot;, SRCH_WIDTH*ONE_INCH)
	oCols(COL_I).setPropertyValue(&quot;Width&quot;, SRCH_WIDTH*ONE_INCH)
	oCols(COL_J).setPropertyValue(&quot;Width&quot;, SRCH_WIDTH*ONE_INCH)
	
if true then
	GoTo EndOldCode
endif
&apos;//---------------------------------------------------------------------
	oDocument   = ThisComponent.CurrentController.Frame
	oDispatcher = createUnoService(&quot;com.sun.star.frame.DispatchHelper&quot;)
	&apos;// set column widths for N-P to 1.34&quot; (3404)

	&apos;// set up arguments for uno:GoToCell interface
	dim args1(0) as new com.sun.star.beans.PropertyValue
	args1(0).Name = &quot;ToPoint&quot;
	args1(0).Value = &quot;$H$6&quot;

	oDispatcher.executeDispatch(oDocument, &quot;.uno:GoToCell&quot;, &quot;&quot;, 0, args1())


rem ----------------------------------------------------------------------
dim args2(0) as new com.sun.star.beans.PropertyValue
	args2(0).Name = &quot;ColumnWidth&quot;
	args2(0).Value = OnePt34

	oDispatcher.executeDispatch(oDocument, &quot;.uno:ColumnWidth&quot;, &quot;&quot;, 0, args2())

	&apos;// set up arguments for uno:GoToCell interface
&apos;	dim args1(0) as new com.sun.star.beans.PropertyValue
&apos;	args1(0).Name = &quot;ToPoint&quot;
	args1(0).Value = &quot;$I$6&quot;

	oDispatcher.executeDispatch(oDocument, &quot;.uno:GoToCell&quot;, &quot;&quot;, 0, args1())


rem ----------------------------------------------------------------------
&apos;dim args1(0) as new com.sun.star.beans.PropertyValue
&apos;	args1(0).Name = &quot;ColumnWidth&quot;
&apos;	args1(0).Value = 2540

	oDispatcher.executeDispatch(oDocument, &quot;.uno:ColumnWidth&quot;, &quot;&quot;, 0, args2())

	&apos;// set up arguments for uno:GoToCell interface
&apos;	dim args1(0) as new com.sun.star.beans.PropertyValue
&apos;	args1(0).Name = &quot;ToPoint&quot;
	args1(0).Value = &quot;$J$6&quot;

	oDispatcher.executeDispatch(oDocument, &quot;.uno:GoToCell&quot;, &quot;&quot;, 0, args1())


rem ----------------------------------------------------------------------
&apos;dim args1(0) as new com.sun.star.beans.PropertyValue
&apos;	args1(0).Name = &quot;ColumnWidth&quot;
&apos;	args1(0).Value = 2790

	oDispatcher.executeDispatch(oDocument, &quot;.uno:ColumnWidth&quot;, &quot;&quot;, 0, args2())
&apos;//----------------------------------------------------------------------------
EndOldCode:
NormalExit:
	SetSelection(oRange)	&apos;// restore user cell selection
	exit sub
	
ErrorHandler:
	msgbox(&quot;SetPhoneWidths - unprocessed error.&quot;)
	
end sub		&apos;// end SetSearchWidths	9/11/20
&apos;/**/

&apos;// SetSitusAddrWidth.bas
&apos;//---------------------------------------------------------------
&apos;// SetSitusAddrWidth - Set column width on situs address column.
&apos;//		9/17/20.	wmk.	09:30
&apos;//---------------------------------------------------------------

public sub SetSitusAddrWidth()

&apos;//	Usage.	macro call or
&apos;//			call SetSitusAddrWidth()
&apos;//
&apos;// Entry.	User in RefUSA/Admin formatted territory sheet
&apos;//
&apos;//	Exit.	column B width set to 1.75&quot; (4445)
&apos;//
&apos;// Calls.
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	9/17/20.	wmk.	original code; adapted from SetUnitAddrWidth
&apos;//
&apos;//	Notes.


&apos;//	constants.
const ONE_INCH=2540
const COL_N=13
const N_WIDTH=1.75

&apos;//	local variables.
dim oDocument   as object
dim oDispatcher as object
dim oDoc	As Object	&apos;// ThisComponent
dim oSel	As Object	&apos;// current selection
dim oRange	As Object	&apos;// RangeAddress from selection
dim iSheetIx	As Integer	&apos;// current sheet index
dim oSheet	As Object	&apos;// current sheet
dim oCols	As Object	&apos;// .Columns current sheet

	&apos;// code.
	ON ERROR GOTO ErrorHandler
	&apos;// preserve current selection
	oDoc = ThisComponent
	oSel = oDoc.getCurrentSelection()
	oRange = oSel.RangeAddress
	iSheetIx = oRange.Sheet
	oSheet = oDoc.Sheets(iSheetIx)
	oCols = oSheet.Columns
	oCols(COL_N).setPropertyValue(&quot;Width&quot;, N_WIDTH*ONE_INCH)

NormalExit:
	SetSelection(oRange)	&apos;// restore range selected
	exit sub
	
ErrorHandler:
	msgbox(&quot;SetSitusAddrWidth - unprocessed error.&quot;)
	
end sub		&apos;// end SetSitusAddrWidth	9/11/20
&apos;/**/

&apos;//SetTerrColWidths2.bas
&apos;//----------------------------------------------------------------------
&apos;// SetTerrColWidths2 - Set column widths on Edit formatted sheet columns.
&apos;//		1/13/21.	wmk.	05:40
&apos;//----------------------------------------------------------------------

public sub SetTerrColWidths2()

&apos;//	Usage.	macro call or
&apos;//			call SetTerrColWidths2()
&apos;//
&apos;// Entry.	User in Pub-Territory formatted territory sheet
&apos;//
&apos;//	Exit.	A = 0.35, B = 1.75&quot;, C = 1.0, D = 1.75&quot;, E = 1.0, F = 1.0&quot;
&apos;//			G = 0.9&quot;, H = 0.9. I = 2.5&quot;
&apos;//
&apos;// Calls.	SetTerrColWidths2
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	9/11/20.	wmk.	original code; adapted from SetEditColWidths
&apos;//	9/18/20.	wmk.	widths readjusted and set through col I
&apos;//	10/23/20.	wmk.	new Unit column width set; dead code removed
&apos;// 1/13/21.	wmk.	E width set to 0.45 for &quot;homestead&quot; column
&apos;//	2/14/21.	wmk.	mods to support &quot;homestead&quot; in COL_A for
&apos;//						simplified header/spreadsheet.
&apos;//	Notes. UNO Dispatcher exits this module, corrupting any module-wide
&apos;//	vars. Only way to preserve user cell selection on entry is in local
&apos;//	vars this sub.

&apos;//	constants.
const ONE_INCH=2540

&apos;// column and row indexes
const COL_A=0
const COL_B=1
const COL_C=2	
const COL_D=3
const COL_E=4
const COL_F=5
const COL_G=6			&apos;// column G index
const COL_H=7			&apos;// column H index
const COL_I=8			&apos;// column I index
const COL_J=9			&apos;// column J index
const COL_K=10			&apos;// column K index
const COL_L=11			&apos;// column L index 
const COL_M=12			&apos;// column M index (DoNotCall)
const COL_N=13			&apos;// column N index (RSO)
const COL_O=14			&apos;// column O index (Foreign)
const ROW_1=0
const ROW_2=1
const ROW_3=2
const ROW_4=3
const ROW_HEADING=4		&apos;// headings row index
const LJUST=1		&apos;// left-justify HoriJustify				&apos;// mod052020
const CJUST=2		&apos;// center HoriJustify						&apos;// mod052020
const RJUST=3		&apos;// right-justify HoriJustify				&apos;// mod052320
const MDYY=30		&apos;// &apos;M/D/YY&apos; format value

&apos;// column widths
const A_WIDTH=0.35
const B_WIDTH=1.75
const C_WIDTH=1.0
const D_WIDTH=2.1
const E_WIDTH=1.0
const F_WIDTH=1.1
const G_WIDTH=0.35
const H_WIDTH=0.35
const I_WIDTH=2.5

&apos;//	local variables.
dim oDocument   as object
dim oDispatcher as object
dim oDoc	As Object	&apos;// ThisComponent
dim oSel	As Object	&apos;// current cell selection on entry
dim oSheet	As Object	&apos;// current sheet
dim oRange	As Object	&apos;// RangeAddress selected
dim iSheetIx	As Integer	&apos;// sheet index this sheet
dim oCols	As Object	&apos;// .Columns array this sheet
dim nColWidths(8) As Integer	&apos;// columns widths array

	&apos;// code.
	ON ERROR GOTO ErrorHandler
	&apos;// preserve user cell selection
	oDoc = ThisComponent
	oSel = oDoc.getCurrentSelection()
	oRange = oSel.RangeAddress

	nColWidths(0) = A_WIDTH*ONE_INCH
	nColWidths(1) = B_WIDTH*ONE_INCH
	nColWidths(2) =	C_WIDTH*ONE_INCH
	nColWidths(3) = D_WIDTH*ONE_INCH
	nColWidths(4) = E_WIDTH*ONE_INCH
	nColWidths(5) = F_WIDTH*ONE_INCH
	nColWidths(6) = G_WIDTH*ONE_INCH
	nColWidths(7) = H_WIDTH*ONE_INCH
	nColWidths(8) = I_WIDTH*ONE_INCH
	SetColWidths(nColWidths)
	
NormalExit:
	SetSelection(oRange)	&apos;// restore user cell selection
	exit sub
	
ErrorHandler:
	msgbox(&quot;SetTerrColWidths2 - unprocessed error.&quot;)
	
end sub		&apos;// end SetTerrColWidths2	1/13/21
&apos;/**/


&apos;//SetTerrColWidths3.bas
&apos;//----------------------------------------------------------------------
&apos;// SetTerrColWidths3 - Set column widths on Edit formatted sheet columns.
&apos;//		2/19/21.	wmk.	18:20
&apos;//----------------------------------------------------------------------

public sub SetTerrColWidths3()

&apos;//	Usage.	macro call or
&apos;//			call SetTerrColWidths3()
&apos;//
&apos;// Entry.	User in Pub-Territory formatted territory sheet
&apos;//
&apos;//	Exit.	A = 0.35, B = 1.75&quot;, C = 1.0, D = 2.10, E = 1.0, F = 1.0&quot;
&apos;//			G = 0.9&quot;, H = 0.9. I = 2.5&quot;
&apos;//
&apos;// Calls.	SetTerrColWidths3
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	9/11/20.	wmk.	original code; adapted from SetEditColWidths
&apos;//	9/18/20.	wmk.	widths readjusted and set through col I
&apos;//	10/23/20.	wmk.	new Unit column width set; dead code removed
&apos;// 1/13/21.	wmk.	E width set to 0.45 for &quot;homestead&quot; column
&apos;//	2/14/21.	wmk.	mods to support &quot;homestead&quot; in COL_A for
&apos;//						simplified header/spreadsheet.
&apos;// 2/9/21.		wmk.	mod to support &quot;homestead&quot; in COL_C.
&apos;//	Notes. UNO Dispatcher exits this module, corrupting any module-wide
&apos;//	vars. Only way to preserve user cell selection on entry is in local
&apos;//	vars this sub.

&apos;//	constants.
const ONE_INCH=2540

&apos;// column and row indexes
const COL_A=0
const COL_B=1
const COL_C=2	
const COL_D=3
const COL_E=4
const COL_F=5
const COL_G=6			&apos;// column G index
const COL_H=7			&apos;// column H index
const COL_I=8			&apos;// column I index
const COL_J=9			&apos;// column J index
const COL_K=10			&apos;// column K index
const COL_L=11			&apos;// column L index 
const COL_M=12			&apos;// column M index (DoNotCall)
const COL_N=13			&apos;// column N index (RSO)
const COL_O=14			&apos;// column O index (Foreign)
const ROW_1=0
const ROW_2=1
const ROW_3=2
const ROW_4=3
const ROW_HEADING=4		&apos;// headings row index
const LJUST=1		&apos;// left-justify HoriJustify				&apos;// mod052020
const CJUST=2		&apos;// center HoriJustify						&apos;// mod052020
const RJUST=3		&apos;// right-justify HoriJustify				&apos;// mod052320
const MDYY=30		&apos;// &apos;M/D/YY&apos; format value

&apos;// column widths
const A_WIDTH=1.75	&apos;// address
const B_WIDTH=0.75	&apos;// unit
const C_WIDTH=0.35	&apos;// H - homestead
const D_WIDTH=2.1	&apos;// Name
const E_WIDTH=1.0	&apos;// Phone
const F_WIDTH=1.1	&apos;// RefUSA phone
const G_WIDTH=0.35	&apos;// DNC
const H_WIDTH=0.35	&apos;// FL
const I_WIDTH=2.5	&apos;// Notes

&apos;//	local variables.
dim oDocument   as object
dim oDispatcher as object
dim oDoc	As Object	&apos;// ThisComponent
dim oSel	As Object	&apos;// current cell selection on entry
dim oSheet	As Object	&apos;// current sheet
dim oRange	As Object	&apos;// RangeAddress selected
dim iSheetIx	As Integer	&apos;// sheet index this sheet
dim oCols	As Object	&apos;// .Columns array this sheet
dim nColWidths(8) As Integer	&apos;// columns widths array

	&apos;// code.
	ON ERROR GOTO ErrorHandler
	&apos;// preserve user cell selection
	oDoc = ThisComponent
	oSel = oDoc.getCurrentSelection()
	oRange = oSel.RangeAddress

	nColWidths(0) = A_WIDTH*ONE_INCH
	nColWidths(1) = B_WIDTH*ONE_INCH
	nColWidths(2) =	C_WIDTH*ONE_INCH
	nColWidths(3) = D_WIDTH*ONE_INCH
	nColWidths(4) = E_WIDTH*ONE_INCH
	nColWidths(5) = F_WIDTH*ONE_INCH
	nColWidths(6) = G_WIDTH*ONE_INCH
	nColWidths(7) = H_WIDTH*ONE_INCH
	nColWidths(8) = I_WIDTH*ONE_INCH
	SetColWidths(nColWidths)
	
NormalExit:
	SetSelection(oRange)	&apos;// restore user cell selection
	exit sub
	
ErrorHandler:
	msgbox(&quot;SetTerrColWidths3 - unprocessed error.&quot;)
	
end sub		&apos;// end SetTerrColWidths3	2/19/21		18:30
&apos;/**/

&apos;// SetTerrColWidths.bas
&apos;//----------------------------------------------------------------------
&apos;// SetTerrColWidths - Set column widths on Edit formatted sheet columns.
&apos;//		1/13/21.	wmk.	05:40
&apos;//----------------------------------------------------------------------

public sub SetTerrColWidths()

&apos;//	Usage.	macro call or
&apos;//			call SetTerrColWidths()
&apos;//
&apos;// Entry.	User in Pub-Territory formatted territory sheet
&apos;//
&apos;//	Exit.	A = 1.75&quot;, B = 1.0, C = 1.75&quot;, D = 1.0, E = 0.45, F = 1.0&quot;
&apos;//			G = 0.9&quot;, H = 0.9. I = 2.5&quot;
&apos;//
&apos;// Calls.	SetTerrColWidths
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	9/11/20.	wmk.	original code; adapted from SetEditColWidths
&apos;//	9/18/20.	wmk.	widths readjusted and set through col I
&apos;//	10/23/20.	wmk.	new Unit column width set; dead code removed
&apos;// 1/13/21.	wmk.	E width set to 0.45 for &quot;homestead&quot; column
&apos;//
&apos;//	Notes. UNO Dispatcher exits this module, corrupting any module-wide
&apos;//	vars. Only way to preserve user cell selection on entry is in local
&apos;//	vars this sub.

&apos;//	constants.
const ONE_INCH=2540

&apos;// column and row indexes
const COL_A=0
const COL_B=1
const COL_C=2	
const COL_D=3
const COL_E=4
const COL_F=5
const COL_G=6			&apos;// column G index
const COL_H=7			&apos;// column H index
const COL_I=8			&apos;// column I index
const COL_J=9			&apos;// column J index
const COL_K=10			&apos;// column K index
const COL_L=11			&apos;// column L index 
const COL_M=12			&apos;// column M index (DoNotCall)
const COL_N=13			&apos;// column N index (RSO)
const COL_O=14			&apos;// column O index (Foreign)
const ROW_1=0
const ROW_2=1
const ROW_3=2
const ROW_4=3
const ROW_HEADING=4		&apos;// headings row index
const LJUST=1		&apos;// left-justify HoriJustify				&apos;// mod052020
const CJUST=2		&apos;// center HoriJustify						&apos;// mod052020
const RJUST=3		&apos;// right-justify HoriJustify				&apos;// mod052320
const MDYY=30		&apos;// &apos;M/D/YY&apos; format value

&apos;// column widths
const A_WIDTH=1.75
const B_WIDTH=1.0
const C_WIDTH=1.75
const D_WIDTH=1.0
const E_WIDTH=0.45
const F_WIDTH=1.1
const G_WIDTH=0.9
const H_WIDTH=0.9
const I_WIDTH=2.5

&apos;//	local variables.
dim oDocument   as object
dim oDispatcher as object
dim oDoc	As Object	&apos;// ThisComponent
dim oSel	As Object	&apos;// current cell selection on entry
dim oSheet	As Object	&apos;// current sheet
dim oRange	As Object	&apos;// RangeAddress selected
dim iSheetIx	As Integer	&apos;// sheet index this sheet
dim oCols	As Object	&apos;// .Columns array this sheet
dim nColWidths(8) As Integer	&apos;// columns widths array

	&apos;// code.
	ON ERROR GOTO ErrorHandler
	&apos;// preserve user cell selection
	oDoc = ThisComponent
	oSel = oDoc.getCurrentSelection()
	oRange = oSel.RangeAddress

	nColWidths(0) = A_WIDTH*ONE_INCH
	nColWidths(1) = B_WIDTH*ONE_INCH
	nColWidths(2) =	C_WIDTH*ONE_INCH
	nColWidths(3) = D_WIDTH*ONE_INCH
	nColWidths(4) = E_WIDTH*ONE_INCH
	nColWidths(5) = F_WIDTH*ONE_INCH
	nColWidths(6) = G_WIDTH*ONE_INCH
	nColWidths(7) = H_WIDTH*ONE_INCH
	nColWidths(8) = I_WIDTH*ONE_INCH
	SetColWidths(nColWidths)
	
NormalExit:
	SetSelection(oRange)	&apos;// restore user cell selection
	exit sub
	
ErrorHandler:
	msgbox(&quot;SetTerrColWidths - unprocessed error.&quot;)
	
end sub		&apos;// end SetTerrColWidths	1/13/21
&apos;/**/

&apos;// SetTerrWidths.bas
&apos;//---------------------------------------------------------------
&apos;// SetTerrWidths - Set column widths on search columns.
&apos;//		9/11/20.	wmk.	23:00
&apos;//---------------------------------------------------------------

public sub SetTerrWidths()

&apos;//	Usage.	macro call or
&apos;//			call SetTerrWidths()
&apos;//
&apos;// Entry.	User in RefUSA/Admin formatted territory sheet
&apos;//
&apos;//	Exit.	columns I, J, K widths set to 0.9&quot; (2286)
&apos;//
&apos;// Calls.
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	9/5/20.		wmk.	original code
&apos;// 9/6/20.		wmk.	mod to include RecordDate column (M)
&apos;//	9/11/20.	wmk.	code simplfied
&apos;//
&apos;//	Notes. UNO Dispatcher exits this module, corrupting any module-wide
&apos;//	vars. Only way to preserve user cell selection on entry is in local
&apos;//	vars this sub.

&apos;//	constants.
const ZeroPt9=2286		&apos;// 0.9&quot;
const ONE_INCH=2540
const COL_WIDTH=0.9
const COL_I=8
const COL_J=9
const COL_K=10
const COL_M=12

&apos;//	local variables.
dim oDocument   as object
dim oDispatcher as object
dim oDoc	As Object	&apos;// ThisComponent
dim oSel	As Object	&apos;// current cell selection on entry
dim oRange	As Object	&apos;// RangeAddress selected
dim iSheetIx	As Integer	&apos;// this sheet index
dim oSheet	As Object	&apos;// this sheet
dim oCols	As Object	&apos;// .Columns this sheet

	&apos;// code.
	ON ERROR GOTO ErrorHandler
	
	&apos;// preserve user cell selection
	oDoc = ThisComponent
	oSel = oDoc.getCurrentSelection()
	oRange = oSel.RangeAddress
	iSheetIx = oRange.Sheet
	oSheet = oDoc.Sheets(iSheetIx)
	oCols = oSheet.Columns
	oCols(COL_I).setPropertyValue(&quot;Width&quot;, COL_WIDTH*ONE_INCH)
	oCols(COL_J).setPropertyValue(&quot;Width&quot;, COL_WIDTH*ONE_INCH)
	oCols(COL_K).setPropertyValue(&quot;Width&quot;, COL_WIDTH*ONE_INCH)
	oCols(COL_M).setPropertyValue(&quot;Width&quot;, COL_WIDTH*ONE_INCH)

if true then
	GoTo EndOldCode
endif
&apos;//--------------------------------------------------------------------
	oDocument   = ThisComponent.CurrentController.Frame
	oDispatcher = createUnoService(&quot;com.sun.star.frame.DispatchHelper&quot;)
	&apos;// set column widths for N-P to 1.34&quot; (3404)

	&apos;// set up arguments for uno:GoToCell interface
	dim args1(0) as new com.sun.star.beans.PropertyValue
	args1(0).Name = &quot;ToPoint&quot;
	args1(0).Value = &quot;$I$6&quot;

	oDispatcher.executeDispatch(oDocument, &quot;.uno:GoToCell&quot;, &quot;&quot;, 0, args1())


rem ----------------------------------------------------------------------
dim args2(0) as new com.sun.star.beans.PropertyValue
	args2(0).Name = &quot;ColumnWidth&quot;
	args2(0).Value = ZeroPt9

	oDispatcher.executeDispatch(oDocument, &quot;.uno:ColumnWidth&quot;, &quot;&quot;, 0, args2())

	&apos;// set up arguments for uno:GoToCell interface
&apos;	dim args1(0) as new com.sun.star.beans.PropertyValue
&apos;	args1(0).Name = &quot;ToPoint&quot;
	args1(0).Value = &quot;$J$6&quot;

	oDispatcher.executeDispatch(oDocument, &quot;.uno:GoToCell&quot;, &quot;&quot;, 0, args1())


rem ----------------------------------------------------------------------
&apos;dim args1(0) as new com.sun.star.beans.PropertyValue
&apos;	args1(0).Name = &quot;ColumnWidth&quot;
&apos;	args1(0).Value = 2540

	oDispatcher.executeDispatch(oDocument, &quot;.uno:ColumnWidth&quot;, &quot;&quot;, 0, args2())

	&apos;// set up arguments for uno:GoToCell interface
&apos;	dim args1(0) as new com.sun.star.beans.PropertyValue
&apos;	args1(0).Name = &quot;ToPoint&quot;
	args1(0).Value = &quot;$M$6&quot;

	oDispatcher.executeDispatch(oDocument, &quot;.uno:GoToCell&quot;, &quot;&quot;, 0, args1())


rem ----------------------------------------------------------------------
&apos;dim args1(0) as new com.sun.star.beans.PropertyValue
&apos;	args1(0).Name = &quot;ColumnWidth&quot;
&apos;	args1(0).Value = 2540

	oDispatcher.executeDispatch(oDocument, &quot;.uno:ColumnWidth&quot;, &quot;&quot;, 0, args2())
&apos;//----------------------------------------------------------------------------
EndOldCode:
NormalExit:
	SetSelection(oRange)	&apos;// restore user cell selection
	exit sub
	
ErrorHandler:
	msgbox(&quot;SetTerrWidths - unprocessed error.&quot;)
	
end sub		&apos;// end SetTerrWidths	9/11/20
&apos;/**/

&apos;// SetSelection.bas
&apos;//---------------------------------------------------------------
&apos;// SetSelection - Select area given CellRangeAddress.
&apos;//		9/2/20.	wmk.	16:30
&apos;//---------------------------------------------------------------

public sub SetSelection(poRange As Object)

&apos;//	Usage.	macro call or
&apos;//			call SetSelection( oRange )
&apos;//
&apos;//		oRange = RangeAddress with selection criteria
&apos;//
&apos;// Entry.	
&apos;//
&apos;//	Exit.	selected cells in current sheet set by oRange criteria
&apos;//
&apos;// Calls.	fIdxColName
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	9/1/20.		wmk.	original code; stub
&apos;//	9/2/20.		wmk.	debug msgbox commented
&apos;//
&apos;//	Notes.
&apos;//

&apos;//	constants.

&apos;//	local variables.
dim strColumn	As String	&apos;// converted oRange.StartColumn
dim strRow		As String	&apos;// converted oRange.StartRow
dim l1stColumn	As Long		&apos;// first column index
dim l1stRow		As Long		&apos;// first row index
dim sCellID		As String	&apos;// cell id e.g. $A$6
	&apos;// code.
	ON ERROR GOTO ErrorHandler

	&apos;// oRange.StartColumn = 0.. -&gt;A..ZAA..ZZ..AAA.ZZZ etc
	&apos;//						 26.. AA.AZ
	&apos;//						 52.. BA..BZ etc.
	&apos;// Modulus(StartColumn, 26) = offset into last letter
	&apos;//	StartColumn/26 = first 
&apos;		msgBox(&quot;In SetSelection - stubbed.&quot;)
	&apos;// Get upper left alphanumberic cell address

	l1stColumn = poRange.StartColumn
	l1StRow = poRange.StartRow
	strColumn = fIdxColName(l1stColumn)
	strRow = CStr(l1stRow+1)
	sCellID = &quot;$&quot; + strColumn + &quot;$&quot; + strRow

&apos;	msgBox(&quot;SetSelection - upper left = &quot; + sCellID)
	
dim oDocument	As Object	&apos;// UNO document object
dim oDispatcher	As Object	&apos;// UNO service interface	
	&apos;// move to upper left corner of selection
	oDocument   = ThisComponent.CurrentController.Frame
	oDispatcher = createUnoService(&quot;com.sun.star.frame.DispatchHelper&quot;)

	&apos;// set up arguments for uno:GoToCell interface
	dim args1(0) as new com.sun.star.beans.PropertyValue
	args1(0).Name = &quot;ToPoint&quot;
	args1(0).Value = sCellID

	oDispatcher.executeDispatch(oDocument, &quot;.uno:GoToCell&quot;, &quot;&quot;, 0, args1())

	&apos;// move selection cursor through defined area
dim lDownMoves	As Long		&apos;// number of &quot;Down 1 moves&quot;
dim lRightMoves	As Long		&apos;// number of &quot;Right 1 moves&quot;
	lDownMoves = poRange.EndRow - l1stRow
	lRightMoves = poRange.EndColumn - l1stColumn
	
dim args2(0) as new com.sun.star.beans.PropertyValue
	args2(0).Name = &quot;By&quot;
	if lDownMoves &gt; 0 then
	args2(0).Value = lDownMoves
oDispatcher.executeDispatch(oDocument, &quot;.uno:GoDownSel&quot;, &quot;&quot;, 0, args2())
	endif

	if lRightMoves &gt; 0 then
		args2(0).Value = lRightMoves
oDispatcher.executeDispatch(oDocument, &quot;.uno:GoRightSel&quot;, &quot;&quot;, 0, args2())
	endif
	
NormalExit:
	exit sub

ErrorHandler:
	msgbox(&quot;SetSelection - unprocessed error.&quot;)
	GoTo NormalExit
	
end sub		&apos;// end SetSelection	9/2/20
&apos;/**/

&apos;// SortAgain.bas
&apos;//--------------------------------------------
&apos;//	SortAgain - sort Import sheet on 2 columns
&apos;//		9/24/20.	23:45
&apos;//--------------------------------------------

public sub sortagain
rem ----------------------------------------------------------------------
rem define variables
dim document   as object
dim dispatcher as object
rem ----------------------------------------------------------------------
rem get access to the document
document   = ThisComponent.CurrentController.Frame
dispatcher = createUnoService(&quot;com.sun.star.frame.DispatchHelper&quot;)

rem ----------------------------------------------------------------------
dim args1(11) as new com.sun.star.beans.PropertyValue
args1(0).Name = &quot;ByRows&quot;
args1(0).Value = true
args1(1).Name = &quot;HasHeader&quot;
args1(1).Value = false
args1(2).Name = &quot;CaseSensitive&quot;
args1(2).Value = false
args1(3).Name = &quot;NaturalSort&quot;
args1(3).Value = false
args1(4).Name = &quot;IncludeAttribs&quot;
args1(4).Value = true
args1(5).Name = &quot;UserDefIndex&quot;
args1(5).Value = 0
args1(6).Name = &quot;Col1&quot;
args1(6).Value = 6
args1(7).Name = &quot;Ascending1&quot;
args1(7).Value = true
args1(8).Name = &quot;Col2&quot;
args1(8).Value = 10
args1(9).Name = &quot;Ascending2&quot;
args1(9).Value = true
args1(10).Name = &quot;IncludeComments&quot;
args1(10).Value = false
args1(11).Name = &quot;IncludeImages&quot;
args1(11).Value = true

dispatcher.executeDispatch(document, &quot;.uno:DataSort&quot;, &quot;&quot;, 0, args1())


end sub		&apos;// end SortAgain	9/24/20
&apos;/**/

&apos;// SelectNewRows.bas
&apos;//---------------------------------------------------------------
&apos;// SelectNewRows - Select active rows containing data.
&apos;//		10/15/20.	wmk.	12:45
&apos;//---------------------------------------------------------------

public sub SelectNewRows()

&apos;//	Usage.	macro call or
&apos;//			call SelectNewRows()
&apos;//
&apos;// Entry.	user in a spreadsheet with data in column &quot;A&quot;, starting
&apos;//			in cell $A$2
&apos;//
&apos;//	Exit.	cells $A$2 througn $A$n selected as though user highlighted
&apos;//
&apos;// Calls.
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	10/15/20.	wmk.	original code; adapted from SelectActiveRows
&apos;//
&apos;//	Notes. SelectNewRows will loop starting at $A$2 until a row is 
&apos;// found with no data in column A. A2 is assumed non-empty

&apos;// local variables.
dim oDocument   as object
dim oDispatcher as object

Dim oDoc As Object
Dim oSheet As Object
Dim NewColumn As Object
dim oSel as Object
dim iSheetIx as integer
dim oRange as Object
dim lThisRow as long		&apos;// current row selected on sheet
dim oCell		As Object		&apos;// current scan cell
dim bMoreRows	As Boolean
dim nActiveRows	As Integer	&apos;// active row counter

&apos;//	code.
	ON ERROR GOTO ErrorHandler
	oDoc = ThisComponent
	oSel = oDoc.getCurrentSelection()
	oRange = oSel.RangeAddress
	iSheetIx = oRange.Sheet
	oSheet = oDoc.Sheets(iSheetIx)

	oDocument   = ThisComponent.CurrentController.Frame
	oDispatcher = createUnoService(&quot;com.sun.star.frame.DispatchHelper&quot;)

if true then
  GoTo Skip1
endif
	&apos;// loop looking ahead and advancing until empty cell found
&apos;	dim args2(0) as new com.sun.star.beans.PropertyValue
	args2(0).Name = &quot;By&quot;
	args2(0).Value = 1
Skip1:

	bMoreRows = true
	nActiveRows = 0
	lThisRow = 0		&apos;// current row index at A1, so start at A2
	do while bMoreRows
		lThisRow = lThisRow + 1
		oCell = oSheet.getCellByPosition(0, lThisRow)
		bMoreRows = (len(oCell.String) &gt; 0)
		if bMoreRows then
			nActiveRows = nActiveRows + 1
		endif	&apos;// end next row has data conditional
	loop


	&apos;// move to cell $A$2
	dim args1(0) as new com.sun.star.beans.PropertyValue
	args1(0).Name = &quot;ToPoint&quot;
	args1(0).Value = &quot;$A$2&quot;

	oDispatcher.executeDispatch(oDocument, &quot;.uno:GoToCell&quot;, &quot;&quot;, 0, args1())

	if nActiveRows &gt; 0 then
	dim args2(0) as new com.sun.star.beans.PropertyValue
		args2(0).Name = &quot;By&quot;
		args2(0).Value = nActiveRows
		oDispatcher.executeDispatch(oDocument, &quot;.uno:GoDownSel&quot;, &quot;&quot;, 0, args2())
	endif
Skip2:

NormalExit:
	exit sub

ErrorHandler:
	msgbox(&quot;SelectNewRows - unprocessed error&quot;)
	GoTo NormalExit
	
end sub		&apos;// end SelectNewRows	10/15/20
&apos;/**/

&apos;// SelectSrchSheetArea.bas - Select all rows/columns in sheet area for subsequent operation.
&apos;//---------------------------------------------------------------
&apos;// SelectSrchSheetArea - Select all rows/columns in Search sheet.
&apos;//		3/14/21.	wmk.	13:40
&apos;//---------------------------------------------------------------

public sub SelectSrchSheetArea()

&apos;//	Usage.	macro call or
&apos;//			call SelectSrchSheetArea()
&apos;//
&apos;//		&lt;parameters description&gt;
&apos;//
&apos;// Entry.	user in sheet where desire to select active rows area
&apos;//
&apos;//	Exit.	all full active rows columns A - S selected.
&apos;//
&apos;// Calls. SelActiveSrchRows.
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	3/14/21.		wmk.	original code
&apos;//
&apos;//	Notes. 
&apos;//

&apos;//	constants.

&apos;//	local variables.

	&apos;// code.
	ON ERROR GOTO ErrorHandler
	&apos;// presort imported data
	SelActiveSrchRows()
	
dim oDocument	As Object
dim oDispatcher	As Object
dim nColumns	As Integer
	oDocument   = ThisComponent.CurrentController.Frame
	oDispatcher = createUnoService(&quot;com.sun.star.frame.DispatchHelper&quot;)
	nColumns = ASC(&quot;S&quot;) - ASC(&quot;A&quot;)
dim args2(0) as new com.sun.star.beans.PropertyValue
	args2(0).Name = &quot;By&quot;
	args2(0).Value = nColumns
oDispatcher.executeDispatch(oDocument, &quot;.uno:GoRightSel&quot;, &quot;&quot;, 0, args2())
	
NormalExit:
	exit sub
	
ErrorHandler:
	msgbox(&quot;SelectSheetArea - unprocessed error&quot;)
	GoTo NormalExit
	
end sub		&apos;// end SelectSrchSheetArea		3/14/21. 13:40
&apos;/**/


&apos;// SelPubSheetArea.bas - Select all rows/columns in PubTerr area.
&apos;//---------------------------------------------------------------
&apos;// SelPubSheetArea - Select all rows/columns in Search sheet.
&apos;//		3/14/21.	wmk.	18:40
&apos;//---------------------------------------------------------------

public sub SelPubSheetArea()

&apos;//	Usage.	macro call or
&apos;//			call SelPubSheetArea()
&apos;//
&apos;// Entry.	user in sheet where desire to select active rows area
&apos;//
&apos;//	Exit.	all full active rows columns A - S selected.
&apos;//
&apos;// Calls. SelectActiveRows.
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	3/14/21.		wmk.	original code
&apos;//
&apos;//	Notes. 
&apos;//

&apos;//	constants.

&apos;//	local variables.

	&apos;// code.
	ON ERROR GOTO ErrorHandler
	
	SelectActiveRows()
	
dim oDocument	As Object
dim oDispatcher	As Object
dim nColumns	As Integer
	oDocument   = ThisComponent.CurrentController.Frame
	oDispatcher = createUnoService(&quot;com.sun.star.frame.DispatchHelper&quot;)
	nColumns = ASC(&quot;S&quot;) - ASC(&quot;A&quot;)
dim args2(0) as new com.sun.star.beans.PropertyValue
	args2(0).Name = &quot;By&quot;
	args2(0).Value = nColumns
oDispatcher.executeDispatch(oDocument, &quot;.uno:GoRightSel&quot;, &quot;&quot;, 0, args2())
	
NormalExit:
	exit sub
	
ErrorHandler:
	msgbox(&quot;SelPubSheetArea - unprocessed error&quot;)
	GoTo NormalExit
	
end sub		&apos;// end SelectPubSheetArea		3/14/21. 18:40
&apos;/**/

&apos;// SortByStreetNum.bas
&apos;//------------------------------------------------------------------------
&apos;// SortByStreetNum - Sort RefUSA Import sheet on Street and Number fields.
&apos;//		10/25/20.	wmk.	08:20
&apos;//------------------------------------------------------------------------

public sub SortByStreetNum()

&apos;//	Usage.	macro call or
&apos;//			call SortByStreetNum()
&apos;//
&apos;// Entry.	user has selected row(s) of import data to be
&apos;//			sorted in ascending order by Street, then Number columns
&apos;//
&apos;//	Exit.	selected rows sorted
&apos;//
&apos;// Calls.
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	10/15/20.	wmk.	original code
&apos;// 10/25/20.	wmk.	bug fix; called for presort so columns changed
&apos;//						column numbers ar 1-based
&apos;//
&apos;//	Notes.

rem ----------------------------------------------------------------------
rem define variables
dim document   as object
dim dispatcher as object
rem ----------------------------------------------------------------------
rem get access to the document
document   = ThisComponent.CurrentController.Frame
dispatcher = createUnoService(&quot;com.sun.star.frame.DispatchHelper&quot;)

rem ----------------------------------------------------------------------
dim args1(11) as new com.sun.star.beans.PropertyValue
args1(0).Name = &quot;ByRows&quot;
args1(0).Value = true
args1(1).Name = &quot;HasHeader&quot;
args1(1).Value = false
args1(2).Name = &quot;CaseSensitive&quot;
args1(2).Value = false
args1(3).Name = &quot;NaturalSort&quot;
args1(3).Value = false
args1(4).Name = &quot;IncludeAttribs&quot;
args1(4).Value = true
args1(5).Name = &quot;UserDefIndex&quot;
args1(5).Value = 0
args1(6).Name = &quot;Col1&quot;
args1(6).Value = 5					&apos;// 1-based (E)
args1(7).Name = &quot;Ascending1&quot;
args1(7).Value = true
args1(8).Name = &quot;Col2&quot;
args1(8).Value = 3					&apos;// 1-based (C)
args1(9).Name = &quot;Ascending2&quot;
args1(9).Value = true
args1(10).Name = &quot;IncludeComments&quot;
args1(10).Value = false
args1(11).Name = &quot;IncludeImages&quot;
args1(11).Value = true

dispatcher.executeDispatch(document, &quot;.uno:DataSort&quot;, &quot;&quot;, 0, args1())

NormalExit:
	msgbox(&quot;SortByStreetNum complete. &quot;)
	exit sub
	
ErrorHandler:	
	msgbox(&quot;SortByStreetNum - unprocessed error.&quot;)
	GoTo NormalExit

end sub		&apos;// end SortByStreetNum		10/25/20
&apos;/**/

&apos;// SortOnAddress.bas
&apos;//---------------------------------------------------------------
&apos;// SortOnAddress - Sort RefUSA Import sheet on FullAddress field.
&apos;//		9/3/20.	wmk.	20:45
&apos;//---------------------------------------------------------------

public sub SortOnAddress()

&apos;//	Usage.	macro call or
&apos;//			call SortOnAddress()
&apos;//
&apos;// Entry.	user has selected row(s) of import data which is to be
&apos;//			sorted in ascending order by FullAddress column
&apos;//
&apos;//	Exit.	selected rows sorted
&apos;//
&apos;// Calls.
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	9/3/20.	wmk.	original code
&apos;//
&apos;//	Notes.

&apos;//	constants.
const COL_FULLADDR=9		&apos;// full concatenated address

&apos;//	local variables.

dim oDocument   as object
dim oDispatcher as object

&apos;// code.
	ON ERROR GOTO ErrorHandler
oDocument   = ThisComponent.CurrentController.Frame
oDispatcher = createUnoService(&quot;com.sun.star.frame.DispatchHelper&quot;)

	&apos;// set up for Sort call to sort all entries by address
	rem ----------------------------------------------------------------------
dim args55(9) as new com.sun.star.beans.PropertyValue
	args55(0).Name = &quot;ByRows&quot;
	args55(0).Value = true
	args55(1).Name = &quot;HasHeader&quot;
	args55(1).Value = false
	args55(2).Name = &quot;CaseSensitive&quot;
	args55(2).Value = false
	args55(3).Name = &quot;NaturalSort&quot;
&apos;	args55(3).Value = false
	args55(3).Value = true				&apos;// set true so 1,11,15 do not appear together
	args55(4).Name = &quot;IncludeAttribs&quot;
	args55(4).Value = true
	args55(5).Name = &quot;UserDefIndex&quot;
	args55(5).Value = 0
	args55(6).Name = &quot;Col1&quot;
	args55(6).Value = COL_FULLADDR + 1		&apos;// plus 1 for $J..
	args55(7).Name = &quot;Ascending1&quot;
	args55(7).Value = true
	args55(8).Name = &quot;IncludeComments&quot;
	args55(8).Value = false
	args55(9).Name = &quot;IncludeImages&quot;
	args55(9).Value = true

	oDispatcher.executeDispatch(oDocument, &quot;.uno:DataSort&quot;, &quot;&quot;, 0, args55())

NormalExit:
	msgbox(&quot;SortOnAddress complete. &quot;)
	exit sub
	
ErrorHandler:	
	msgbox(&quot;SortOnAddress - unprocessed error.&quot;)
	GoTo NormalExit

end sub		&apos;// end SortOnAddress	9/3/20
&apos;/**/

&apos;// SortRUImport.bas
&apos;//---------------------------------------------------------------
&apos;// SortRUImport - Sort RefUSA Import sheet on FullAddress field.
&apos;//		9/16/20.	wmk.	18:00
&apos;//---------------------------------------------------------------

public sub SortRUImport()

&apos;//	Usage.	macro call or
&apos;//			call SortRUImport()
&apos;//
&apos;// Entry.	user has selected row(s) of import data to be
&apos;//			sorted in ascending order by FullAddress column
&apos;//
&apos;//	Exit.	selected rows sorted
&apos;//			then restored
&apos;//
&apos;// Calls.
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	9/16/20.	wmk.	original code; adapted from SortRURaw
&apos;//
&apos;//	Notes. Either the user will have selected all active rows, or
&apos;// SelectActiveRows() will have been called prior to entry,
&apos;// and the selection will have been extended to include column S.

&apos;//	constants.
const COL_STREET=5		&apos;// street name
const COL_FULLADDR=9		&apos;// full concatenated address

&apos;//	local variables.

dim oDocument   as object
dim oDispatcher as object
dim oDoc 		As Object
dim oSel		As Object
dim oRange		As Object
dim oNewRange	As Object
dim nActiveColumns	As Integer

&apos;// code.
	ON ERROR GOTO ErrorHandler
	oDoc = ThisComponent
	oSel = oDoc.getCurrentSelection()
	oRange = oSel.RangeAddress
	oNewRange = oRange				&apos;// capture current range
	oNewRange.EndColumn = 25		&apos;// set out to column Z for sort
	
if false then
  GoTo Skip1
endif
&apos;//--------------------------------------------------------------------------
	nActiveColumns = 25
	SelectActiveRows()
	&apos;// set up for sort - select out to column Z
oDocument   = ThisComponent.CurrentController.Frame
oDispatcher = createUnoService(&quot;com.sun.star.frame.DispatchHelper&quot;)
	dim args2(0) as new com.sun.star.beans.PropertyValue
	args2(0).Name = &quot;By&quot;
	args(2).Value = nActiveColumns
	oDispatcher.executeDispatch(oDocument, &quot;.uno:GoRightSel&quot;, &quot;&quot;, 0, args2())
&apos;//--------------------------------------------------------------------------
Skip1:

	&apos;// set up for Sort call to sort all entries by address
	rem ----------------------------------------------------------------------
dim args20(11) as new com.sun.star.beans.PropertyValue
args20(0).Name = &quot;ByRows&quot;
args20(0).Value = true
args20(1).Name = &quot;HasHeader&quot;
args20(1).Value = false
args20(2).Name = &quot;CaseSensitive&quot;
args20(2).Value = false
args20(3).Name = &quot;NaturalSort&quot;
args20(3).Value = false
args20(4).Name = &quot;IncludeAttribs&quot;
args20(4).Value = true
args20(5).Name = &quot;UserDefIndex&quot;
args20(5).Value = 0
args20(6).Name = &quot;Col1&quot;
args20(6).Value = 5
args20(7).Name = &quot;Ascending1&quot;
args20(7).Value = true
args20(8).Name = &quot;Col2&quot;
args20(8).Value = 9
args20(9).Name = &quot;Ascending2&quot;
args20(9).Value = true
args20(10).Name = &quot;IncludeComments&quot;
args20(10).Value = false
args20(11).Name = &quot;IncludeImages&quot;
args20(11).Value = true

if true then
  GoToSkip2
endif
dim args55(11) as new com.sun.star.beans.PropertyValue
	args55(0).Name = &quot;ByRows&quot;
	args55(0).Value = true
	args55(1).Name = &quot;HasHeader&quot;
	args55(1).Value = false
	args55(2).Name = &quot;CaseSensitive&quot;
	args55(2).Value = false
	args55(3).Name = &quot;NaturalSort&quot;
	args55(3).Value = false
&apos;	args55(3).Value = true				&apos;// set true so 1,11,15 do not appear together
	args55(4).Name = &quot;IncludeAttribs&quot;
	args55(4).Value = true
	args55(5).Name = &quot;UserDefIndex&quot;
	args55(5).Value = 0
	args55(6).Name = &quot;Col1&quot;
	args55(6).Value = COL_STREET + 1		&apos;// plus 1 for $&lt;Lletter&gt;..
	args55(7).Name = &quot;Ascending1&quot;
	args55(7).Value = true
	args55(8).Name = &quot;Col2&quot;
	args55(8).Value = COL_FULLADDR + 1		&apos;// plus 1 for $&lt;letter?..
	args55(9).Name = &quot;Ascending2&quot;
	args55(9).Value = true
	args55(10).Name = &quot;IncludeComments&quot;
	args55(10).Value = false
	args55(11).Name = &quot;IncludeImages&quot;
	args55(11).Value = true

	oDispatcher.executeDispatch(oDocument, &quot;.uno:DataSort&quot;, &quot;&quot;, 0, args55())
Skip2:
oDocument   = ThisComponent.CurrentController.Frame
oDispatcher = createUnoService(&quot;com.sun.star.frame.DispatchHelper&quot;)

	oDispatcher.executeDispatch(oDocument, &quot;.uno:DataSort&quot;, &quot;&quot;, 0, args20())

NormalExit:
&apos;	msgbox(&quot;SortRUImport complete. &quot;)
	exit sub
	
ErrorHandler:	
	msgbox(&quot;SortRUImport - unprocessed error.&quot;)
	GoTo NormalExit

end sub		&apos;// end SortRUImport	9/16/20
&apos;/**/

&apos;// SortRURaw.bas
&apos;//---------------------------------------------------------------
&apos;// SortRURaw - Sort RefUSA Import sheet on FullAddress field.
&apos;//		9/15/20.	wmk.	09:50
&apos;//---------------------------------------------------------------

public sub SortRURaw()

&apos;//	Usage.	macro call or
&apos;//			call SortRURaw()
&apos;//
&apos;// Entry.	user has selected row(s) of import data to be
&apos;//			sorted in ascending order by FullAddress column
&apos;//
&apos;//	Exit.	selected rows sorted; selection extended to column Z,
&apos;//			then restored
&apos;//
&apos;// Calls.
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	9/15/20.	wmk.	original code; adapted from SortOnAddress
&apos;//
&apos;//	Notes. Either the user will have selected all active rows, or
&apos;// SelectActiveRows() will have been called prior to entry.

&apos;//	constants.
const COL_STREET=4			&apos;// street name
const COL_FULLADDR=13		&apos;// full concatenated address

&apos;//	local variables.

dim oDocument   as object
dim oDispatcher as object
dim oDoc 		As Object
dim oSel		As Object
dim oRange		As Object
dim oNewRange	As Object
dim nActiveColumns	As Integer

&apos;// code.
	ON ERROR GOTO ErrorHandler
	oDoc = ThisComponent
	oSel = oDoc.getCurrentSelection()
	oRange = oSel.RangeAddress
	oNewRange = oRange				&apos;// capture current range
	oNewRange.EndColumn = 25		&apos;// set out to column Z for sort
	nActiveColumns = 25
	
	&apos;// set up for sort - select out to column Z
oDocument   = ThisComponent.CurrentController.Frame
oDispatcher = createUnoService(&quot;com.sun.star.frame.DispatchHelper&quot;)
	dim args2(0) as new com.sun.star.beans.PropertyValue
	args2(0).Name = &quot;By&quot;
	args2(0).Value = nActiveColumns
	oDispatcher.executeDispatch(oDocument, &quot;.uno:GoRightSel&quot;, &quot;&quot;, 0, args2())

	&apos;// set up for Sort call to sort all entries by address
	rem ----------------------------------------------------------------------
dim args55(11) as new com.sun.star.beans.PropertyValue
	args55(0).Name = &quot;ByRows&quot;
	args55(0).Value = true
	args55(1).Name = &quot;HasHeader&quot;
	args55(1).Value = false
	args55(2).Name = &quot;CaseSensitive&quot;
	args55(2).Value = false
	args55(3).Name = &quot;NaturalSort&quot;
&apos;	args55(3).Value = false
	args55(3).Value = true				&apos;// set true so 1,11,15 do not appear together
	args55(4).Name = &quot;IncludeAttribs&quot;
	args55(4).Value = true
	args55(5).Name = &quot;UserDefIndex&quot;
	args55(5).Value = 0
	args55(6).Name = &quot;Col1&quot;
	args55(6).Value = COL_STREET + 1		&apos;// plus 1 for $&lt;Lletter&gt;..
	args55(7).Name = &quot;Ascending1&quot;
	args55(7).Value = true
	args55(8).Name = &quot;Col2&quot;
	args55(8).Value = COL_FULLADDR + 1		&apos;// plus 1 for $&lt;letter?..
	args55(9).Name = &quot;Ascending2&quot;
	args55(9).Value = true
	args55(10).Name = &quot;IncludeComments&quot;
	args55(10).Value = false
	args55(11).Name = &quot;IncludeImages&quot;
	args55(11).Value = true

	oDispatcher.executeDispatch(oDocument, &quot;.uno:DataSort&quot;, &quot;&quot;, 0, args55())
	SetSelection(oRange)
	
NormalExit:
&apos;	msgbox(&quot;SortRURaw complete. &quot;)
	exit sub
	
ErrorHandler:	
	msgbox(&quot;SortRURaw - unprocessed error.&quot;)
	GoTo NormalExit

end sub		&apos;// end SortRURaw	9/15/20
&apos;/**/

&apos;// sGen411URL.bas
&apos;//---------------------------------------------------------------
&apos;// sGen411URL - Generate 411.com phone look-up url.
&apos;//		8/16/20.	wmk.	15:45
&apos;//---------------------------------------------------------------

&apos;public function sGen411URL(poRange As Object) as String
public function sGen411URL(psSitus, psCity) as String

&apos;//	Usage.	sURL = sGen411URL( sSitus )
&apos;//	Usage.	sURL = sGen411URL( oRange )
&apos;//
&apos;//		sSitus = full situs address
&apos;//		[oRange = CellRangeAddress of row with relevant data]
&apos;//
&apos;// Entry.	Cells pointed to by oRange.StartRow contain address information
&apos;//         from which to generate the returned url.
&apos;//
&apos;//	Exit.	sURL = url of truepeoplesearch.com to search for phone number
&apos;//           by following the url in any browser; pattern is as follows:
&apos;//  &quot;https://www.411.com/address/413-Andros/Venice-FL/?&quot;
&apos;//
&apos;// Calls.	ParseSitus.
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	8/12/20.	wmk.	original code
&apos;//	8/13/20.	wmk.	minor bug fixes where &quot;number&quot; not in URL and
&apos;//                     wrong city-state separator
&apos;//	8/15/20.	wmk.	calling sequence changed adding City parameter
&apos;//	8/16/20.	wmk.	sCity corrected to psCity in parameters
&apos;//
&apos;//	Notes. For now, City assumed to be &quot;Venice&quot;, State assumed to be &quot;FL&quot;
&apos;// Modify to accept City as 2nd parameter; caller will obtain from
&apos;// a fixed cell, say A4, in spreadsheet, or from Situs-City field
&apos;// if using SCPA data.

&apos;//	constants.
const csURLBase=&quot;https://www.411.com/address/&quot;
&apos;// insert house number here
const csSep=&quot;-&quot;
&apos;// insert street name here
&apos;const csSep here
&apos;// insert unit here
const csSep2=&quot;/&quot;
&apos;// insert city here
&apos;const csSep here
&apos;// insert state here
&apos;const csSep2
const csQuery=&quot;?&quot;

&apos;//	local variables.
dim sRetValue 	As String	&apos;// returned value
dim sState		As String	&apos;// state from address
dim sCity		As String	&apos;// city from address
dim sSitus		As String	&apos;// copy of passed situs
dim sUnit		As String	&apos;// unit #, if present
dim sStreet		As String	&apos;// street here
dim sNumber		As String	&apos;// number here

	&apos;// code.
	ON ERROR GOTO ErrorHandler
	sRetValue = &quot;&quot;
	
	&apos;// set actual values from situs
	sSitus = psSitus
	ParseSitus(sSitus, sNumber, sStreet, sUnit)
	if len(psCity) = 0 then
		sCity = &quot;Venice&quot;
	else
		sCity = psCity
	endif
	sState = &quot;FL&quot;
	
	&apos;// generate url from extracted information.
	sRetValue = csURLBase + sNumber + csSep _
	          + sStreet
	if len(sUnit) &gt; 0 then
	   sRetValue = sRetValue + csSep + sUnit
	endif
	sRetValue = sRetValue + csSep2 + sCity + csSep _
	              + sState + csSep2 + csQuery
	
NormalExit:
	sGen411URL = sRetValue
	exit function
	
ErrorHandler:
   msgbox(&quot; sGen411URL - unprocessed error.&quot;)
   GoTo NormalExit
end function 	&apos;// end sGen411URL	8/16/20.
&apos;/**/

&apos;// sGen2411URL.bas
&apos;//--------------------------------------------------
&apos;// sGen2411URL - Generate 411.com phone look-up url.
&apos;//		2/10/21.	wmk.	05:30
&apos;//--------------------------------------------------

public function sGen2411URL(psAddr As String,_
				psUnit As String, psCity As String) as String

&apos;//	Usage.	sURL = sGen2411URL( sAddr, sUnit, sCity )
&apos;//
&apos;//		sAddr = street address
&apos;//		sUnit = unit/apt number
&apos;//		sCity = situs city
&apos;//
&apos;// Entry.	
&apos;//
&apos;//	Exit.	sURL = url of truepeoplesearch.com to search for phone number
&apos;//           by following the url in any browser; pattern is as follows:
&apos;//  &quot;https://www.411.com/address/413-Andros-unit/Venice-FL/?&quot;
&apos;//
&apos;// Calls.	ParseSitus, ParseUnit
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	2/9/21.		wmk.	original code; adapted from sGenPhoneURL adding
&apos;//						unit parameter and ParseUnit call.
&apos;//
&apos;//	Notes. For now, City assumed to be &quot;Venice&quot;, State assumed to be &quot;FL&quot;
&apos;// Modify to accept City as 2nd parameter; caller will obtain from
&apos;// a fixed cell, say A4, in spreadsheet, or from Situs-City field
&apos;// if using SCPA data.

&apos;//	constants.
const csURLBase=&quot;https://www.411.com/address/&quot;
&apos;// insert house number here
const csSep=&quot;-&quot;
&apos;// insert street name here
&apos;const csSep here
&apos;// insert unit here
const csSep2=&quot;/&quot;
&apos;// insert city here
&apos;const csSep here
&apos;// insert state here
&apos;const csSep2
const csQuery=&quot;?&quot;

&apos;//	local variables.
dim sRetValue 	As String	&apos;// returned value
dim sState		As String	&apos;// state from address
dim sCity		As String	&apos;// city from address

dim sAddr		As String	&apos;// copy of passed situs
dim sFullUnit	As String	&apos;// full unit from bridge field
dim sSCUnit		As String	&apos;// parsed SC unit or just full unit
dim sBldUnit	As String	&apos;// parsed building/mailing unit
dim sBldg		As String	&apos;// parsed&quot;BLD&quot; or &quot;BLDG&quot; or empty
dim sBldNum		As String	&apos;// parsed building number

dim sUnit		As String	&apos;// bldg/mailing unit #, if present
dim sStreet		As String	&apos;// street here
dim sNumber		As String	&apos;// number here

	&apos;// code.
	ON ERROR GOTO ErrorHandler
	sRetValue = &quot;&quot;
	
	&apos;// set values from address and unit
	sAddr = psAddr
	ParseSitus(sAddr, sNumber, sStreet, sFullUnit)

	&apos;// parse unit to get building/mailing unit.
	sFullUnit = psUnit
	if len(sFullUnit) &gt; 0 then
	   ParseUnit(sFullUnit, sSCUnit, sBldUnit, sBldg, sBldNum)
	   if len(sBldUnit) = 0 then
	      sUnit = sSCUnit
	   else
	      sUnit = sBldUnit
	   endif
	else
	   sUnit = &quot;&quot;
	endif

	&apos;// default city to Venice.
	if len(psCity) = 0 then
		sCity = &quot;Venice&quot;
	else
		sCity = psCity
	endif
	sState = &quot;FL&quot;
	
	&apos;// generate url from extracted information.
	sRetValue = csURLBase + sNumber + csSep _
	          + sStreet
	if len(sUnit) &gt; 0 then
	   sRetValue = sRetValue + csSep + &quot;Apt &quot; + sUnit
	endif
	sRetValue = sRetValue + csSep2 + sCity + csSep _
	              + sState + csSep2 + csQuery
	
NormalExit:
	sGen2411URL = sRetValue
	exit function
	
ErrorHandler:
   msgbox(&quot; sGen2411URL - unprocessed error.&quot;)
   GoTo NormalExit
end function 	&apos;// end sGen2411URL	2/10/21.
&apos;/**/


&apos;// sGenWhtPgesURL.bas
&apos;//---------------------------------------------------------------
&apos;// sGenWhtPgesURL - Generate 411.com phone look-up url.
&apos;//		8/16/20.	wmk.	14:00
&apos;//---------------------------------------------------------------

public function sGenWhtPgesURL(psSitus, psCity) as String

&apos;//	Usage.	sURL = sGenWhtPgesURL( sSitus, sCity )
&apos;//
&apos;//		sSitus = full situs address
&apos;//		sCity = postal city of situs[oRange = CellRangeAddress of row with relevant data]
&apos;//
&apos;// Entry.	Cells pointed to by oRange.StartRow contain address information
&apos;//         from which to generate the returned url.
&apos;//
&apos;//	Exit.	sURL = url of whitepages.com to search for phone number
&apos;//           by following the url in any browser; pattern is as follows:
&apos;//  &quot;https://www.whitepages.com/address/413-Andros/Venice-FL/?&quot;
&apos;//
&apos;// Calls.	ParseSitus.
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	8/16/20.	wmk.	original code; adapted from sGen411URL
&apos;//
&apos;//	Notes. For now, City assumed to be &quot;Venice&quot;, State assumed to be &quot;FL&quot;
&apos;// Modify to accept City as 2nd parameter; caller will obtain from
&apos;// a fixed cell, say A4, in spreadsheet, or from Situs-City field
&apos;// if using SCPA data.

&apos;//	constants.
const csURLBase=&quot;https://www.whitepages.com/address/&quot;
&apos;// insert house number here
const csSep=&quot;-&quot;
&apos;// insert street name here
&apos;const csSep here
&apos;// insert unit here
const csSep2=&quot;/&quot;
&apos;// insert city here
&apos;const csSep here
&apos;// insert state here
&apos;const csSep2
const csQuery=&quot;?&quot;

&apos;//	local variables.
dim sRetValue 	As String	&apos;// returned value
dim sState		As String	&apos;// state from address
dim sCity		As String	&apos;// city from address
dim sSitus		As String	&apos;// copy of passed situs
dim sUnit		As String	&apos;// unit #, if present
dim sStreet		As String	&apos;// street here
dim sNumber		As String	&apos;// number here

	&apos;// code.
	ON ERROR GOTO ErrorHandler
	sRetValue = &quot;&quot;
	
	&apos;// set actual values from situs
	sSitus = psSitus
	ParseSitus(sSitus, sNumber, sStreet, sUnit)
	if len(psCity) = 0 then
		sCity = &quot;Venice&quot;
	else
		sCity = psCity
	endif
	sState = &quot;FL&quot;
	
	&apos;// generate url from extracted information.
	sRetValue = csURLBase + sNumber + csSep _
	          + sStreet
	if len(sUnit) &gt; 0 then
	   sRetValue = sRetValue + csSep + sUnit
	endif
	sRetValue = sRetValue + csSep2 + sCity + csSep _
	              + sState + csSep2 + csQuery
	
NormalExit:
	sGenWhtPgesURL = sRetValue
	exit function
	
ErrorHandler:
   msgbox(&quot; sGenWhtPgesURL - unprocessed error.&quot;)
   GoTo NormalExit
end function 	&apos;// end sGenWhtPgesURL	8/16/20.
&apos;/**/


&apos;// sGen2WhtPgesURL.bas
&apos;//---------------------------------------------------------------
&apos;// sGen2WhtPgesURL - Generate 411.com phone look-up url.
&apos;//		2/10/21.	wmk.	05:30
&apos;//---------------------------------------------------------------

public function sGen2WhtPgesURL(psAddr As String,_
				psUnit As String, psCity As String) as String

&apos;//	Usage.	sURL = sGen2411URL( sAddr, sUnit, sCity )
&apos;//
&apos;//		sAddr = street address
&apos;//		sUnit = unit/apt number
&apos;//		sCity = situs city
&apos;//
&apos;// Entry.
&apos;//
&apos;//	Exit.	sURL = url of whitepages.com to search for phone number
&apos;//           by following the url in any browser; pattern is as follows:
&apos;//  &quot;https://www.whitepages.com/address/413-Andros-unit/Venice-FL/?&quot;
&apos;//
&apos;// Calls.	ParseSitus, ParseUnit.
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	2/9/21.		wmk.	original code; adapted from sGenPhoneURL adding
&apos;//						unit parameter and ParseUnit call.
&apos;//
&apos;//	Notes. For now, City assumed to be &quot;Venice&quot;, State assumed to be &quot;FL&quot;
&apos;// Modify to accept City as 2nd parameter; caller will obtain from
&apos;// a fixed cell, say A4, in spreadsheet, or from Situs-City field
&apos;// if using SCPA data.

&apos;//	constants.
const csURLBase=&quot;https://www.whitepages.com/address/&quot;
&apos;// insert house number here
const csSep=&quot;-&quot;
&apos;// insert street name here
&apos;const csSep here
&apos;// insert unit here
const csSep2=&quot;/&quot;
&apos;// insert city here
&apos;const csSep here
&apos;// insert state here
&apos;const csSep2
const csQuery=&quot;?&quot;

&apos;//	local variables.
dim sRetValue 	As String	&apos;// returned value
dim sState		As String	&apos;// state from address
dim sCity		As String	&apos;// city from address

dim sAddr		As String	&apos;// copy of passed situs
dim sFullUnit	As String	&apos;// full unit from bridge field
dim sSCUnit		As String	&apos;// parsed SC unit or just full unit
dim sBldUnit	As String	&apos;// parsed building/mailing unit
dim sBldg		As String	&apos;// parsed&quot;BLD&quot; or &quot;BLDG&quot; or empty
dim sBldNum		As String	&apos;// parsed building number

dim sUnit		As String	&apos;// bldg/mailing unit #, if present
dim sStreet		As String	&apos;// street here
dim sNumber		As String	&apos;// number here

	&apos;// code.
	ON ERROR GOTO ErrorHandler
	sRetValue = &quot;&quot;
	
	&apos;// set actual values from situs
	sAddr = psAddr
	ParseSitus(sAddr, sNumber, sStreet, sUnit)

	&apos;// parse unit to get building/mailing unit.
	sFullUnit = psUnit
	if len(sFullUnit) &gt; 0 then
	   ParseUnit(sFullUnit, sSCUnit, sBldUnit, sBldg, sBldNum)
	   sUnit = sBldUnit
	   if len(sBldUnit) = 0 then
	      sUnit = sSCUnit
	   else
	      sUnit = sBldUnit
	   endif
	else
	   sUnit = &quot;&quot;
	endif

	&apos;// default city to Venice.
	if len(psCity) = 0 then
		sCity = &quot;Venice&quot;
	else
		sCity = psCity
	endif
	sState = &quot;FL&quot;
	
	&apos;// generate url from extracted information.
	sRetValue = csURLBase + sNumber + csSep _
	          + sStreet
	if len(sUnit) &gt; 0 then
&apos;	   sRetValue = sRetValue + csSep + sUnit
	   sRetValue = sRetValue + &quot; Apt &quot; + sUnit
	endif
	sRetValue = sRetValue + csSep2 + sCity + csSep _
	              + sState + csSep2 + csQuery
	
NormalExit:
	sGen2WhtPgesURL = sRetValue
	exit function
	
ErrorHandler:
   msgbox(&quot; sGen2WhtPgesURL - unprocessed error.&quot;)
   GoTo NormalExit
end function 	&apos;// end sGen2WhtPgesURL	2/10/21.
&apos;/**/


&apos;// sGenSCPAurl.bas
&apos;//---------------------------------------------------------------
&apos;// sGenSCPAurl - Generate sc-pa.com parcel look-up url.
&apos;//		8/17/20.	wmk.	08:15
&apos;//---------------------------------------------------------------

public function sGenSCPAurl(psParcel As String) as String

&apos;//	Usage.	sURL = sGenSCPAurl( sParcel )
&apos;//
&apos;//		sParcel = parcel id from county info
&apos;//
&apos;// Entry.
&apos;//
&apos;//	Exit.	sURL = url of sc-pa.com to look up property details for parcel
&apos;//           by following the url in any browser; pattern is as follows:
&apos;//	 &quot;https://www.sc-pa.com/propertysearch/parcel/details/&lt;parcel-id&gt;&quot;
&apos;//
&apos;// Calls.
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	8/17/20.	wmk.	original code
&apos;//	Notes. For now, City assumed to be &quot;Venice&quot;, State assumed to be &quot;FL&quot;
&apos;// Modify to accept City as 2nd parameter; caller will obtain from
&apos;// a fixed cell, say A4, in spreadsheet, or from Situs-City field
&apos;// if using SCPA data.

&apos;//	constants.
const csURLBase=&quot;https://www.sc-pa.com/propertysearch/parcel/details/&quot;
&apos;// insert house number here
const csSep=&quot;-&quot;
&apos;// insert street name here
&apos;const csSep here
&apos;// insert unit here
const csSep2=&quot;/&quot;
&apos;// insert city here
&apos;const csSep here
&apos;// insert state here
&apos;const csSep2
const csQuery=&quot;?&quot;

&apos;//	local variables.
dim sRetValue 	As String	&apos;// returned value
dim sState		As String	&apos;// state from address
dim sCity		As String	&apos;// city from address
dim sParcel		As String	&apos;// copy of passed situs
dim sUnit		As String	&apos;// unit #, if present
dim sStreet		As String	&apos;// street here
dim sNumber		As String	&apos;// number here

	&apos;// code.
	ON ERROR GOTO ErrorHandler
	sRetValue = &quot;&quot;
	
	&apos;// set local parcel number if nonempty.
	if len(psParcel) = 0 then
		GoTo ErrorHandler
	endif
	sParcel = psParcel
	
	&apos;// generate url from parcel information.
	sRetValue = csURLBase + sParcel
	
NormalExit:
	sGenSCPAurl = sRetValue
	exit function
	
ErrorHandler:
   msgbox(&quot; sGenSCPAurl - unprocessed error.&quot;)
   GoTo NormalExit
end function 	&apos;// end sGenSCPAurl		8/16/20.
&apos;/**/

&apos;// BoldHeadings.bas
&apos;//---------------------------------------------------------------
&apos;// BoldHeadings - Set RefUSA import sheet column headings bold.
&apos;//		9/8/20.	wmk.	09:20
&apos;//---------------------------------------------------------------

public sub BoldHeadings()

&apos;//	Usage.	macro call or
&apos;//			call BoldHeadings()
&apos;//
&apos;// Entry.	user in sheet with ReferenceUSA imported columns
&apos;//
&apos;//	Exit.	row index 4 all cells bold and centered, columns A-S
&apos;//			row index 3, cells bold and centered, columns M-P
&apos;// Calls.
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	8/28/20.	wmk.	original code
&apos;// 9/2/20.		wmk.	preserve and restore user cell selection on entry
&apos;//						and exit; error handling added; columns A-R row 4
&apos;//						columns M-P row 3
&apos;//	9/6/20.		wmk.	add 1 more column right to Bold list (RecordDate)
&apos;//	9/7/20.		wmk.	column G4 was being missed &quot;RefUSA&quot;
&apos;//	9/8/20.		wmk.	H1 sheet format set bold
&apos;//
&apos;//	Notes. Code generated by Record Macro.

&apos;//	constants.

&apos;//	local variables.
dim document   as object
dim dispatcher as object
dim oDoc	As Object	&apos;// ThisComponent
dim oSel	As Object	&apos;// current cell selection on entry
dim oRange	As Object	&apos;// RangeAddress selected

	&apos;// code.
	ON ERROR GOTO ErrorHandler
	
	&apos;// preserve user cell selection
	oDoc = ThisComponent
	oSel = oDoc.getCurrentSelection()
	oRange = oSel.RangeAddress

	&apos;// get access to the document
	document   = ThisComponent.CurrentController.Frame
	dispatcher = createUnoService(&quot;com.sun.star.frame.DispatchHelper&quot;)

	&apos;// uno:GoToCell $A$5
	dim args1(0) as new com.sun.star.beans.PropertyValue
	args1(0).Name = &quot;ToPoint&quot;
	args1(0).Value = &quot;$A$5&quot;

	dispatcher.executeDispatch(document, &quot;.uno:GoToCell&quot;, &quot;&quot;, 0, args1())

	&apos;// A5 selected; now select through R5
rem ----------------------------------------------------------------------
	dim args3(0) as new com.sun.star.beans.PropertyValue
	args3(0).Name = &quot;By&quot;
	args3(0).Value = 18

	dispatcher.executeDispatch(document, &quot;.uno:GoRightSel&quot;, &quot;&quot;, 0, args3())

rem ----------------------------------------------------------------------
	dim args18(0) as new com.sun.star.beans.PropertyValue
	args18(0).Name = &quot;Bold&quot;
	args18(0).Value = true

	dispatcher.executeDispatch(document, &quot;.uno:Bold&quot;, &quot;&quot;, 0, args18())

rem ----------------------------------------------------------------------
	dim args19(0) as new com.sun.star.beans.PropertyValue
	args19(0).Name = &quot;HorizontalAlignment&quot;
	args19(0).Value = com.sun.star.table.CellHoriJustify.CENTER

	dispatcher.executeDispatch(document, &quot;.uno:HorizontalAlignment&quot;, &quot;&quot;, 0, args19())

&apos;//	Set G4 (RefUSA) Bold
	args1(0).Name = &quot;ToPoint&quot;
	args1(0).Value = &quot;$G$4&quot;

	dispatcher.executeDispatch(document, &quot;.uno:GoToCell&quot;, &quot;&quot;, 0, args1())

	args18(0).Name = &quot;Bold&quot;
	args18(0).Value = true

	dispatcher.executeDispatch(document, &quot;.uno:Bold&quot;, &quot;&quot;, 0, args18())

&apos;//	cell H1 - sheet format
	args1(0).Name = &quot;ToPoint&quot;
	args1(0).Value = &quot;$H$1&quot;

	dispatcher.executeDispatch(document, &quot;.uno:GoToCell&quot;, &quot;&quot;, 0, args1())

	args18(0).Name = &quot;Bold&quot;
	args18(0).Value = true

	dispatcher.executeDispatch(document, &quot;.uno:Bold&quot;, &quot;&quot;, 0, args18())

&apos;// cells M4 - P4
	&apos;// uno:GoToCell $M$4
&apos;	dim args1(0) as new com.sun.star.beans.PropertyValue
	args1(0).Name = &quot;ToPoint&quot;
	args1(0).Value = &quot;$M$4&quot;

	dispatcher.executeDispatch(document, &quot;.uno:GoToCell&quot;, &quot;&quot;, 0, args1())

	&apos;// now move right to select M4 - P4
&apos;	dim args3(0) as new com.sun.star.beans.PropertyValue
	args3(0).Name = &quot;By&quot;
	args3(0).Value = 3

	dispatcher.executeDispatch(document, &quot;.uno:GoRightSel&quot;, &quot;&quot;, 0, args3())

rem ----------------------------------------------------------------------
&apos;	dim args18(0) as new com.sun.star.beans.PropertyValue
	args18(0).Name = &quot;Bold&quot;
	args18(0).Value = true

	dispatcher.executeDispatch(document, &quot;.uno:Bold&quot;, &quot;&quot;, 0, args18())

rem ----------------------------------------------------------------------
&apos;	dim args19(0) as new com.sun.star.beans.PropertyValue
	args19(0).Name = &quot;HorizontalAlignment&quot;
	args19(0).Value = com.sun.star.table.CellHoriJustify.CENTER

	dispatcher.executeDispatch(document, &quot;.uno:HorizontalAlignment&quot;, &quot;&quot;, 0, args19())

NormalExit:
	SetSelection(oRange)	&apos;// restore user cell selection
	exit sub
	
ErrorHandler:
	msgbox(&quot;BoldHeadings - unprocessed error.&quot;)	

end sub		&apos;// end BoldHeadings	9/8/20
&apos;/**/

&apos;// BridgeToEdit.bas
&apos;//---------------------------------------------------------------
&apos;// BridgeToEdit - Admin-Bridge sheet to Admin-Edit formatted sheet.
&apos;//		9/8/20.	wmk.	10:50
&apos;//---------------------------------------------------------------

public sub BridgeToEdit()

&apos;//	Usage.	macro call or
&apos;//			call BridgeToEdit()
&apos;//
&apos;// Entry.
&apos;//	OwningParcel  UnitAddress  Resident1 Resident2 Phone1 Phone2 RUPhone SubTerr CongTerr DoNotCall RSO Foreign  RecordDate
&apos;//			A			B			C		D		  E		 F		G		H		I		   J     K     L		M
&apos;//
&apos;//	Exit.	produces an &quot;Admin-Edit&quot; formatted sheet with the following fields:
&apos;//	OwningParcel  UnitAddress  Resident1 Resident2 Phone1 Phone2 RUPhone
&apos;//			A			B			C		D		  E		 F		G	
&apos;// truepeople     411     whitepages SubTerr CongTerr DoNotCall RSO Foreign  RecordDate
&apos;//		H			I			J		 K		  L			M	   N    O       P
&apos;//
&apos;// Calls. GenELinkM, SetSearchWidths
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	9/8/20.		wmk.	original code
&apos;//
&apos;//	Notes.
&apos;// MultiMail/SplitProps table fields.
&apos;//		9/7/20.
&apos;//0|OwningParcel|TEXT|1||0
&apos;//1|UnitAddress|TEXT|1||0
&apos;//2|Resident1|TEXT|0||0
&apos;//3|Resident2|TEXT|0||0
&apos;//4|Phone1|TEXT|0||0
&apos;//5|Phone2|TEXT|0||0
&apos;//6|RefUSA-Phone|TEXT|0||0
&apos;//7|SubTerritory|TEXT|0||0
&apos;//8|CongTerrID|TEXT|0||0
&apos;//9|DoNotCall|INTEGER|0|0|0
&apos;//10|RSO|INTEGER|0|0|0
&apos;//11|Foreign|INTEGER|0|0|0
&apos;//12|RecordDate|REAL|0|0|0
&apos;//13|DeletePending|INTEGER|0|0|0
&apos;// Method.
&apos;//		Insert 3 columns at H
&apos;// 	Set column headings &quot;search/truepeople&quot;, &quot;search/411&quot;, &quot;search/whitepages
&apos;//     Select all active rows
&apos;//     run GenELineM to generate hyperlinks
&apos;//		H1 = &quot;Admin-Edit formatted sheet&quot; 

&apos;//	constants.
const COL_PARCEL=0		&apos;// &quot;OwningParcel&quot; column index
const COL_A=0
const COL_B=1
const COL_C=2	
const COL_D=3
const COL_E=4
const COL_F=5
const COL_G=6			&apos;// column G index
const COL_H=7			&apos;// column H index
const COL_I=8			&apos;// column I index
const COL_J=9			&apos;// column J index
const COL_K=10			&apos;// column K index
const COL_L=11			&apos;// column L index (DoNotCall)
const COL_M=12			&apos;// column M index (RSO)
const COL_N=13			&apos;// column N index (Foreign)
const ROW_1=0
const ROW_2=1
const ROW_3=2
const ROW_4=3
const ROW_HEADING=4		&apos;// headings row index
const LJUST=1		&apos;// left-justify HoriJustify				&apos;// mod052020
const CJUST=2		&apos;// center HoriJustify						&apos;// mod052020
const RJUST=3		&apos;// right-justify HoriJustify				&apos;// mod052320
const MDYY=30		&apos;// &apos;M/D/YY&apos; format value

&apos;//	local variables.
Dim oDoc As Object
Dim oSheet As Object
Dim NewColumn As Object
dim oSel as Object
dim iSheetIx as integer
dim oRange as Object
dim lThisRow as long		&apos;// current row selected on sheet
dim oMrgRange	As Object	&apos;// merge range

dim oCell	As Object		&apos;// cell working on
dim i		As Integer		&apos;// loop index
dim sPropID	As String		&apos;// property ID
dim sSubTerr	As String	&apos;// subterritory
dim sCongTerr	As String	&apos;// cong terr ID
dim lRowCount	As Long		&apos;// row count of addresses
dim dDate		As Double	&apos;// date value
dim sCityStZip	As String	&apos;// concatenated City, State, Zip
dim sNotes		As String	&apos;// notes field


	&apos;// code.
	ON ERROR GoTo ErrorHandler
	oDoc = ThisComponent
	oSel = oDoc.getCurrentSelection()
	oRange = oSel.RangeAddress
	iSheetIx = oRange.Sheet
	oSheet = oDoc.Sheets(iSheetIx)
	
	&apos;// extract row count for looping
	oCell =	oSheet.getCellByPosition(COL_B, ROW_2)
	lRowCount = oCell.Value

	&apos;//     Insert 3 columns at H
	oSheet.Columns.insertByIndex(COL_H,3)
	
	&apos;//	Clear K1 (former H1 sheet type)
	oCell =	oSheet.getCellByPosition(COL_K, ROW_1)
	oCell.String = &quot;&quot;
	
	&apos;// set H1 to &quot;Admin-Edit formatted sheet&quot;
	oCell =	oSheet.getCellByPosition(COL_H, ROW_1)
	oCell.String = &quot;Admin-Edit formatted sheet&quot;
	
	
	&apos;// set column headings
	oCell = oSheet.getCellByPosition(COL_H, ROW_HEADING-1)
	oCell.String = &quot;search&quot;
	oCell.HoriJustify = CJUST
	oCell = oSheet.getCellByPosition(COL_H, ROW_HEADING)
	oCell.String = &quot;truepeople&quot;
	oCell.HoriJustify = CJUST

	oCell = oSheet.getCellByPosition(COL_I, ROW_HEADING-1)
	oCell.String = &quot;search&quot;
	oCell.HoriJustify = CJUST
	oCell = oSheet.getCellByPosition(COL_I, ROW_HEADING)
	oCell.String = &quot;411&quot;
	oCell.HoriJustify = CJUST

	oCell = oSheet.getCellByPosition(COL_J, ROW_HEADING-1)
	oCell.String = &quot;search&quot;
	oCell.HoriJustify = CJUST
	oCell = oSheet.getCellByPosition(COL_J, ROW_HEADING)
	oCell.String = &quot;whitepages&quot;
	oCell.HoriJustify = CJUST

	
	BoldHeadings()		&apos;// set bold headings
	SetSearchWidths()
	SelectActiveRows()	&apos;// [Banking Library]
	GenELinkm()
if true then
	GoTo NormalExit
endif
&apos;//-------------------------------------------------------
	&apos;//		concatenate City State Zip B3 + &quot;FL&quot; + C3
	sCityStZip = fsConcatCityToZip()

	&apos;//		Change col A heading to &quot;id&quot;
	oCell = oSheet.getCellByPosition(COL_A, ROW_HEADING)
	oCell.String = &quot;id&quot;
	oCell.HoriJustify = CJUST


	&apos;//		move data from entire column E to B
	oMrgRange = oRange
	oMrgRange.StartColumn = COL_E
	oMrgRange.EndColumn = COL_E
	oMrgRange.StartRow = ROW_HEADING + 1
	oMrgRange.EndRow = ROW_HEADING + lRowCount -1
dim oTarget as new com.sun.star.table.CellAddress
	oTarget.Sheet = oRange.Sheet
	oTarget.Column = COL_B
	oTarget.Row = ROW_HEADING + 1
	oSheet.moveRange(oTarget,oMrgRange)

	lThisRow = ROW_HEADING
	for i = 0 to lRowCount-1
		lThisRow = lThisRow + 1
		
		&apos;// store city, state, zip
		oCell = oSheet.getCellByPosition(COL_E, lThisRow)
		oCell.String = sCityStZip
&apos;//		  for each entry set col A = &quot;&quot;
		oCell = oSheet.getCellByPosition(COL_A, lThisRow)
		oCell.String = &quot;&quot;
&apos;//       for each entry if DoNotCall (J) &quot;Do NotCall&quot; into F
        sNotes = &quot;&quot;
		oCell = oSheet.getCellByPosition(COL_L, lThisRow)
		if len(trim(oCell.String)) &gt; 0 then
			sNotes = &quot;DoNotCall &quot; 
		endif
		
&apos;//       for each entry if RSO (K) &quot;RSO&quot; into F
		oCell = oSheet.getCellByPosition(COL_M, lThisRow)
		if len(trim(oCell.String)) &gt; 0 then
			sNotes = sNotes + &quot;RSO &quot;
		endif

&apos;//       for each entry if Foreign (L) &quot;Foreign&quot; into F
		oCell = oSheet.getCellByPosition(COL_N, lThisRow)
		if len(trim(oCell.String)) &gt; 0 then
			sNotes = sNotes + &quot;Foreign&quot;
		endif
		oCell = oSheet.getCellByPosition(COL_F, lThisRow)
		oCell.String = sNotes
		
	next i	&apos;// end loop setting row data
&apos;//----------------------------------------------------------------

NormalExit:
	exit sub

ErrorHandler:
	msgbox(&quot;BridgeToEdit - unprocessed error.&quot;)
	GoTo NormalExit

end sub		&apos;// end BridgeToEdit		9/8/20
&apos;/**/


&apos;//BridgeToEdit2.bas
&apos;//---------------------------------------------------------------
&apos;// BridgeToEdit2 - Admin-Bridge sheet to Admin-Edit formatted sheet.
&apos;//		2/15/21.	wmk.	22:30
&apos;//---------------------------------------------------------------

public sub BridgeToEdit2()

&apos;//	Usage.	macro call or
&apos;//			call BridgeToEdit2()
&apos;//
&apos;// Entry.
&apos;//	OwningParcel  UnitAddress  Resident1 Resident2 Phone1 Phone2 RUPhone SubTerr CongTerr DoNotCall RSO Foreign  RecordDate
&apos;//			A			B			C		D		  E		 F		G		H		I		   J     K     L		M
&apos;//
&apos;//	Exit.	produces an &quot;Admin-Edit&quot; formatted sheet with the following fields:
&apos;//	OwningParcel  UnitAddress  Resident1 Resident2 Phone1 Phone2 RUPhone
&apos;//			A			B			C		D		  E		 F		G	
&apos;// truepeople     411     whitepages SubTerr CongTerr DoNotCall RSO Foreign  RecordDate
&apos;//		H			I			J		 K		  L			M	   N    O       P
&apos;//
&apos;// Calls. GenELinkM, SetSearchWidths
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	9/8/20.		wmk.	original code.
&apos;//
&apos;//	Notes.
&apos;// MultiMail/SplitProps table fields.
&apos;//		9/7/20.
&apos;//0|OwningParcel|TEXT|1||0
&apos;//1|UnitAddress|TEXT|1||0
&apos;//2|Resident1|TEXT|0||0
&apos;//3|Resident2|TEXT|0||0
&apos;//4|Phone1|TEXT|0||0
&apos;//5|Phone2|TEXT|0||0
&apos;//6|RefUSA-Phone|TEXT|0||0
&apos;//7|SubTerritory|TEXT|0||0
&apos;//8|CongTerrID|TEXT|0||0
&apos;//9|DoNotCall|INTEGER|0|0|0
&apos;//10|RSO|INTEGER|0|0|0
&apos;//11|Foreign|INTEGER|0|0|0
&apos;//12|RecordDate|REAL|0|0|0
&apos;//13|DeletePending|INTEGER|0|0|0
&apos;// Method.
&apos;//		Insert 3 columns at H
&apos;// 	Set column headings &quot;search/truepeople&quot;, &quot;search/411&quot;, &quot;search/whitepages
&apos;//     Select all active rows
&apos;//     run GenELineM to generate hyperlinks
&apos;//		H1 = &quot;Admin-Edit formatted sheet&quot; 

&apos;//	constants.
const COL_PARCEL=0		&apos;// &quot;OwningParcel&quot; column index
const COL_A=0
const COL_B=1
const COL_C=2	
const COL_D=3
const COL_E=4
const COL_F=5
const COL_G=6			&apos;// column G index
const COL_H=7			&apos;// column H index
const COL_I=8			&apos;// column I index
const COL_J=9			&apos;// column J index
const COL_K=10			&apos;// column K index
const COL_L=11			&apos;// column L index (DoNotCall)
const COL_M=12			&apos;// column M index (RSO)
const COL_N=13			&apos;// column N index (Foreign)
const ROW_1=0
const ROW_2=1
const ROW_3=2
const ROW_4=3
const ROW_HEADING=4		&apos;// headings row index
const LJUST=1		&apos;// left-justify HoriJustify				&apos;// mod052020
const CJUST=2		&apos;// center HoriJustify						&apos;// mod052020
const RJUST=3		&apos;// right-justify HoriJustify				&apos;// mod052320
const MDYY=30		&apos;// &apos;M/D/YY&apos; format value

&apos;//	local variables.
Dim oDoc As Object
Dim oSheet As Object
Dim NewColumn As Object
dim oSel as Object
dim iSheetIx as integer
dim oRange as Object
dim lThisRow as long		&apos;// current row selected on sheet
dim oMrgRange	As Object	&apos;// merge range

dim oCell	As Object		&apos;// cell working on
dim i		As Integer		&apos;// loop index
dim sPropID	As String		&apos;// property ID
dim sSubTerr	As String	&apos;// subterritory
dim sCongTerr	As String	&apos;// cong terr ID
dim lRowCount	As Long		&apos;// row count of addresses
dim dDate		As Double	&apos;// date value
dim sCityStZip	As String	&apos;// concatenated City, State, Zip
dim sNotes		As String	&apos;// notes field


	&apos;// code.
	ON ERROR GoTo ErrorHandler
	oDoc = ThisComponent
	oSel = oDoc.getCurrentSelection()
	oRange = oSel.RangeAddress
	iSheetIx = oRange.Sheet
	oSheet = oDoc.Sheets(iSheetIx)
	
	&apos;// extract row count for looping
	oCell =	oSheet.getCellByPosition(COL_B, ROW_2)
	lRowCount = oCell.Value

	&apos;//     Insert 3 columns at H
	oSheet.Columns.insertByIndex(COL_H,3)
	
	&apos;//	Clear K1 (former H1 sheet type)
	oCell =	oSheet.getCellByPosition(COL_K, ROW_1)
	oCell.String = &quot;&quot;
	
	&apos;// set H1 to &quot;Admin-Edit formatted sheet&quot;
	oCell =	oSheet.getCellByPosition(COL_H, ROW_1)
	oCell.String = &quot;Admin-Edit formatted sheet&quot;
	
	
	&apos;// set column headings
	oCell = oSheet.getCellByPosition(COL_H, ROW_HEADING-1)
	oCell.String = &quot;search&quot;
	oCell.HoriJustify = CJUST
	oCell = oSheet.getCellByPosition(COL_H, ROW_HEADING)
	oCell.String = &quot;truepeople&quot;
	oCell.HoriJustify = CJUST

	oCell = oSheet.getCellByPosition(COL_I, ROW_HEADING-1)
	oCell.String = &quot;search&quot;
	oCell.HoriJustify = CJUST
	oCell = oSheet.getCellByPosition(COL_I, ROW_HEADING)
	oCell.String = &quot;411&quot;
	oCell.HoriJustify = CJUST

	oCell = oSheet.getCellByPosition(COL_J, ROW_HEADING-1)
	oCell.String = &quot;search&quot;
	oCell.HoriJustify = CJUST
	oCell = oSheet.getCellByPosition(COL_J, ROW_HEADING)
	oCell.String = &quot;whitepages&quot;
	oCell.HoriJustify = CJUST

	
	BoldHeadings()		&apos;// set bold headings
	SetSearchWidths()
	SelectActiveRows()	&apos;// [Banking Library]
	GenELinkm()
if true then
	GoTo NormalExit
endif
&apos;//-------------------------------------------------------
	&apos;//		concatenate City State Zip B3 + &quot;FL&quot; + C3
	sCityStZip = fsConcatCityToZip()

	&apos;//		Change col A heading to &quot;id&quot;
	oCell = oSheet.getCellByPosition(COL_A, ROW_HEADING)
	oCell.String = &quot;id&quot;
	oCell.HoriJustify = CJUST


	&apos;//		move data from entire column E to B
	oMrgRange = oRange
	oMrgRange.StartColumn = COL_E
	oMrgRange.EndColumn = COL_E
	oMrgRange.StartRow = ROW_HEADING + 1
	oMrgRange.EndRow = ROW_HEADING + lRowCount -1
dim oTarget as new com.sun.star.table.CellAddress
	oTarget.Sheet = oRange.Sheet
	oTarget.Column = COL_B
	oTarget.Row = ROW_HEADING + 1
	oSheet.moveRange(oTarget,oMrgRange)

	lThisRow = ROW_HEADING
	for i = 0 to lRowCount-1
		lThisRow = lThisRow + 1
		
		&apos;// store city, state, zip
		oCell = oSheet.getCellByPosition(COL_E, lThisRow)
		oCell.String = sCityStZip
&apos;//		  for each entry set col A = &quot;&quot;
		oCell = oSheet.getCellByPosition(COL_A, lThisRow)
		oCell.String = &quot;&quot;
&apos;//       for each entry if DoNotCall (J) &quot;Do NotCall&quot; into F
        sNotes = &quot;&quot;
		oCell = oSheet.getCellByPosition(COL_L, lThisRow)
		if len(trim(oCell.String)) &gt; 0 then
			sNotes = &quot;DoNotCall &quot; 
		endif
		
&apos;//       for each entry if RSO (K) &quot;RSO&quot; into F
		oCell = oSheet.getCellByPosition(COL_M, lThisRow)
		if len(trim(oCell.String)) &gt; 0 then
			sNotes = sNotes + &quot;RSO &quot;
		endif

&apos;//       for each entry if Foreign (L) &quot;Foreign&quot; into F
		oCell = oSheet.getCellByPosition(COL_N, lThisRow)
		if len(trim(oCell.String)) &gt; 0 then
			sNotes = sNotes + &quot;Foreign&quot;
		endif
		oCell = oSheet.getCellByPosition(COL_F, lThisRow)
		oCell.String = sNotes
		
	next i	&apos;// end loop setting row data
&apos;//----------------------------------------------------------------

NormalExit:
	exit sub

ErrorHandler:
	msgbox(&quot;BridgeToEdit2 - unprocessed error.&quot;)
	GoTo NormalExit

end sub		&apos;// end BridgeToEdit2		2/15/20	22:30
&apos;/**/


&apos;// BridgeToSuper.bas - Bridge sheet to Super territory sheets.
&apos;//---------------------------------------------------------------
&apos;// BridgeToSuper- Bridge sheet to Super territory sheets.
&apos;//		12/23/21.	wmk.	21:09
&apos;//---------------------------------------------------------------

public sub BridgeToSuper()

&apos;//	Usage.	macro call or
&apos;//			call BridgeToSuper()
&apos;//
&apos;// Entry.	Bridge sheet exists in workbook for territory
&apos;//
&apos;//	Exit.	gsNewSheet = new Search sheet name	
&apos;//
&apos;// Calls.	CopyToEnd, UnProtectSheet, BridgeToEdit2, RenameSheet,
&apos;//			EditToSearch
&apos;//&apos;// Search sheet, dropping the nn suffix.
&apos;//			fsSetSrchSheetName, SelectSrchSheetArea,
&apos;//			WrapLong, HltAddrBlocks4, PickACell, FreezeView,
&apos;//			SuperToUntitled
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	3/14/21.	wmk.	original code
&apos;//	3/16/21.	wmk.	new Search sheet name stored in public
&apos;//						var gsNewSheet; SuperToUntitled call added.
&apos;//	3/17/21.	wmk.	fsGetSrchSheetName, MoveToSheet calls added
&apos;//						code added to move to Bridge sheet if not 
&apos;//						already there.
&apos;//	7/12/21.	wmk.	mods to push code ahead to closing QTerrxxx.ods
&apos;//						and copy Searchnn sheet to Untitled workbook;
&apos;//						eliminate non-error msgbox&apos;s to avoid Frame
&apos;//						management issues; sheet protection eliminated
&apos;//						to avoid Frame management issues.
&apos;//	7/13/21.	wmk.	documentation brought up-to-date;_PubTerr.ods 
&apos;//				 correction; oDoc double-defined; bug fixes to
&apos;//				 untitled through final save; save as .xlsx
&apos;// 10/4/21.	wmk.	error message &apos;recogonized&apos; corrected.
&apos;// 12/23/21.	wmk.	modified to use module-wide constants csTerrBase, csTerrDataPath for
&apos;//				 multihost support.
&apos;//
&apos;//	Notes. Executes the following sequence:
&apos;// move to Bridge sheet
&apos;// copy sheet to end
&apos;// BridgeToEdit()
&apos;// copy sheet to end
&apos;// EditToSearch3
&apos;// rename sheet &quot;Terrxxx_Search&quot;
&apos;// moveto sheet TerrxxxPub_Terr
&apos;// copy to &quot;untitled1&quot;
&apos;// move back to sheet &quot;TerrxxxSearch&quot;
&apos;// copy to &quot;untitled2&quot;


&apos;//	constants.
&apos;const csTerrBase = &quot;set above&quot;

&apos;//	local variables.
dim oDoc		As Object		&apos;// current component
dim oSel		As Object		&apos;// current selection
dim oSheet		As Object		&apos;// sheet selected
dim sCurrName	As String		&apos;// current sheet name
dim bIsBridge	As String		&apos;// sheet is Bridge type
dim oRange		As Object		&apos;// RangeSelection 
dim iSheetIx	As Integer		&apos;// current sheet index
dim iBridgePos	As Integer		&apos;// &quot;Bridge&quot; string index
dim sNewName	As String		&apos;// new sheet name
dim sTerrID		As String		&apos;// territory ID
dim sBridgeName	As String		&apos;// Bridge sheet name

	&apos;// code.
	ON ERROR GOTO ErrorHandler
	oDoc = ThisComponent
	oSel = oDoc.getCurrentSelection()
	oRange = oSel.RangeAddress
	iSheetIx = oRange.Sheet
	oSheet = oDoc.Sheets(iSheetIx)
	sCurrName = oSheet.getName()
	
	if InStr(sCurrName, &quot;Bridge&quot;) = 0 then
		&apos;// move to Bridge sheet.
		sTerrId = fsGetTerrID()
		sBridgeName = &quot;Terr&quot; + sTerrID + &quot;_Bridge&quot;
		MoveToSheet(sBridgeName)
		oSel = oDoc.getCurrentSelection()
		oRange = oSel.RangeAddress
		iSheetIx = oRange.Sheet
		oSheet = oDoc.Sheets(iSheetIx)
	endif 		&apos;// end not in Bridge sheet

	sTerrID = fsGetTerrID()	
	&apos;// verify sheet type by sheet name
	sCurrName = oSheet.getName()
	bIsBridge = InStr(sCurrName, &quot;Bridge&quot;) &gt; 0
	
	if bIsBridge then
&apos;		msgbox(&quot;Sheet is type Bridge... proceeding&quot;)
	else
		msgbox(&quot;Sheet not recognized as Bridge..&quot;)
		GoTo ErrorHandler
	endif
	
if not true then
  GoTo NormalExit
endif

	&apos;// copy sheet to end and run BridgeToEdit
	CopyToEnd()
	UnprotectSheet()
	BridgeToEdit2()

	&apos;// rename &quot;Bridge&quot; portion to &quot;Edit&quot; with random number to avoid conflicts.
	iBridgePos = InStr(sCurrName,&quot;Bridge&quot;)
	sNewName = left(sCurrName,iBridgePos-1) + &quot;Edit&quot; + INT(100*RND())
	RenameSheet(sNewName)

	&apos;// copy Edit sheet to end and convert to Search sheet.
&apos;	ProtectSheet()
	CopyToEnd()
&apos;	UnprotectSheet()
	EditToSearch3()
	&apos;// focus on Terrxxx_Searchnn sheet
dim iEditPos As Integer		&apos;// &quot;Edit&quot; position
	iEditPos = Instr(sNewName,&quot;Edit&quot;)
	sNewName = left(sNewName, iEditPos-1) + &quot;Search&quot; + INT(100*RND())
	RenameSheet(sNewName)
	gsNewSheet = sNewName	&apos;// preserve name
	fsSetSrchSheetName(sNewName)
	
if not true then
  msgbox(&quot;gsNewSheet = &apos;&quot; + gsNewSheet + &quot;&apos;&quot;)
endif

	SelectSrchSheetArea()
	WrapLong()
	HltAddrBlocks4()
	
	&apos;// New code. 7/12/21.
	PickACell				&apos;// move to $A$6
	FreezeView				&apos;// freeze rows/columns at $A$6

&apos;	oSuperSheetDoc.Store	&apos;// save work to this point
dim oSuperSheetDoc	As Object
	oSuperSheetDoc = ThisComponent.CurrentController.Frame
	&apos;// use uno:Save to save again..
dim dispatcher	As Object
dim Array()
dispatcher = createUnoService(&quot;com.sun.star.frame.DispatchHelper&quot;)
dispatcher.executeDispatch(oSuperSheetDoc, &quot;.uno:Save&quot;, &quot;&quot;, 0, Array())
	
	SuperToUntitled			&apos;// copy sheet to untitled sheets

	&apos;// now have Terrxxx_Searchnn sheet in QTerrxxx.ods
	oSuperSheetDoc.close(1)

	&apos;// now ready to append Untitled to _PubTerr to produce SuperTerr.
dim oDocUntitled	As Object
	oDocUntitled = ThisComponent.CurrentController.Frame

dim sBaseName		As String
dim sBasePath		As String
dim sTargPath		As String
dim sFullTargPath	As String
dim sTargetURL		As String
dim oTestDoc2		As Object
&apos;	sTerrID = {set above}	
	sBaseName = &quot;QTerr&quot;
	sBasePath = &quot;/Terr&quot;
	sTargPath = sBasePath &amp; sTerrID

	&apos;// open Terrxxx_PubTerr.ods - publisher territory
	sFullTargPath =  csTerrDataPath  &amp; sTargPath _ 
		&amp; sTargPath &amp; &quot;_PubTerr.ods&quot;
		
dim Args1(1)	As new com.sun.star.beans.PropertyValue 
	sTargetURL = convertToURL(sFullTargPath)
	Args1(1).name = &quot;FilterName&quot;
	Args1(1).Value = &quot;calc8&quot;
	Args1(0).name = &quot;Hidden&quot;
	Args1(0).value = False
	oTestDoc2 = StarDesktop.loadComponentFromURL(sTargetURL, &quot;_blank&quot;, 0, Args1())


	
	&apos;// use uno:Move to copy Untitled.Searchnn sheet to end of _PubTerr.
&apos;dim document	As Object
&apos;dim dispatcher	As Object
rem ----------------------------------------------------------------------
rem get access to the document
&apos;document   = ThisComponent.CurrentController.Frame
&apos;dispatcher = createUnoService(&quot;com.sun.star.frame.DispatchHelper&quot;)

rem ----------------------------------------------------------------------
dim args2(2) as new com.sun.star.beans.PropertyValue
args2(0).Name = &quot;DocName&quot;
args2(0).Value = &quot;Terr&quot; &amp; sTerrID &amp; &quot;_PubTerr&quot;
args2(1).Name = &quot;Index&quot;
args2(1).Value = 32767
args2(2).Name = &quot;Copy&quot;
args2(2).Value = true

dispatcher.executeDispatch(oDocUntitled, &quot;.uno:Move&quot;, &quot;&quot;, 0, args2())
&apos;dim oDoc	As Object
&apos;dim oSel	As Object


oDoc = ThisComponent.CurrentController.Frame
oDocUntitled.Close(1)	

	&apos;// use uno:Save As to save resultant _PubTerr as _SuperTerr.
dim sSuperTargURL	As String
dim sSuperTargPath	As String
	sSuperTargPath =  csTerrDataPath &amp; sTargPath _ 
		&amp; sBasePath &amp; sTerrID &amp; &quot;_SuperTerr.ods&quot;
	sSuperTargURL = convertToURL(sSuperTargPath)

dim args3(1) as new com.sun.star.beans.PropertyValue
args3(0).Name = &quot;URL&quot;
&apos;args1(0).Value = &quot;file:///media/ubuntu/Windows/Users/Bill/Documents/Cong-Files/Territories
&apos;                    /TerrData/Terrxxx/TerrData/Terrxxx_PubTerr.ods&quot;
args3(0).Value = sSuperTargURL
args3(1).Name = &quot;FilterName&quot;
args3(1).Value = &quot;calc8&quot;

dispatcher.executeDispatch(oDoc, &quot;.uno:SaveAs&quot;, &quot;&quot;, 0, args3())

&apos;// now repeat Save As to .xlsx.
sSuperTargURL = left(sSuperTargURL, len(sSuperTargURL)-3) &amp; &quot;xlsx&quot;
dim args4(1) as new com.sun.star.beans.PropertyValue
args4(0).Name = &quot;URL&quot;
&apos;args1(0).Value = &quot;file:///media/ubuntu/Windows/Users/Bill/Documents/Cong-Files/Territories
&apos;                    /TerrData/Terrxxx/TerrData/Terrxxx_PubTerr.ods&quot;
args4(0).Value = sSuperTargURL
args4(1).Name = &quot;FilterName&quot;
args4(1).Value = &quot;Calc MS Excel 2007 XML&quot;

dispatcher.executeDispatch(oDoc, &quot;.uno:SaveAs&quot;, &quot;&quot;, 0, args4())

oDoc.Close(1)

	
NormalExit:
	exit sub
	
ErrorHandler:
	ON ERROR GOTO
	msgbox(&quot;In BridgeToSuper - unprocessed error.&quot;)
	GOTO NormalExit
	
end sub		&apos;// BridgeToSuper	&apos;// 12/23/21.	21:09
&apos;/**/

&apos;// BridgeToSuper1.bas - Bridge sheet to Super territory sheets.
&apos;// OLDCODE...
&apos;//---------------------------------------------------------------
&apos;// BridgeToSuper- Bridge sheet to Super territory sheets.
&apos;//		3/17/21.	wmk.	10:55
&apos;//---------------------------------------------------------------

public sub BridgeToSuper1()

&apos;//	Usage.	macro call or
&apos;//			call BridgeToSuper()
&apos;//
&apos;// Entry.	user focused on Bridge sheet for territory
&apos;//
&apos;//	Exit.	gsNewSheet = new Search sheet name	
&apos;//
&apos;// Calls.	SetSrchSheetName, SuperToUntitled
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	3/14/21.	wmk.	original code
&apos;//	3/16/21.	wmk.	new Search sheet name stored in public
&apos;//						var gsNewSheet; SuperToUntitled call added.
&apos;//	3/17/21.	wmk.	fsGetSrchSheetName, MoveToSheet calls added
&apos;//						code added to move to Bridge sheet if not 
&apos;//						already there.
&apos;//
&apos;//	Notes. Executes the following sequence:
&apos;// move to Bridge sheet
&apos;// copy sheet to end
&apos;// BridgeToEdit()
&apos;// copy sheet to end
&apos;// EditToSearch3
&apos;// rename sheet &quot;Terrxxx_Search&quot;
&apos;// moveto sheet TerrxxxPub_Terr
&apos;// copy to &quot;untitled1&quot;
&apos;// move back to sheet &quot;TerrxxxSearch&quot;
&apos;// copy to &quot;untitled2&quot;


&apos;//	constants.

&apos;//	local variables.
dim oDoc		As Object		&apos;// current component
dim oSel		As Object		&apos;// current selection
dim oSheet		As Object		&apos;// sheet selected
dim sCurrName	As String		&apos;// current sheet name
dim bIsBridge	As String		&apos;// sheet is Bridge type
dim oRange		As Object		&apos;// RangeSelection 
dim iSheetIx	As Integer		&apos;// current sheet index
dim iBridgePos	As Integer		&apos;// &quot;Bridge&quot; string index
dim sNewName	As String		&apos;// new sheet name
dim sTerrID		As String		&apos;// territory ID
dim sBridgeName	As String		&apos;// Bridge sheet name

	&apos;// code.
	ON ERROR GOTO ErrorHandler
	oDoc = ThisComponent
	oSel = oDoc.getCurrentSelection()
	oRange = oSel.RangeAddress
	iSheetIx = oRange.Sheet
	oSheet = oDoc.Sheets(iSheetIx)
	sCurrName = oSheet.getName()
	
	if InStr(sCurrName, &quot;Bridge&quot;) = 0 then
		&apos;// move to Bridge sheet.
		sTerrId = fsGetTerrID()
		sBridgeName = &quot;Terr&quot; + sTerrID + &quot;_Bridge&quot;
		MoveToSheet(sBridgeName)
		oSel = oDoc.getCurrentSelection()
		oRange = oSel.RangeAddress
		iSheetIx = oRange.Sheet
		oSheet = oDoc.Sheets(iSheetIx)
	endif 		&apos;// end not in Bridge sheet
	
	&apos;// verify sheet type by sheet name
	sCurrName = oSheet.getName()
	bIsBridge = InStr(sCurrName, &quot;Bridge&quot;) &gt; 0
	
	if bIsBridge then
		msgbox(&quot;Sheet is type Bridge... proceeding&quot;)
	else
		msgbox(&quot;Sheet not recogonized as Bridge..&quot;)
		GoTo ErrorHandler
	endif
	
if not true then
  GoTo NormalExit
endif

	&apos;// copy sheet to end and run BridgeToEdit
	CopyToEnd()
	UnprotectSheet()
	BridgeToEdit()

	&apos;// rename &quot;Bridge&quot; portion to &quot;Edit&quot; with random number to avoid conflicts.
	iBridgePos = InStr(sCurrName,&quot;Bridge&quot;)
	sNewName = left(sCurrName,iBridgePos-1) + &quot;Edit&quot; + INT(100*RND())
	RenameSheet(sNewName)

	&apos;// copy Edit sheet to end and convert to Search sheet.
	ProtectSheet()
	CopyToEnd()
	UnprotectSheet()
	EditToSearch3()
dim iEditPos As Integer		&apos;// &quot;Edit&quot; position
	iEditPos = Instr(sNewName,&quot;Edit&quot;)
	sNewName = left(sNewName, iEditPos-1) + &quot;Search&quot; + INT(100*RND())
	RenameSheet(sNewName)
	gsNewSheet = sNewName	&apos;// preserve name
	fsSetSrchSheetName(sNewName)
	
if not true then
  msgbox(&quot;gsNewSheet = &apos;&quot; + gsNewSheet + &quot;&apos;&quot;)
endif

	SelectSrchSheetArea()
	WrapLong()
	HltAddrBlocks4()
	SuperToUntitled			&apos;// copy sheets to untitled sheets

NormalExit:
	exit sub
	
ErrorHandler:
	ON ERROR GOTO
	msgbox(&quot;In BridgeToSuper - unprocessed error.&quot;)
	GOTO NormalExit
	
end sub		&apos;// BridgeToSuper1	&apos;// 3/17/21.	10:55
&apos;/**/


&apos;// BizBridgeToBiz.bas
&apos;//---------------------------------------------------------------
&apos;// BizBridgeToBiz - Biz-Bridge sheet to Biz-Territory sheet.
&apos;//		9/26/21.	wmk.	20:52
&apos;//---------------------------------------------------------------

public sub BizBridgeToBiz()

&apos;// Calls.	BoldHeadings, ForceRecalc, SetTerrColWidths3,
&apos;//			SetSelection, MergeOwnerCells, MergeStreetsCells,
&apos;//			MergeSheetType, SetHdrSumFormula3, CenterUnitHstead3,
&apos;//			FreezeView
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;// 9/26/21.	wmk.	original code; adapted from BridgeToTerr3.
&apos;// Legacy mods.
&apos;//	9/18/20.	wmk.	original code; adapted from EditToTerr
&apos;//	9/19/20.	wmk.	Merge.. calls; FreezeView call added
&apos;//	9/21/20.	wmk.	SetHdrSumFormula call added
&apos;//	9/30/20.	wmk.	PropUse column support
&apos;//	10/3/20.	wmk.	check all rows for DoNotCall
&apos;// 10/23/20.	wmk.	support Unit column replacing Resident1,
&apos;//						Resident2 column removed; dead code removed;
&apos;//						ForceRecalc call added
&apos;// 11/29/20.	wmk.	bug fix DO NOT CALL overwriting Unit field, moved
&apos;//						to Name1 field at new position from 10/23 mod
&apos;// 1/14/21.	wmk.	modified to center columns B and E and to 
&apos;//						freeze view at A6
&apos;// 2/14/21.	wmk.	columns rearranged with H in column A; header
&apos;//						consolidated and simplified.
&apos;// 2/15/21.	wmk.	fix bug where DONOTCALL not updated to use COL_D
&apos;//						so overwriting Unit.
&apos;//	2/19/21.	wmk.	rearrange columns; keep same as version 2, except
&apos;//						H column is now COL_C; stuff that was placed in
&apos;//						B2, B3 now back in A2, A3.
&apos;// 2/20/21.	wmk.	bug fix; column heading missing COL_B &quot;H&quot;; also
&apos;//						H - * is homestead missing *
&apos;// 3/3/21.		wmk.	bug fix; sheet date being lost, so set again
&apos;//						before exit in cell B2 instead of C2.
&apos;// 3/14/21.	wmk.	Add code to Align and wrap text and hightlight
&apos;//						address blocks.
&apos;//	3/16/21.	wmk.	add call to SetPubSheetName to preserve generated
&apos;//						PubTerr sheet name after renaming sheet.
&apos;// 4/7/21.		wmk.	bug fix where DONOTCALL not being set if string &quot;1&quot;
&apos;//						as opposed to numeric 1.
&apos;// 7/10/21.	wmk.	bug fix where zip code being deleted from header;
&apos;//						restore FreezeView call at end.
&apos;// 7/12/21.	wmk.	add inline code to rename sheet to _PubTerr and save;
&apos;//						sCongTerr column corrected.
&apos;//
&apos;//	Notes.
&apos;// Method.
&apos;//		remove columns J-L
&apos;//		remove column H
&apos;//		reset title
&apos;//		E1 = &quot;BizTerr formatted sheet&quot; 

&apos;//	constants.
const COL_PARCEL=0		&apos;// &quot;OwningParcel&quot; column index
const COL_A=0
const COL_B=1
const COL_C=2	
const COL_D=3
const COL_E=4
const COL_F=5
const COL_G=6			&apos;// column G index
const COL_H=7			&apos;// column H index
const COL_I=8			&apos;// column I index
const COL_J=9			&apos;// column J index
const COL_K=10			&apos;// column K index
const COL_L=11			&apos;// column L index (DoNotCall)
const COL_M=12			&apos;// column M index (RSO)
const COL_N=13			&apos;// column N index (Foreign)
const COL_O=14			&apos;// column O index
const COL_P=15			&apos;// column P index
const ROW_1=0
const ROW_2=1
const ROW_3=2
const ROW_4=3
const ROW_HEADING=4		&apos;// headings row index
const LJUST=1		&apos;// left-justify HoriJustify				&apos;// mod052020
const CJUST=2		&apos;// center HoriJustify						&apos;// mod052020
const RJUST=3		&apos;// right-justify HoriJustify				&apos;// mod052320
const MDYY=30		&apos;// &apos;M/D/YY&apos; format value

&apos;//	local variables.
Dim oDoc As Object
Dim oSheet As Object
Dim NewColumn As Object
dim oSel as Object
dim iSheetIx as integer
dim oRange as Object
dim lThisRow as long		&apos;// current row selected on sheet
dim oMrgRange	As Object	&apos;// merge range

dim oCell	As Object		&apos;// cell working on
dim i		As Integer		&apos;// loop index
dim sPropID	As String		&apos;// property ID
dim sSubTerr	As String	&apos;// subterritory
dim sCongTerr	As String	&apos;// cong terr ID
dim lRowCount	As Long		&apos;// row count of addresses
dim dDate		As Double	&apos;// date value
dim sCityStZip	As String	&apos;// concatenated City, State, Zip
dim sNotes		As String	&apos;// notes field
dim nCols		As Integer	&apos;// removal column count
dim sPhone2		As String	&apos;// col F content
dim sCity		As String	&apos;// City from B3
dim sZip		As String	&apos;// Zip from C3							&apos;// mod071021
dim sTitle		As String	&apos;// sheet Title


	&apos;// code.
	ON ERROR GoTo ErrorHandler
	oDoc = ThisComponent
	oSel = oDoc.getCurrentSelection()
	oRange = oSel.RangeAddress
	iSheetIx = oRange.Sheet
	oSheet = oDoc.Sheets(iSheetIx)

	&apos;// remove columns J - L.
	oSheet.Columns.removeByIndex(COL_J, 3)
	
	&apos;// remove column H.
	oSheet.Columns.removeByIndex(COL_H, 1)

	&apos;// reset sheet title.	
	oCell =	oSheet.getCellByPosition(COL_E, ROW_2)
	oCell.String = &quot;BizTerr formatted sheet&quot;

	&apos;// pick up terr ID.
    oCell = oSheet.getCellByPosition(COL_D, ROW_4)						&apos;// mod071221
    sCongTerr = oCell.String

	FreezeView()		&apos;// freeze row/column scrolling at A6		&apos;// mod071021

dim document   as object
dim dispatcher as object
document   = ThisComponent.CurrentController.Frame
dispatcher = createUnoService(&quot;com.sun.star.frame.DispatchHelper&quot;)
dim sSheetName	As String
	sSheetName = &quot;Terr&quot; + sCongTerr + &quot;_BizTerr&quot;
dim args19(0) as new com.sun.star.beans.PropertyValue
args19(0).Name = &quot;Name&quot;
&apos;args1(0).Value = &quot;Terr102_Import&quot;
args19(0).Value = sSheetName

dispatcher.executeDispatch(document, &quot;.uno:RenameTable&quot;, &quot;&quot;, 0, args19())
&apos;$
dispatcher.executeDispatch(document, &quot;.uno:Save&quot;, &quot;&quot;, 0, Array())

dispatcher.executeDispatch(document, &quot;.uno:Save&quot;, &quot;&quot;, 0, Array())
document.Close(1)	
	fsSetPubSheetName(sSheetName)					&apos;// mod071221

NormalExit:
	exit sub

ErrorHandler:
	msgbox(&quot;BizBridgeToBiz - unprocessed error.&quot;)
	GoTo NormalExit

end sub		&apos;// end BizBridgeToBiz	9/26/21.	20:52
&apos;/**/

&apos;// BridgeToTerr.bas
&apos;//---------------------------------------------------------------
&apos;// BridgeToTerr - Admin-Bridge sheet to Pub-Territory sheet.
&apos;//		1/14/21.	wmk.	07:00
&apos;//---------------------------------------------------------------

public sub BridgeToTerr()

&apos;//	Usage.	macro call or
&apos;//			call BridgeToTerr()
&apos;//
&apos;// Entry.
&apos;//	OwningParcel  UnitAddress  Unit	 Resident1 Phone1 Phone2 RUPhone
&apos;//			A			B		C		D		  E		 F		G	
&apos;//  SubTerr CongTerr DoNotCall RSO Foreign  RecordDate SitusAddress
&apos;//		H		I		   J     K     L		M			  N		
&apos;//  PropUse	DelPending
&apos;//		O  			P
&apos;//
&apos;//	Exit.	produces a &quot;Pub-Territory&quot; formatted sheet with the following fields:
&apos;//        A    	B      C       D      E     F    		G		   H		I
&apos;//		Address   Unit  Name1   Phone1  Phone2 RU/Phone	 DoNotCall	Foreign	Personal/Notes
&apos;//[source] B      C	  D		   E	  F	        G          J       L		-
&apos;//
&apos;// Calls.	BoldHeadings, ForceRecalc, SetTerrWidths,
&apos;//			SetSelection, MergeOwnerCells, MergeStreetsCells,
&apos;//			MergeSheetType, SetHdrSumFormula, CenterUnitHstead,
&apos;//			FreezeView
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	9/18/20.	wmk.	original code; adapted from EditToTerr
&apos;//	9/19/20.	wmk.	Merge.. calls; FreezeView call added
&apos;//	9/21/20.	wmk.	SetHdrSumFormula call added
&apos;//	9/30/20.	wmk.	PropUse column support
&apos;//	10/3/20.	wmk.	check all rows for DoNotCall
&apos;// 10/23/20.	wmk.	support Unit column replacing Resident1,
&apos;//						Resident2 column removed; dead code removed;
&apos;//						ForceRecalc call added
&apos;// 11/29/20.	wmk.	bug fix DO NOT CALL overwriting Unit field, moved
&apos;//						to Name1 field at new position from 10/23 mod
&apos;// 1/14/21.	wmk.	modified to center columns B and E and to 
&apos;//						freeze view at A6
&apos;//	Notes.
&apos;// Method.
&apos;//		Move header A1-H4 to B1
&apos;//		Remove column A
&apos;//		Change A heading to &quot;Address&quot;
&apos;//		col B heading to &quot;Name1&quot;
&apos;//		col C heading to &quot;Name2&quot;
&apos;//		col G heading to &quot;DoNotCall&quot;
&apos;//		move col I data to col G
&apos;//		col H heading to &quot;Foreign&quot;
&apos;//		move col K data to col H
&apos;//		remove columns I to N
&apos;//		col I heading to &quot;Personal Notes&quot;
&apos;//		H1 = &quot;Admin-TSExport formatted sheet&quot; 

&apos;//	constants.
const COL_PARCEL=0		&apos;// &quot;OwningParcel&quot; column index
const COL_A=0
const COL_B=1
const COL_C=2	
const COL_D=3
const COL_E=4
const COL_F=5
const COL_G=6			&apos;// column G index
const COL_H=7			&apos;// column H index
const COL_I=8			&apos;// column I index
const COL_J=9			&apos;// column J index
const COL_K=10			&apos;// column K index
const COL_L=11			&apos;// column L index (DoNotCall)
const COL_M=12			&apos;// column M index (RSO)
const COL_N=13			&apos;// column N index (Foreign)
const COL_O=14			&apos;// column O index
const COL_P=15			&apos;// column P index
const ROW_1=0
const ROW_2=1
const ROW_3=2
const ROW_4=3
const ROW_HEADING=4		&apos;// headings row index
const LJUST=1		&apos;// left-justify HoriJustify				&apos;// mod052020
const CJUST=2		&apos;// center HoriJustify						&apos;// mod052020
const RJUST=3		&apos;// right-justify HoriJustify				&apos;// mod052320
const MDYY=30		&apos;// &apos;M/D/YY&apos; format value

&apos;//	local variables.
Dim oDoc As Object
Dim oSheet As Object
Dim NewColumn As Object
dim oSel as Object
dim iSheetIx as integer
dim oRange as Object
dim lThisRow as long		&apos;// current row selected on sheet
dim oMrgRange	As Object	&apos;// merge range

dim oCell	As Object		&apos;// cell working on
dim i		As Integer		&apos;// loop index
dim sPropID	As String		&apos;// property ID
dim sSubTerr	As String	&apos;// subterritory
dim sCongTerr	As String	&apos;// cong terr ID
dim lRowCount	As Long		&apos;// row count of addresses
dim dDate		As Double	&apos;// date value
dim sCityStZip	As String	&apos;// concatenated City, State, Zip
dim sNotes		As String	&apos;// notes field
dim nCols		As Integer	&apos;// removal column count

	&apos;// code.
	ON ERROR GoTo ErrorHandler
	oDoc = ThisComponent
	oSel = oDoc.getCurrentSelection()
	oRange = oSel.RangeAddress
	iSheetIx = oRange.Sheet
	oSheet = oDoc.Sheets(iSheetIx)
	
	oCell =	oSheet.getCellByPosition(COL_B, ROW_2)
	lRowCount = oCell.Value

	&apos;// remove columns H, I since header already set
	oSheet.Columns.removeByIndex(COL_H, 2)

	&apos;// now remove new I (RSO)
	oSheet.Columns.removeByIndex(COL_I, 1)

	&apos;// now remove J - M
	oSheet.Columns.removeByIndex(COL_J, 4)
		
	
	&apos;// move A1-H4 to B1 to allow col A removal
	&apos;//		move data from entire column E to B
	oMrgRange = oRange
	oMrgRange.StartColumn = COL_A
	oMrgRange.EndColumn = COL_H
	oMrgRange.StartRow = ROW_1
	oMrgRange.EndRow = ROW_4
dim oTarget as new com.sun.star.table.CellAddress
	oTarget.Sheet = oRange.Sheet
	oTarget.Column = COL_B
	oTarget.Row = ROW_1
	oSheet.moveRange(oTarget,oMrgRange)
	
	&apos;// remove col A
	oSheet.Columns.removeByIndex(COL_A, 1)
	
	&apos;// change col A heading to &quot;Address&quot;
	oCell = oSheet.getCellByPosition(COL_A, ROW_HEADING)
	oCell.String = &quot;Address&quot;
	oCell.HoriJustify = CJUST

	&apos;//		col B heading to &quot;Unit&quot;
	oCell = oSheet.getCellByPosition(COL_B, ROW_HEADING)
	oCell.String = &quot;Unit&quot;
	oCell.HoriJustify = CJUST

	&apos;//		col C heading to &quot;Name1&quot;
	oCell = oSheet.getCellByPosition(COL_C, ROW_HEADING)
	oCell.String = &quot;Name1&quot;
	oCell.HoriJustify = CJUST

	&apos;// Delete G4 &quot;RefUSA&quot;, set F4 to &quot;RefUSA&quot;
	oCell = oSheet.getCellByPosition(COL_G, ROW_HEADING-1)
	oCell.String = &quot;&quot;
	oCell = oSheet.getCellByPosition(COL_F, ROW_HEADING)
	oCell.String = &quot;RefUSA&quot;
	oCell.HoriJustify = CJUST

	&apos;//		col I heading to &quot;Personal Notes&quot;
	oCell = oSheet.getCellByPosition(COL_I, ROW_HEADING)
	oCell.String = &quot;Personal Notes&quot;
	oCell.HoriJustify = CJUST

	&apos;//		H1 = &quot;Pub-Territory formatted sheet&quot; 
	oCell = oSheet.getCellByPosition(COL_H, ROW_1)
	oCell.String = &quot;Pub-Territory formatted sheet&quot;

	&apos;// check rows for DoNotCall flag and set Name1 accordingly
	lThisRow = ROW_HEADING		&apos;// start 1 row behind
	for i = 0 to lRowCount-1
		lThisRow = lThisRow + 1
		oCell = oSheet.getCellByPosition(COL_G, lThisRow)
&apos;		if StrComp(oCell.String, &quot;1&quot;) = 0 then
		if oCell.Value = 1 then
			oCell = oSheet.getCellByPosition(COL_C, lThisRow)
			oCell.String = &quot;DO NOT CALL&quot;
		endif
	next i
	
	&apos;// tidy up header information
	SetHdrSumFormula()		&apos;// restore B2 formula
	BoldHeadings()
	SetTerrColWidths()
	MergeSheetType()	&apos;// remerge since move destroyed merge
	CenterUnitHstead()	&apos;// center unit and &quot;homestead&quot; columns
	FreezeView()		&apos;// freeze row/column scrolling at A6
	ForceRecalc()

NormalExit:
	exit sub

ErrorHandler:
	msgbox(&quot;BridgeToTerr - unprocessed error.&quot;)
	GoTo NormalExit

end sub		&apos;// end BridgeToTerr		1/14/21
&apos;/**/

&apos;// BridgeToTerr2.bas
&apos;//---------------------------------------------------------------
&apos;// BridgeToTerr2 - Admin-Bridge sheet to Pub-Territory sheet.
&apos;//		2/14/21.	wmk.	20:15
&apos;//---------------------------------------------------------------

public sub BridgeToTerr2()

&apos;//	Usage.	macro call or
&apos;//			call BridgeToTerr2()
&apos;//
&apos;// Entry.
&apos;//	OwningParcel  UnitAddress  Unit	 Resident1 Phone1 Phone2 RUPhone
&apos;//			A			B		C		D		  E		 F		G	
&apos;//  SubTerr CongTerr DoNotCall RSO Foreign  RecordDate SitusAddress
&apos;//		H		I		   J     K     L		M			  N		
&apos;//  PropUse	DelPending
&apos;//		O  			P
&apos;//
&apos;//	Exit.	produces a &quot;Pub-Territory&quot; formatted sheet with the following fields:
&apos;//        A    	B      C       D      E     F    		G		   H		I
&apos;//		Address   Unit  Name1   Phone1  Phone2 RU/Phone	 DoNotCall	Foreign	Personal/Notes
&apos;//[source] B      C	  D		   E	  F	        G          J       L		-
&apos;//
&apos;// Proposed
&apos;//	Exit.	produces a &quot;Pub-Territory&quot; formatted sheet with the following fields:
&apos;//        A    	B      C       D      E         F     G	   H		I
&apos;//		[Phone2] Address   Unit  Name1  Phone1  RU/Phone DNC  FL	Personal/Notes
&apos;//[source] F      B	   	 C     D	  E	        G     J    L		-




&apos;// Calls.	BoldHeadings, ForceRecalc, SetTerrWidths,
&apos;//			SetSelection, MergeOwnerCells, MergeStreetsCells,
&apos;//			MergeSheetType, SetHdrSumFormula, CenterUnitHstead,
&apos;//			FreezeView
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	9/18/20.	wmk.	original code; adapted from EditToTerr
&apos;//	9/19/20.	wmk.	Merge.. calls; FreezeView call added
&apos;//	9/21/20.	wmk.	SetHdrSumFormula call added
&apos;//	9/30/20.	wmk.	PropUse column support
&apos;//	10/3/20.	wmk.	check all rows for DoNotCall
&apos;// 10/23/20.	wmk.	support Unit column replacing Resident1,
&apos;//						Resident2 column removed; dead code removed;
&apos;//						ForceRecalc call added
&apos;// 11/29/20.	wmk.	bug fix DO NOT CALL overwriting Unit field, moved
&apos;//						to Name1 field at new position from 10/23 mod
&apos;// 1/14/21.	wmk.	modified to center columns B and E and to 
&apos;//						freeze view at A6
&apos;//	Notes.
&apos;// New Method.
&apos;//		delete all string data from column A
&apos;//		change column A heading to &apos;H&apos;
&apos;// Method.
&apos;//		Move header A1-H4 to B1
&apos;//		Remove column A
&apos;//		Change A heading to &quot;Address&quot;
&apos;//		col B heading to &quot;Name1&quot;
&apos;//		col C heading to &quot;Name2&quot;
&apos;//		col G heading to &quot;DoNotCall&quot;
&apos;//		move col I data to col G
&apos;//		col H heading to &quot;Foreign&quot;
&apos;//		move col K data to col H
&apos;//		remove columns I to N
&apos;//		col I heading to &quot;Personal Notes&quot;
&apos;//		H1 = &quot;Admin-TSExport formatted sheet&quot; 

&apos;//	constants.
const COL_PARCEL=0		&apos;// &quot;OwningParcel&quot; column index
const COL_A=0
const COL_B=1
const COL_C=2	
const COL_D=3
const COL_E=4
const COL_F=5
const COL_G=6			&apos;// column G index
const COL_H=7			&apos;// column H index
const COL_I=8			&apos;// column I index
const COL_J=9			&apos;// column J index
const COL_K=10			&apos;// column K index
const COL_L=11			&apos;// column L index (DoNotCall)
const COL_M=12			&apos;// column M index (RSO)
const COL_N=13			&apos;// column N index (Foreign)
const COL_O=14			&apos;// column O index
const COL_P=15			&apos;// column P index
const ROW_1=0
const ROW_2=1
const ROW_3=2
const ROW_4=3
const ROW_HEADING=4		&apos;// headings row index
const LJUST=1		&apos;// left-justify HoriJustify				&apos;// mod052020
const CJUST=2		&apos;// center HoriJustify						&apos;// mod052020
const RJUST=3		&apos;// right-justify HoriJustify				&apos;// mod052320
const MDYY=30		&apos;// &apos;M/D/YY&apos; format value

&apos;//	local variables.
Dim oDoc As Object
Dim oSheet As Object
Dim NewColumn As Object
dim oSel as Object
dim iSheetIx as integer
dim oRange as Object
dim lThisRow as long		&apos;// current row selected on sheet
dim oMrgRange	As Object	&apos;// merge range

dim oCell	As Object		&apos;// cell working on
dim i		As Integer		&apos;// loop index
dim sPropID	As String		&apos;// property ID
dim sSubTerr	As String	&apos;// subterritory
dim sCongTerr	As String	&apos;// cong terr ID
dim lRowCount	As Long		&apos;// row count of addresses
dim dDate		As Double	&apos;// date value
dim sCityStZip	As String	&apos;// concatenated City, State, Zip
dim sNotes		As String	&apos;// notes field
dim nCols		As Integer	&apos;// removal column count
dim sPhone2		As String	&apos;// col F content
dim sCity		As String	&apos;// City from B3


	&apos;// code.
	ON ERROR GoTo ErrorHandler
	oDoc = ThisComponent
	oSel = oDoc.getCurrentSelection()
	oRange = oSel.RangeAddress
	iSheetIx = oRange.Sheet
	oSheet = oDoc.Sheets(iSheetIx)
	
	oCell =	oSheet.getCellByPosition(COL_B, ROW_2)
	lRowCount = oCell.Value

	&apos;// remove columns H, I since header already set
	oSheet.Columns.removeByIndex(COL_H, 2)

	&apos;// now remove new I (RSO)
	oSheet.Columns.removeByIndex(COL_I, 1)

	&apos;// now remove J - M
	oSheet.Columns.removeByIndex(COL_J, 4)
		
if true then
   goto Skip1
endif	
	&apos;// move A1-H4 to B1 to allow col A removal
	&apos;//		move data from entire column E to B
	oMrgRange = oRange
	oMrgRange.StartColumn = COL_A
	oMrgRange.EndColumn = COL_H
	oMrgRange.StartRow = ROW_1
	oMrgRange.EndRow = ROW_4
dim oTarget as new com.sun.star.table.CellAddress
	oTarget.Sheet = oRange.Sheet
	oTarget.Column = COL_B
	oTarget.Row = ROW_1
	oSheet.moveRange(oTarget,oMrgRange)
Skip1:
	if true then
	   goto Skip2
	endif
	
	&apos;// remove col A
	oSheet.Columns.removeByIndex(COL_A, 1)
Skip2:	
	&apos;// change col A heading to &quot;H&quot;
	oCell = oSheet.getCellByPosition(COL_A, ROW_HEADING)
	oCell.String = &quot;H&quot;
	oCell.HoriJustify = CJUST
	if true then
	   goto Skip3
	endif

	&apos;//		col B heading to &quot;Unit&quot;
	oCell = oSheet.getCellByPosition(COL_B, ROW_HEADING)
	oCell.String = &quot;Unit&quot;
	oCell.HoriJustify = CJUST

	&apos;//		col C heading to &quot;Name1&quot;
	oCell = oSheet.getCellByPosition(COL_C, ROW_HEADING)
	oCell.String = &quot;Name1&quot;
	oCell.HoriJustify = CJUST
Skip3:

     &apos;// copy F column data to column A; Phone2 is &quot;homestead&quot;.
	lThisRow = ROW_HEADING		&apos;// start 1 row behind
	for i = 0 to lRowCount-1
		lThisRow = lThisRow + 1
		oCell = oSheet.getCellByPosition(COL_F, lThisRow)
		sPhone2 = oCell.String
		oCell = oSheet.getCellByPosition(COL_A, lThisRow)
		oCell.String = sPhone2
	next i
    oSheet.Columns(COL_A).HoriJustify = CJUST
     &apos;// delete column F; F is now RefUSA data.
	oSheet.Columns.removeByIndex(COL_F, 1)
     
     
	&apos;// Set G4 &quot;DNC&quot;, H4 &quot;FL&quot;, set F4 to &quot;RefUSA&quot;
	oCell = oSheet.getCellByPosition(COL_G, ROW_HEADING-1)
	oCell.String = &quot;&quot;
	oCell = oSheet.getCellByPosition(COL_G, ROW_HEADING)
	oCell.String = &quot;DNC&quot;
	oCell = oSheet.getCellByPosition(COL_H, ROW_HEADING)
	oCell.String = &quot;FL&quot;
	oCell = oSheet.getCellByPosition(COL_F, ROW_HEADING)
	oCell.String = &quot;RefUSA&quot;
	oCell.HoriJustify = CJUST

	&apos;//		col I heading to &quot;Personal Notes&quot;
	oCell = oSheet.getCellByPosition(COL_I, ROW_HEADING)
	oCell.String = &quot;Personal Notes&quot;
	oCell.HoriJustify = CJUST

	&apos;//		H1 = &quot;Pub-Territory formatted sheet&quot; 
	oCell = oSheet.getCellByPosition(COL_H, ROW_1)
	oCell.String = &quot;Pub-Territory formatted sheet&quot;

	&apos;// check rows for DoNotCall flag and set Name1 accordingly
	lThisRow = ROW_HEADING		&apos;// start 1 row behind
	for i = 0 to lRowCount-1
		lThisRow = lThisRow + 1
		oCell = oSheet.getCellByPosition(COL_G, lThisRow)
&apos;		if StrComp(oCell.String, &quot;1&quot;) = 0 then
		if oCell.Value = 1 then
			oCell = oSheet.getCellByPosition(COL_C, lThisRow)
			oCell.String = &quot;DO NOT CALL&quot;
		endif
	next i
	
	&apos;// tidy up header information
	oCell = oSheet.getCellByPosition(COL_A, 1)
	oCell.String = &quot;&quot;
	SetHdrSumFormula2()		&apos;// B2 formula &quot;record count&quot; xxx
	
	&apos;// merge City and State at B3.
	oCell = oSheet.getCellByPosition(COL_A, 2)
	oCell.String = &quot;&quot;
	oCell = oSheet.getCellByPosition(COL_B, 2)
	sCity = oCell.String
	oCell.String = &quot;City: &quot; &amp; sCity	

    &apos;// merge Territory/Subterritory at D1.
    oCell = oSheet.getCellByPosition(COL_D, 3)
    sCongTerr = oCell.String
    oCell = oSheet.getCellByPosition(COL_B, 3)
    sSubTerr =trim( oCell.String)
    oCell = oSheet.getCellByPosition(COL_D, 0)
    oCell.String = &quot;Territory: &quot; &amp; sCongTerr
    oCell.HoriJustify = LJUST
    if len(sSubTerr) &gt; 0 then
    	oCell.String = oCell.String &amp; &quot;/&quot; &amp; sSubTerr
    endif
    
    &apos;// empty A4-I4 and merge for blank row.
    &apos;// clear A4, C4, D4.
    oCell = oSheet.getCellByPosition(COL_A,ROW_4)
	oCell.String = &quot;&quot;
    oCell = oSheet.getCellByPosition(COL_C,ROW_4)
	oCell.String = &quot;&quot;
    oCell = oSheet.getCellByPosition(COL_D,ROW_4)
	oCell.String = &quot;&quot;
	
dim document   as object
dim dispatcher as object
document   = ThisComponent.CurrentController.Frame
dispatcher = createUnoService(&quot;com.sun.star.frame.DispatchHelper&quot;)
	&apos;// select range A4:I4
	dim args1(0) as new com.sun.star.beans.PropertyValue
	args1(0).Name = &quot;ToPoint&quot;
	args1(0).Value = &quot;$A$4:$I$4&quot;
dim Array(0)  as new com.sun.star.beans.PropertyValue

	dispatcher.executeDispatch(document, &quot;.uno:GoToCell&quot;, &quot;&quot;, 0, args1())
    dispatcher.executeDispatch(document, &quot;.uno:ClearContents&quot;, &quot;&quot;, 0, Array())

    MergeRow4()

	&apos;// select range A4:I4
	dim args2(0) as new com.sun.star.beans.PropertyValue
	args2(0).Name = &quot;ToPoint&quot;
	args2(0).Value = &quot;$D$2:$I$3&quot;
	dispatcher.executeDispatch(document, &quot;.uno:GoToCell&quot;, &quot;&quot;, 0, args2())
    dispatcher.executeDispatch(document, &quot;.uno:ClearContents&quot;, &quot;&quot;, 0, Array())

	MergeHelpArea()		&apos;// there are merged cells, split them
	MergeHelpArea()		&apos;// now merge the cells
	oCell = oSheet.getCellByPosition(COL_D,ROW_2)
	oCell.String = &quot;H = homestead     DNC = do not call     FL = foreign language&quot; _
	   + CHR(13) + CHR(10) + &quot;ALL CAPS = SC county data     Mixed Case = RefUSA data&quot;

	&apos;// clear sheet type area.
	dim args3(0) as new com.sun.star.beans.PropertyValue
	args3(0).Name = &quot;ToPoint&quot;
	args3(0).Value = &quot;$E$1:$G$1&quot;
	dispatcher.executeDispatch(document, &quot;.uno:GoToCell&quot;, &quot;&quot;, 0, args3())
    dispatcher.executeDispatch(document, &quot;.uno:ClearContents&quot;, &quot;&quot;, 0, Array())
	dispatcher.executeDispatch(document, &quot;.uno:ToggleMergeCells&quot;, &quot;&quot;, 0, Array())
    
	args3(0).Name = &quot;ToPoint&quot;
	args3(0).Value = &quot;$H$1:$I$1&quot;
	dispatcher.executeDispatch(document, &quot;.uno:GoToCell&quot;, &quot;&quot;, 0, args3())
    dispatcher.executeDispatch(document, &quot;.uno:ClearContents&quot;, &quot;&quot;, 0, Array())
	dispatcher.executeDispatch(document, &quot;.uno:ToggleMergeCells&quot;, &quot;&quot;, 0, Array())

	args3(0).Name = &quot;ToPoint&quot;
	args3(0).Value = &quot;$E$1:$I$1&quot;
	dispatcher.executeDispatch(document, &quot;.uno:GoToCell&quot;, &quot;&quot;, 0, args3())
	dispatcher.executeDispatch(document, &quot;.uno:ToggleMergeCells&quot;, &quot;&quot;, 0, Array())
	dim args18(0) as new com.sun.star.beans.PropertyValue
	args18(0).Name = &quot;Bold&quot;
	args18(0).Value = true
	dispatcher.executeDispatch(document, &quot;.uno:Bold&quot;, &quot;&quot;, 0, args18())

	BoldHeadings()
	SetTerrColWidths2()
&apos;	MergeSheetType2()	&apos;// split cells
&apos;	MergeSheetType2()	&apos;// remerge
	oCell = oSheet.getCellByPosition(COL_E, ROW_1)
	oCell.String = &quot;PubTerr&quot;
	
	args18(0).Name = &quot;Bold&quot;
	args18(0).Value = true
	dispatcher.executeDispatch(document, &quot;.uno:Bold&quot;, &quot;&quot;, 0, args18())

	args3(0).Name = &quot;ToPoint&quot;
	args3(0).Value = &quot;$D$1:$D$1&quot;
	dispatcher.executeDispatch(document, &quot;.uno:GoToCell&quot;, &quot;&quot;, 0, args3())
	args18(0).Name = &quot;Bold&quot;
	args18(0).Value = true
	dispatcher.executeDispatch(document, &quot;.uno:Bold&quot;, &quot;&quot;, 0, args18())
	
	
	
	CenterUnitHstead2()	&apos;// center unit and &quot;homestead&quot; columns
&apos;	FreezeView()		&apos;// freeze row/column scrolling at A6
	ForceRecalc()

NormalExit:
	exit sub

ErrorHandler:
	msgbox(&quot;BridgeToTerr2 - unprocessed error.&quot;)
	GoTo NormalExit

end sub		&apos;// end BridgeToTerr2		2/14/21 15:00
&apos;/**/


&apos;// BridgeToTerr3.bas
&apos;//---------------------------------------------------------------
&apos;// BridgeToTerr3 - Admin-Bridge sheet to Pub-Territory sheet.
&apos;//		7/12/21.	wmk.	14:25
&apos;//---------------------------------------------------------------

public sub BridgeToTerr3()

&apos;//	Usage.	macro call or
&apos;//			call BridgeToTerr3()
&apos;//
&apos;// Entry.
&apos;//	OwningParcel  UnitAddress  Unit	 Resident1 Phone1 Phone2 RUPhone
&apos;//			A			B		C		D		  E		 F		G	
&apos;//  SubTerr CongTerr DoNotCall RSO Foreign  RecordDate SitusAddress
&apos;//		H		I		   J     K     L		M			  N		
&apos;//  PropUse	DelPending
&apos;//		O  			P
&apos;//
&apos;//	Exit.	produces a &quot;Pub-Territory&quot; formatted sheet with the following fields:
&apos;//        A    	B      C       D      E     F    		G		   H		I
&apos;//		Address   Unit  Name1   Phone1  Phone2 RU/Phone	 DoNotCall	Foreign	Personal/Notes
&apos;//[source] B      C	  D		   E	  F	        G          J       L		-
&apos;//
&apos;// Proposed (Version 3)
&apos;//	Exit.	produces a &quot;Pub-Territory&quot; formatted sheet with the following fields:
&apos;//        A    	B      C       D      E         F     G	  H		    I
&apos;//		 Address  Unit   Phone2	 Name1  Phone1  RU/Phone DNC  FL	Personal/Notes
&apos;//[source] A      B	   	F	   C     D	        G     J    L		-




&apos;// Calls.	BoldHeadings, ForceRecalc, SetTerrColWidths3,
&apos;//			SetSelection, MergeOwnerCells, MergeStreetsCells,
&apos;//			MergeSheetType, SetHdrSumFormula3, CenterUnitHstead3,
&apos;//			FreezeView
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	9/18/20.	wmk.	original code; adapted from EditToTerr
&apos;//	9/19/20.	wmk.	Merge.. calls; FreezeView call added
&apos;//	9/21/20.	wmk.	SetHdrSumFormula call added
&apos;//	9/30/20.	wmk.	PropUse column support
&apos;//	10/3/20.	wmk.	check all rows for DoNotCall
&apos;// 10/23/20.	wmk.	support Unit column replacing Resident1,
&apos;//						Resident2 column removed; dead code removed;
&apos;//						ForceRecalc call added
&apos;// 11/29/20.	wmk.	bug fix DO NOT CALL overwriting Unit field, moved
&apos;//						to Name1 field at new position from 10/23 mod
&apos;// 1/14/21.	wmk.	modified to center columns B and E and to 
&apos;//						freeze view at A6
&apos;// 2/14/21.	wmk.	columns rearranged with H in column A; header
&apos;//						consolidated and simplified.
&apos;// 2/15/21.	wmk.	fix bug where DONOTCALL not updated to use COL_D
&apos;//						so overwriting Unit.
&apos;//	2/19/21.	wmk.	rearrange columns; keep same as version 2, except
&apos;//						H column is now COL_C; stuff that was placed in
&apos;//						B2, B3 now back in A2, A3.
&apos;// 2/20/21.	wmk.	bug fix; column heading missing COL_B &quot;H&quot;; also
&apos;//						H - * is homestead missing *
&apos;// 3/3/21.		wmk.	bug fix; sheet date being lost, so set again
&apos;//						before exit in cell B2 instead of C2.
&apos;// 3/14/21.	wmk.	Add code to Align and wrap text and hightlight
&apos;//						address blocks.
&apos;//	3/16/21.	wmk.	add call to SetPubSheetName to preserve generated
&apos;//						PubTerr sheet name after renaming sheet.
&apos;// 4/7/21.		wmk.	bug fix where DONOTCALL not being set if string &quot;1&quot;
&apos;//						as opposed to numeric 1.
&apos;// 7/10/21.	wmk.	bug fix where zip code being deleted from header;
&apos;//						restore FreezeView call at end.
&apos;// 7/12/21.	wmk.	add inline code to rename sheet to _PubTerr and save;
&apos;//						sCongTerr column corrected.
&apos;//
&apos;//	Notes.
&apos;// New Method.
&apos;//		insert new column at COL_C
&apos;//		move all data from (new) COL_G to COL_C
&apos;//		remove COL_G
&apos;//		change column C heading to &apos;H&apos;
&apos;// Method.
&apos;//		Move header A1-H4 to B1
&apos;//		Remove column A
&apos;//		Change A heading to &quot;Address&quot;
&apos;//		col B heading to &quot;Name1&quot;
&apos;//		col C heading to &quot;Name2&quot;
&apos;//		col G heading to &quot;DoNotCall&quot;
&apos;//		move col I data to col G
&apos;//		col H heading to &quot;Foreign&quot;
&apos;//		move col K data to col H
&apos;//		remove columns I to N
&apos;//		col I heading to &quot;Personal Notes&quot;
&apos;//		H1 = &quot;Admin-TSExport formatted sheet&quot; 

&apos;//	constants.
const COL_PARCEL=0		&apos;// &quot;OwningParcel&quot; column index
const COL_A=0
const COL_B=1
const COL_C=2	
const COL_D=3
const COL_E=4
const COL_F=5
const COL_G=6			&apos;// column G index
const COL_H=7			&apos;// column H index
const COL_I=8			&apos;// column I index
const COL_J=9			&apos;// column J index
const COL_K=10			&apos;// column K index
const COL_L=11			&apos;// column L index (DoNotCall)
const COL_M=12			&apos;// column M index (RSO)
const COL_N=13			&apos;// column N index (Foreign)
const COL_O=14			&apos;// column O index
const COL_P=15			&apos;// column P index
const ROW_1=0
const ROW_2=1
const ROW_3=2
const ROW_4=3
const ROW_HEADING=4		&apos;// headings row index
const LJUST=1		&apos;// left-justify HoriJustify				&apos;// mod052020
const CJUST=2		&apos;// center HoriJustify						&apos;// mod052020
const RJUST=3		&apos;// right-justify HoriJustify				&apos;// mod052320
const MDYY=30		&apos;// &apos;M/D/YY&apos; format value

&apos;//	local variables.
Dim oDoc As Object
Dim oSheet As Object
Dim NewColumn As Object
dim oSel as Object
dim iSheetIx as integer
dim oRange as Object
dim lThisRow as long		&apos;// current row selected on sheet
dim oMrgRange	As Object	&apos;// merge range

dim oCell	As Object		&apos;// cell working on
dim i		As Integer		&apos;// loop index
dim sPropID	As String		&apos;// property ID
dim sSubTerr	As String	&apos;// subterritory
dim sCongTerr	As String	&apos;// cong terr ID
dim lRowCount	As Long		&apos;// row count of addresses
dim dDate		As Double	&apos;// date value
dim sCityStZip	As String	&apos;// concatenated City, State, Zip
dim sNotes		As String	&apos;// notes field
dim nCols		As Integer	&apos;// removal column count
dim sPhone2		As String	&apos;// col F content
dim sCity		As String	&apos;// City from B3
dim sZip		As String	&apos;// Zip from C3							&apos;// mod071021


	&apos;// code.
	ON ERROR GoTo ErrorHandler
	oDoc = ThisComponent
	oSel = oDoc.getCurrentSelection()
	oRange = oSel.RangeAddress
	iSheetIx = oRange.Sheet
	oSheet = oDoc.Sheets(iSheetIx)
	
	oCell =	oSheet.getCellByPosition(COL_B, ROW_2)
	lRowCount = oCell.Value

	&apos;// remove columns H, I since header already set
	oSheet.Columns.removeByIndex(COL_H, 2)

	&apos;// now remove new I (RSO)
	oSheet.Columns.removeByIndex(COL_I, 1)

	&apos;// now remove J - M
	oSheet.Columns.removeByIndex(COL_J, 4)
		
if false then		&apos;// REVERT to prior code...
   goto Skip1
endif	
	&apos;// move A1-H4 to B1 to allow col A removal
	&apos;//		move data from entire column E to B
	oMrgRange = oRange
	oMrgRange.StartColumn = COL_A
	oMrgRange.EndColumn = COL_H
	oMrgRange.StartRow = ROW_1
	oMrgRange.EndRow = ROW_4
dim oTarget as new com.sun.star.table.CellAddress
	oTarget.Sheet = oRange.Sheet
	oTarget.Column = COL_B
	oTarget.Row = ROW_1
	oSheet.moveRange(oTarget,oMrgRange)
Skip1:
	if false then	&apos;// REVERT to prior code..
	   goto Skip2
	endif
	
	&apos;// remove col A
	oSheet.Columns.removeByIndex(COL_A, 1)
Skip2:	

if true then
   GoTo Skip2a
endif
	&apos;// change col A heading to &quot;H&quot;
	oCell = oSheet.getCellByPosition(COL_A, ROW_HEADING)
	oCell.String = &quot;H&quot;
	oCell.HoriJustify = CJUST
	if false then
	   goto Skip3
	endif

Skip2a:
	&apos;//		col B heading to &quot;Unit&quot;
	oCell = oSheet.getCellByPosition(COL_B, ROW_HEADING)
	oCell.String = &quot;Unit&quot;
	oCell.HoriJustify = CJUST

	&apos;//		col C heading to &quot;Name1&quot;
	oCell = oSheet.getCellByPosition(COL_C, ROW_HEADING)
	oCell.String = &quot;Name(s)&quot;
	oCell.HoriJustify = CJUST
Skip3:

	&apos;// insert new column at C.
	oSheet.Columns.insertByIndex(COL_C, 1)
	oCell = oSheet.getCellByPosition(COL_C,ROW_HEADING)
	oCell.String = &quot;H&quot;
	oCell.HoriJustify = CJUST
		
	&apos;// revision 3 copy to C instead of A
     &apos;// copy G column data to column C; Phone2 is &quot;homestead&quot;.
	lThisRow = ROW_HEADING		&apos;// start 1 row behind
	for i = 0 to lRowCount-1
		lThisRow = lThisRow + 1
		oCell = oSheet.getCellByPosition(COL_F, lThisRow)
		sPhone2 = oCell.String
		oCell = oSheet.getCellByPosition(COL_C, lThisRow)
		oCell.String = sPhone2
	next i
    oSheet.Columns(COL_C).HoriJustify = CJUST
     &apos;// delete column F; F is now RefUSA data.
	oSheet.Columns.removeByIndex(COL_F, 1)
     
     
	&apos;// Set G4 &quot;DNC&quot;, H4 &quot;FL&quot;, set F4 to &quot;RefUSA&quot;
	oCell = oSheet.getCellByPosition(COL_G, ROW_HEADING-1)
	oCell.String = &quot;&quot;
	oCell = oSheet.getCellByPosition(COL_G, ROW_HEADING)
	oCell.String = &quot;DNC&quot;
	oCell = oSheet.getCellByPosition(COL_H, ROW_HEADING)
	oCell.String = &quot;FL&quot;
	oCell = oSheet.getCellByPosition(COL_F, ROW_HEADING)
	oCell.String = &quot;RefUSA&quot;
	oCell.HoriJustify = CJUST

	&apos;//		col I heading to &quot;Personal Notes&quot;
	oCell = oSheet.getCellByPosition(COL_I, ROW_HEADING)
	oCell.String = &quot;Personal Notes&quot;
	oCell.HoriJustify = CJUST

	&apos;//		H1 = &quot;Pub-Territory formatted sheet&quot; 
	oCell = oSheet.getCellByPosition(COL_H, ROW_1)
	oCell.String = &quot;Pub-Territory formatted sheet&quot;

	&apos;// check rows for DoNotCall flag and set Name1 accordingly
	lThisRow = ROW_HEADING		&apos;// start 1 row behind
	for i = 0 to lRowCount-1
		lThisRow = lThisRow + 1
		oCell = oSheet.getCellByPosition(COL_G, lThisRow)
&apos;		if StrComp(oCell.String, &quot;1&quot;) = 0 then
&apos;		if oCell.Value = 1 then
		if (oCell.Value = 1) OR (StrComp(oCell.String, &quot;1&quot;) = 0) then
			oCell = oSheet.getCellByPosition(COL_D, lThisRow)
			oCell.String = &quot;DO NOT CALL&quot;
		endif
	next i
	
	&apos;// tidy up header information.
	&apos;// revision 3 puts new data in A2,A3, not B2, B3
	oCell = oSheet.getCellByPosition(COL_A, ROW_2)
	oCell.String = &quot;&quot;
	SetHdrSumFormula3()		&apos;// A2 formula &quot;record count&quot; xxx
	
	&apos;// merge City and Zip at A3, B3.								&apos;// mod071021
	oCell = oSheet.getCellByPosition(COL_B, ROW_3)
	sCity = oCell.String
	oCell = oSheet.getCellByPosition(COL_D, ROW_3)					&apos;// mod071021
	sZip = oCell.String												&apos;// mod071021
&apos;	oCell.String = &quot;&quot;												&apos;// mod071021
	oCell = oSheet.getCellByPosition(COL_A, ROW_3)
	oCell.String = &quot;City: &quot; &amp; sCity
	oCell = oSheet.getCellByPosition(COL_B, ROW_3)					&apos;// mod071021
	ocell.String = sZip												&apos;// mod071021	

    &apos;// merge Territory/Subterritory at D1.
&apos;    oCell = oSheet.getCellByPosition(COL_D, 3)						&apos;// mod071221
    oCell = oSheet.getCellByPosition(COL_E, 3)						&apos;// mod071221
    sCongTerr = oCell.String
    oCell = oSheet.getCellByPosition(COL_B, 3)
    sSubTerr =trim( oCell.String)
    oCell = oSheet.getCellByPosition(COL_D, 0)
    oCell.String = &quot;Territory: &quot; &amp; sCongTerr
    oCell.HoriJustify = LJUST
    if len(sSubTerr) &gt; 0 then
    	oCell.String = oCell.String &amp; &quot;/&quot; &amp; sSubTerr
    endif
    
    &apos;// empty A4-I4 and merge for blank row.
    &apos;// clear A4, C4, D4.
    oCell = oSheet.getCellByPosition(COL_A,ROW_4)
	oCell.String = &quot;&quot;
    oCell = oSheet.getCellByPosition(COL_C,ROW_4)
	oCell.String = &quot;&quot;
    oCell = oSheet.getCellByPosition(COL_D,ROW_4)
	oCell.String = &quot;&quot;
	
dim document   as object
dim dispatcher as object
document   = ThisComponent.CurrentController.Frame
dispatcher = createUnoService(&quot;com.sun.star.frame.DispatchHelper&quot;)
	&apos;// select range A4:I4
	dim args1(0) as new com.sun.star.beans.PropertyValue
	args1(0).Name = &quot;ToPoint&quot;
	args1(0).Value = &quot;$A$4:$I$4&quot;
dim Array(0)  as new com.sun.star.beans.PropertyValue

	dispatcher.executeDispatch(document, &quot;.uno:GoToCell&quot;, &quot;&quot;, 0, args1())
    dispatcher.executeDispatch(document, &quot;.uno:ClearContents&quot;, &quot;&quot;, 0, Array())

    MergeRow4()

	&apos;// select range D2:H3
	dim args2(0) as new com.sun.star.beans.PropertyValue
	args2(0).Name = &quot;ToPoint&quot;
	args2(0).Value = &quot;$D$2:$H$3&quot;
	dispatcher.executeDispatch(document, &quot;.uno:GoToCell&quot;, &quot;&quot;, 0, args2())
    dispatcher.executeDispatch(document, &quot;.uno:ClearContents&quot;, &quot;&quot;, 0, Array())

&apos;	MergeHelpArea()		&apos;// there are merged cells, split them
	MergeHelpArea()		&apos;// now merge the cells
	oCell = oSheet.getCellByPosition(COL_D,ROW_2)
	oCell.String = &quot;H = * is homestead     DNC = do not call     FL = foreign language&quot; _
	   + CHR(13) + CHR(10) + &quot;ALL CAPS = SC county data     Mixed Case = RefUSA data&quot;

	&apos;// clear sheet type area.
	dim args3(0) as new com.sun.star.beans.PropertyValue
	args3(0).Name = &quot;ToPoint&quot;
	args3(0).Value = &quot;$E$1:$G$1&quot;
	dispatcher.executeDispatch(document, &quot;.uno:GoToCell&quot;, &quot;&quot;, 0, args3())
    dispatcher.executeDispatch(document, &quot;.uno:ClearContents&quot;, &quot;&quot;, 0, Array())
	dispatcher.executeDispatch(document, &quot;.uno:ToggleMergeCells&quot;, &quot;&quot;, 0, Array())
    
	args3(0).Name = &quot;ToPoint&quot;
	args3(0).Value = &quot;$H$1:$I$1&quot;
	dispatcher.executeDispatch(document, &quot;.uno:GoToCell&quot;, &quot;&quot;, 0, args3())
    dispatcher.executeDispatch(document, &quot;.uno:ClearContents&quot;, &quot;&quot;, 0, Array())
	dispatcher.executeDispatch(document, &quot;.uno:ToggleMergeCells&quot;, &quot;&quot;, 0, Array())

	args3(0).Name = &quot;ToPoint&quot;
	args3(0).Value = &quot;$E$1:$I$1&quot;
	dispatcher.executeDispatch(document, &quot;.uno:GoToCell&quot;, &quot;&quot;, 0, args3())
	dispatcher.executeDispatch(document, &quot;.uno:ToggleMergeCells&quot;, &quot;&quot;, 0, Array())
	dim args18(0) as new com.sun.star.beans.PropertyValue
	args18(0).Name = &quot;Bold&quot;
	args18(0).Value = true
	dispatcher.executeDispatch(document, &quot;.uno:Bold&quot;, &quot;&quot;, 0, args18())

	BoldHeadings()
	SetTerrColWidths3()
&apos;	MergeSheetType2()	&apos;// split cells
&apos;	MergeSheetType2()	&apos;// remerge
	oCell = oSheet.getCellByPosition(COL_E, ROW_1)
	oCell.String = &quot;PubTerr&quot;
	
	args18(0).Name = &quot;Bold&quot;
	args18(0).Value = true
	dispatcher.executeDispatch(document, &quot;.uno:Bold&quot;, &quot;&quot;, 0, args18())

	args3(0).Name = &quot;ToPoint&quot;
	args3(0).Value = &quot;$D$1:$D$1&quot;
	dispatcher.executeDispatch(document, &quot;.uno:GoToCell&quot;, &quot;&quot;, 0, args3())
	args18(0).Name = &quot;Bold&quot;
	args18(0).Value = true
	dispatcher.executeDispatch(document, &quot;.uno:Bold&quot;, &quot;&quot;, 0, args18())

	&apos;// rename the sheet while here...
dim sSheetName	As String
	sSheetName = &quot;Terr&quot; + sCongTerr + &quot;_PubTerr&quot;
dim args19(0) as new com.sun.star.beans.PropertyValue
args19(0).Name = &quot;Name&quot;
&apos;args1(0).Value = &quot;Terr102_Import&quot;
args19(0).Value = sSheetName

dispatcher.executeDispatch(document, &quot;.uno:RenameTable&quot;, &quot;&quot;, 0, args19())
&apos;$
dispatcher.executeDispatch(document, &quot;.uno:Save&quot;, &quot;&quot;, 0, Array())

	fsSetPubSheetName(sSheetName)					&apos;// mod071221
	&apos;// Set sheet date in B2.
	oCell = oSheet.getCellByPosition(COL_B, ROW_2)
	oCell.setValue(Now())					&apos;// time stamp
	oCell.Text.NumberFormat = MDYY
	oCell.HoriJustify = CJUST

	CenterUnitHstead3()	&apos;// center unit and &quot;homestead&quot; columns
	ForceRecalc()
	SelPubSheetArea()
	WrapLong()
	HltAddrBlocks3()
	FreezeView()		&apos;// freeze row/column scrolling at A6		&apos;// mod071021
dispatcher.executeDispatch(document, &quot;.uno:Save&quot;, &quot;&quot;, 0, Array())
document.Close(1)	

NormalExit:
	exit sub

ErrorHandler:
	msgbox(&quot;BridgeToTerr3 - unprocessed error.&quot;)
	GoTo NormalExit

end sub		&apos;// end BridgeToTerr3		7/12/21.	14:25
&apos;/**/

&apos;// BridgeToTerr3old.bas
&apos;//---------------------------------------------------------------
&apos;// BridgeToTerr3old - Admin-Bridge sheet to Pub-Territory sheet.
&apos;//		4/7/21.	wmk.	11:57
&apos;//---------------------------------------------------------------

public sub BridgeToTerr3old()

&apos;//	Usage.	macro call or
&apos;//			call BridgeToTerr3()
&apos;//
&apos;// Entry.
&apos;//	OwningParcel  UnitAddress  Unit	 Resident1 Phone1 Phone2 RUPhone
&apos;//			A			B		C		D		  E		 F		G	
&apos;//  SubTerr CongTerr DoNotCall RSO Foreign  RecordDate SitusAddress
&apos;//		H		I		   J     K     L		M			  N		
&apos;//  PropUse	DelPending
&apos;//		O  			P
&apos;//
&apos;//	Exit.	produces a &quot;Pub-Territory&quot; formatted sheet with the following fields:
&apos;//        A    	B      C       D      E     F    		G		   H		I
&apos;//		Address   Unit  Name1   Phone1  Phone2 RU/Phone	 DoNotCall	Foreign	Personal/Notes
&apos;//[source] B      C	  D		   E	  F	        G          J       L		-
&apos;//
&apos;// Proposed (Version 3)
&apos;//	Exit.	produces a &quot;Pub-Territory&quot; formatted sheet with the following fields:
&apos;//        A    	B      C       D      E         F     G	  H		    I
&apos;//		 Address  Unit   Phone2	 Name1  Phone1  RU/Phone DNC  FL	Personal/Notes
&apos;//[source] A      B	   	F	   C     D	        G     J    L		-




&apos;// Calls.	BoldHeadings, ForceRecalc, SetTerrColWidths3,
&apos;//			SetSelection, MergeOwnerCells, MergeStreetsCells,
&apos;//			MergeSheetType, SetHdrSumFormula3, CenterUnitHstead3,
&apos;//			FreezeView
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	9/18/20.	wmk.	original code; adapted from EditToTerr
&apos;//	9/19/20.	wmk.	Merge.. calls; FreezeView call added
&apos;//	9/21/20.	wmk.	SetHdrSumFormula call added
&apos;//	9/30/20.	wmk.	PropUse column support
&apos;//	10/3/20.	wmk.	check all rows for DoNotCall
&apos;// 10/23/20.	wmk.	support Unit column replacing Resident1,
&apos;//						Resident2 column removed; dead code removed;
&apos;//						ForceRecalc call added
&apos;// 11/29/20.	wmk.	bug fix DO NOT CALL overwriting Unit field, moved
&apos;//						to Name1 field at new position from 10/23 mod
&apos;// 1/14/21.	wmk.	modified to center columns B and E and to 
&apos;//						freeze view at A6
&apos;// 2/14/21.	wmk.	columns rearranged with H in column A; header
&apos;//						consolidated and simplified.
&apos;// 2/15/21.	wmk.	fix bug where DONOTCALL not updated to use COL_D
&apos;//						so overwriting Unit.
&apos;//	2/19/21.	wmk.	rearrange columns; keep same as version 2, except
&apos;//						H column is now COL_C; stuff that was placed in
&apos;//						B2, B3 now back in A2, A3.
&apos;// 2/20/21.	wmk.	bug fix; column heading missing COL_B &quot;H&quot;; also
&apos;//						H - * is homestead missing *
&apos;// 3/3/21.		wmk.	bug fix; sheet date being lost, so set again
&apos;//						before exit in cell B2 instead of C2.
&apos;// 3/14/21.	wmk.	Add code to Align and wrap text and hightlight
&apos;//						address blocks.
&apos;//	3/16/21.	wmk.	add call to SetPubSheetName to preserve generated
&apos;//						PubTerr sheet name after renaming sheet.
&apos;// 4/7/21.		wmk.	bug fix where DONOTCALL not being set if string &quot;1&quot;
&apos;//						as opposed to numeric 1.
&apos;//	Notes.
&apos;// New Method.
&apos;//		insert new column at COL_C
&apos;//		move all data from (new) COL_G to COL_C
&apos;//		remove COL_G
&apos;//		change column C heading to &apos;H&apos;
&apos;// Method.
&apos;//		Move header A1-H4 to B1
&apos;//		Remove column A
&apos;//		Change A heading to &quot;Address&quot;
&apos;//		col B heading to &quot;Name1&quot;
&apos;//		col C heading to &quot;Name2&quot;
&apos;//		col G heading to &quot;DoNotCall&quot;
&apos;//		move col I data to col G
&apos;//		col H heading to &quot;Foreign&quot;
&apos;//		move col K data to col H
&apos;//		remove columns I to N
&apos;//		col I heading to &quot;Personal Notes&quot;
&apos;//		H1 = &quot;Admin-TSExport formatted sheet&quot; 

&apos;//	constants.
const COL_PARCEL=0		&apos;// &quot;OwningParcel&quot; column index
const COL_A=0
const COL_B=1
const COL_C=2	
const COL_D=3
const COL_E=4
const COL_F=5
const COL_G=6			&apos;// column G index
const COL_H=7			&apos;// column H index
const COL_I=8			&apos;// column I index
const COL_J=9			&apos;// column J index
const COL_K=10			&apos;// column K index
const COL_L=11			&apos;// column L index (DoNotCall)
const COL_M=12			&apos;// column M index (RSO)
const COL_N=13			&apos;// column N index (Foreign)
const COL_O=14			&apos;// column O index
const COL_P=15			&apos;// column P index
const ROW_1=0
const ROW_2=1
const ROW_3=2
const ROW_4=3
const ROW_HEADING=4		&apos;// headings row index
const LJUST=1		&apos;// left-justify HoriJustify				&apos;// mod052020
const CJUST=2		&apos;// center HoriJustify						&apos;// mod052020
const RJUST=3		&apos;// right-justify HoriJustify				&apos;// mod052320
const MDYY=30		&apos;// &apos;M/D/YY&apos; format value

&apos;//	local variables.
Dim oDoc As Object
Dim oSheet As Object
Dim NewColumn As Object
dim oSel as Object
dim iSheetIx as integer
dim oRange as Object
dim lThisRow as long		&apos;// current row selected on sheet
dim oMrgRange	As Object	&apos;// merge range

dim oCell	As Object		&apos;// cell working on
dim i		As Integer		&apos;// loop index
dim sPropID	As String		&apos;// property ID
dim sSubTerr	As String	&apos;// subterritory
dim sCongTerr	As String	&apos;// cong terr ID
dim lRowCount	As Long		&apos;// row count of addresses
dim dDate		As Double	&apos;// date value
dim sCityStZip	As String	&apos;// concatenated City, State, Zip
dim sNotes		As String	&apos;// notes field
dim nCols		As Integer	&apos;// removal column count
dim sPhone2		As String	&apos;// col F content
dim sCity		As String	&apos;// City from B3


	&apos;// code.
	ON ERROR GoTo ErrorHandler
	oDoc = ThisComponent
	oSel = oDoc.getCurrentSelection()
	oRange = oSel.RangeAddress
	iSheetIx = oRange.Sheet
	oSheet = oDoc.Sheets(iSheetIx)
	
	oCell =	oSheet.getCellByPosition(COL_B, ROW_2)
	lRowCount = oCell.Value

	&apos;// remove columns H, I since header already set
	oSheet.Columns.removeByIndex(COL_H, 2)

	&apos;// now remove new I (RSO)
	oSheet.Columns.removeByIndex(COL_I, 1)

	&apos;// now remove J - M
	oSheet.Columns.removeByIndex(COL_J, 4)
		
if false then		&apos;// REVERT to prior code...
   goto Skip1
endif	
	&apos;// move A1-H4 to B1 to allow col A removal
	&apos;//		move data from entire column E to B
	oMrgRange = oRange
	oMrgRange.StartColumn = COL_A
	oMrgRange.EndColumn = COL_H
	oMrgRange.StartRow = ROW_1
	oMrgRange.EndRow = ROW_4
dim oTarget as new com.sun.star.table.CellAddress
	oTarget.Sheet = oRange.Sheet
	oTarget.Column = COL_B
	oTarget.Row = ROW_1
	oSheet.moveRange(oTarget,oMrgRange)
Skip1:
	if false then	&apos;// REVERT to prior code..
	   goto Skip2
	endif
	
	&apos;// remove col A
	oSheet.Columns.removeByIndex(COL_A, 1)
Skip2:	

if true then
   GoTo Skip2a
endif
	&apos;// change col A heading to &quot;H&quot;
	oCell = oSheet.getCellByPosition(COL_A, ROW_HEADING)
	oCell.String = &quot;H&quot;
	oCell.HoriJustify = CJUST
	if false then
	   goto Skip3
	endif

Skip2a:
	&apos;//		col B heading to &quot;Unit&quot;
	oCell = oSheet.getCellByPosition(COL_B, ROW_HEADING)
	oCell.String = &quot;Unit&quot;
	oCell.HoriJustify = CJUST

	&apos;//		col C heading to &quot;Name1&quot;
	oCell = oSheet.getCellByPosition(COL_C, ROW_HEADING)
	oCell.String = &quot;Name(s)&quot;
	oCell.HoriJustify = CJUST
Skip3:

	&apos;// insert new column at C.
	oSheet.Columns.insertByIndex(COL_C, 1)
	oCell = oSheet.getCellByPosition(COL_C,ROW_HEADING)
	oCell.String = &quot;H&quot;
	oCell.HoriJustify = CJUST
		
	&apos;// revision 3 copy to C instead of A
     &apos;// copy G column data to column C; Phone2 is &quot;homestead&quot;.
	lThisRow = ROW_HEADING		&apos;// start 1 row behind
	for i = 0 to lRowCount-1
		lThisRow = lThisRow + 1
		oCell = oSheet.getCellByPosition(COL_F, lThisRow)
		sPhone2 = oCell.String
		oCell = oSheet.getCellByPosition(COL_C, lThisRow)
		oCell.String = sPhone2
	next i
    oSheet.Columns(COL_C).HoriJustify = CJUST
     &apos;// delete column F; F is now RefUSA data.
	oSheet.Columns.removeByIndex(COL_F, 1)
     
     
	&apos;// Set G4 &quot;DNC&quot;, H4 &quot;FL&quot;, set F4 to &quot;RefUSA&quot;
	oCell = oSheet.getCellByPosition(COL_G, ROW_HEADING-1)
	oCell.String = &quot;&quot;
	oCell = oSheet.getCellByPosition(COL_G, ROW_HEADING)
	oCell.String = &quot;DNC&quot;
	oCell = oSheet.getCellByPosition(COL_H, ROW_HEADING)
	oCell.String = &quot;FL&quot;
	oCell = oSheet.getCellByPosition(COL_F, ROW_HEADING)
	oCell.String = &quot;RefUSA&quot;
	oCell.HoriJustify = CJUST

	&apos;//		col I heading to &quot;Personal Notes&quot;
	oCell = oSheet.getCellByPosition(COL_I, ROW_HEADING)
	oCell.String = &quot;Personal Notes&quot;
	oCell.HoriJustify = CJUST

	&apos;//		H1 = &quot;Pub-Territory formatted sheet&quot; 
	oCell = oSheet.getCellByPosition(COL_H, ROW_1)
	oCell.String = &quot;Pub-Territory formatted sheet&quot;

	&apos;// check rows for DoNotCall flag and set Name1 accordingly
	lThisRow = ROW_HEADING		&apos;// start 1 row behind
	for i = 0 to lRowCount-1
		lThisRow = lThisRow + 1
		oCell = oSheet.getCellByPosition(COL_G, lThisRow)
&apos;		if StrComp(oCell.String, &quot;1&quot;) = 0 then
&apos;		if oCell.Value = 1 then
		if (oCell.Value = 1) OR (StrComp(oCell.String, &quot;1&quot;) = 0) then
			oCell = oSheet.getCellByPosition(COL_D, lThisRow)
			oCell.String = &quot;DO NOT CALL&quot;
		endif
	next i
	
	&apos;// tidy up header information.
	&apos;// revision 3 puts new data in A2,A3, not B2, B3
	oCell = oSheet.getCellByPosition(COL_A, ROW_2)
	oCell.String = &quot;&quot;
	SetHdrSumFormula3()		&apos;// A2 formula &quot;record count&quot; xxx
	
	&apos;// merge City and State at A3.
	oCell = oSheet.getCellByPosition(COL_B, ROW_3)
	sCity = oCell.String
	oCell.String = &quot;&quot;
	oCell = oSheet.getCellByPosition(COL_A, ROW_3)
	oCell.String = &quot;City: &quot; &amp; sCity	

    &apos;// merge Territory/Subterritory at D1.
    oCell = oSheet.getCellByPosition(COL_D, 3)
    sCongTerr = oCell.String
    oCell = oSheet.getCellByPosition(COL_B, 3)
    sSubTerr =trim( oCell.String)
    oCell = oSheet.getCellByPosition(COL_D, 0)
    oCell.String = &quot;Territory: &quot; &amp; sCongTerr
    oCell.HoriJustify = LJUST
    if len(sSubTerr) &gt; 0 then
    	oCell.String = oCell.String &amp; &quot;/&quot; &amp; sSubTerr
    endif
    
    &apos;// empty A4-I4 and merge for blank row.
    &apos;// clear A4, C4, D4.
    oCell = oSheet.getCellByPosition(COL_A,ROW_4)
	oCell.String = &quot;&quot;
    oCell = oSheet.getCellByPosition(COL_C,ROW_4)
	oCell.String = &quot;&quot;
    oCell = oSheet.getCellByPosition(COL_D,ROW_4)
	oCell.String = &quot;&quot;
	
dim document   as object
dim dispatcher as object
document   = ThisComponent.CurrentController.Frame
dispatcher = createUnoService(&quot;com.sun.star.frame.DispatchHelper&quot;)
	&apos;// select range A4:I4
	dim args1(0) as new com.sun.star.beans.PropertyValue
	args1(0).Name = &quot;ToPoint&quot;
	args1(0).Value = &quot;$A$4:$I$4&quot;
dim Array(0)  as new com.sun.star.beans.PropertyValue

	dispatcher.executeDispatch(document, &quot;.uno:GoToCell&quot;, &quot;&quot;, 0, args1())
    dispatcher.executeDispatch(document, &quot;.uno:ClearContents&quot;, &quot;&quot;, 0, Array())

    MergeRow4()

	&apos;// select range D2:H3
	dim args2(0) as new com.sun.star.beans.PropertyValue
	args2(0).Name = &quot;ToPoint&quot;
	args2(0).Value = &quot;$D$2:$H$3&quot;
	dispatcher.executeDispatch(document, &quot;.uno:GoToCell&quot;, &quot;&quot;, 0, args2())
    dispatcher.executeDispatch(document, &quot;.uno:ClearContents&quot;, &quot;&quot;, 0, Array())

&apos;	MergeHelpArea()		&apos;// there are merged cells, split them
	MergeHelpArea()		&apos;// now merge the cells
	oCell = oSheet.getCellByPosition(COL_D,ROW_2)
	oCell.String = &quot;H = * is homestead     DNC = do not call     FL = foreign language&quot; _
	   + CHR(13) + CHR(10) + &quot;ALL CAPS = SC county data     Mixed Case = RefUSA data&quot;

	&apos;// clear sheet type area.
	dim args3(0) as new com.sun.star.beans.PropertyValue
	args3(0).Name = &quot;ToPoint&quot;
	args3(0).Value = &quot;$E$1:$G$1&quot;
	dispatcher.executeDispatch(document, &quot;.uno:GoToCell&quot;, &quot;&quot;, 0, args3())
    dispatcher.executeDispatch(document, &quot;.uno:ClearContents&quot;, &quot;&quot;, 0, Array())
	dispatcher.executeDispatch(document, &quot;.uno:ToggleMergeCells&quot;, &quot;&quot;, 0, Array())
    
	args3(0).Name = &quot;ToPoint&quot;
	args3(0).Value = &quot;$H$1:$I$1&quot;
	dispatcher.executeDispatch(document, &quot;.uno:GoToCell&quot;, &quot;&quot;, 0, args3())
    dispatcher.executeDispatch(document, &quot;.uno:ClearContents&quot;, &quot;&quot;, 0, Array())
	dispatcher.executeDispatch(document, &quot;.uno:ToggleMergeCells&quot;, &quot;&quot;, 0, Array())

	args3(0).Name = &quot;ToPoint&quot;
	args3(0).Value = &quot;$E$1:$I$1&quot;
	dispatcher.executeDispatch(document, &quot;.uno:GoToCell&quot;, &quot;&quot;, 0, args3())
	dispatcher.executeDispatch(document, &quot;.uno:ToggleMergeCells&quot;, &quot;&quot;, 0, Array())
	dim args18(0) as new com.sun.star.beans.PropertyValue
	args18(0).Name = &quot;Bold&quot;
	args18(0).Value = true
	dispatcher.executeDispatch(document, &quot;.uno:Bold&quot;, &quot;&quot;, 0, args18())

	BoldHeadings()
	SetTerrColWidths3()
&apos;	MergeSheetType2()	&apos;// split cells
&apos;	MergeSheetType2()	&apos;// remerge
	oCell = oSheet.getCellByPosition(COL_E, ROW_1)
	oCell.String = &quot;PubTerr&quot;
	
	args18(0).Name = &quot;Bold&quot;
	args18(0).Value = true
	dispatcher.executeDispatch(document, &quot;.uno:Bold&quot;, &quot;&quot;, 0, args18())

	args3(0).Name = &quot;ToPoint&quot;
	args3(0).Value = &quot;$D$1:$D$1&quot;
	dispatcher.executeDispatch(document, &quot;.uno:GoToCell&quot;, &quot;&quot;, 0, args3())
	args18(0).Name = &quot;Bold&quot;
	args18(0).Value = true
	dispatcher.executeDispatch(document, &quot;.uno:Bold&quot;, &quot;&quot;, 0, args18())

	&apos;// Set sheet date in B2.
	oCell = oSheet.getCellByPosition(COL_B, ROW_2)
	oCell.setValue(Now())					&apos;// time stamp
	oCell.Text.NumberFormat = MDYY
	oCell.HoriJustify = CJUST

	CenterUnitHstead3()	&apos;// center unit and &quot;homestead&quot; columns
&apos;	FreezeView()		&apos;// freeze row/column scrolling at A6
	ForceRecalc()
	SelPubSheetArea()
	WrapLong()
	HltAddrBlocks3()
	

NormalExit:
	exit sub

ErrorHandler:
	msgbox(&quot;BridgeToTerr3 - unprocessed error.&quot;)
	GoTo NormalExit

end sub		&apos;// end BridgeToTerr3		4/7/21.		11:57
&apos;/**/

&apos;// BridgeToTSx.bas
&apos;//---------------------------------------------------------------
&apos;// BridgeToTSx - Admin-Bridge sheet to TSExport formatted sheet.
&apos;//		9/13/20.	wmk.	07:45
&apos;//---------------------------------------------------------------

public sub BridgeToTSx()

&apos;//	Usage.	macro call or
&apos;//			call BridgeToTSx()
&apos;//
&apos;// Entry.
&apos;//	OwningParcel  UnitAddress  Resident1 Resident2 Phone1 Phone2 RUPhone SubTerr CongTerr DoNotCall RSO Foreign  RecordDate
&apos;//			A			B			C		D		  E		 F		G		H		I		   J     K     L		M
&apos;//
&apos;//	Exit.	produces an &quot;Admin-TSExport&quot; formatted sheet with the following fields:
&apos;//      A    B        C            D                E           F
&apos;//		id  name  phone_number street_address  city_state_zip  notes
&apos;//			  C        E			B				B3&apos;fl&apos;C3	L, M, N (foreign)
&apos;//
&apos;// Calls. fsConcatCityToZip
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	9/7/20.		wmk.	original code
&apos;//	9/13/20.	wmk.	name change from BridgeToTerr to BridgeToTSx
&apos;//
&apos;//	Notes.
&apos;// MultiMail/SplitProps table fields.
&apos;//		9/7/20.
&apos;//0|OwningParcel|TEXT|1||0
&apos;//1|UnitAddress|TEXT|1||0
&apos;//2|Resident1|TEXT|0||0
&apos;//3|Resident2|TEXT|0||0
&apos;//4|Phone1|TEXT|0||0
&apos;//5|Phone2|TEXT|0||0
&apos;//6|RefUSA-Phone|TEXT|0||0
&apos;//7|SubTerritory|TEXT|0||0
&apos;//8|CongTerrID|TEXT|0||0
&apos;//9|DoNotCall|INTEGER|0|0|0
&apos;//10|RSO|INTEGER|0|0|0
&apos;//11|Foreign|INTEGER|0|0|0
&apos;//12|RecordDate|REAL|0|0|0
&apos;//13|DeletePending|INTEGER|0|0|0
&apos;// Method.
&apos;//		Change colA heading to &quot;id&quot;
&apos;//     Insert 2 columns at B
&apos;//		move data from entire column E to B
&apos;//		concatenate City State Zip B3 + &quot;FL&quot; + C3
&apos;//		for each entry
&apos;//       store concatenated city,state,zip in col E
&apos;//       If RefUSAPhone &lt;&gt; &quot;Not Available&quot; and &lt;&gt; &quot;&quot;
&apos;//			move column I to column C
&apos;//       else
&apos;//         move column G to column C
&apos;//		  endif	end phone conditional
&apos;//		  for each entry set col A = &quot;&quot;
&apos;//       for each entry if DoNotCall &quot;Do NotCall&quot; into F
&apos;//       for each entry if RSO &quot;RSO&quot; into F
&apos;//       for each entry if Foreign &quot;Foreign&quot; into F
&apos;//	    next (for)
&apos;//		remove columns G - M
&apos;//		H1 = &quot;Admin-TSExport formatted sheet&quot; 

&apos;//	constants.
const COL_PARCEL=0		&apos;// &quot;OwningParcel&quot; column index
const COL_A=0
const COL_B=1
const COL_C=2	
const COL_D=3
const COL_E=4
const COL_F=5
const COL_G=6			&apos;// column G index
const COL_H=7			&apos;// column H index
const COL_I=8			&apos;// column I index
const COL_J=9			&apos;// column J index
const COL_K=10			&apos;// column K index
const COL_L=11			&apos;// column L index (DoNotCall)
const COL_M=12			&apos;// column M index (RSO)
const COL_N=13			&apos;// column N index (Foreign)
const ROW_1=0
const ROW_2=1
const ROW_3=2
const ROW_4=3
const ROW_HEADING=4		&apos;// headings row index
const LJUST=1		&apos;// left-justify HoriJustify				&apos;// mod052020
const CJUST=2		&apos;// center HoriJustify						&apos;// mod052020
const RJUST=3		&apos;// right-justify HoriJustify				&apos;// mod052320
const MDYY=30		&apos;// &apos;M/D/YY&apos; format value

&apos;//	local variables.
Dim oDoc As Object
Dim oSheet As Object
Dim NewColumn As Object
dim oSel as Object
dim iSheetIx as integer
dim oRange as Object
dim lThisRow as long		&apos;// current row selected on sheet
dim oMrgRange	As Object	&apos;// merge range

dim oCell	As Object		&apos;// cell working on
dim i		As Integer		&apos;// loop index
dim sPropID	As String		&apos;// property ID
dim sSubTerr	As String	&apos;// subterritory
dim sCongTerr	As String	&apos;// cong terr ID
dim lRowCount	As Long		&apos;// row count of addresses
dim dDate		As Double	&apos;// date value
dim sCityStZip	As String	&apos;// concatenated City, State, Zip
dim sNotes		As String	&apos;// notes field


	&apos;// code.
	ON ERROR GoTo ErrorHandler
	oDoc = ThisComponent
	oSel = oDoc.getCurrentSelection()
	oRange = oSel.RangeAddress
	iSheetIx = oRange.Sheet
	oSheet = oDoc.Sheets(iSheetIx)
	
	oCell =	oSheet.getCellByPosition(COL_B, ROW_2)
	lRowCount = oCell.Value

	&apos;//		concatenate City State Zip B3 + &quot;FL&quot; + C3
	sCityStZip = fsConcatCityToZip()

	&apos;//		Change col A heading to &quot;id&quot;
	oCell = oSheet.getCellByPosition(COL_A, ROW_HEADING)
	oCell.String = &quot;id&quot;
	oCell.HoriJustify = CJUST

	&apos;//     Insert 2 columns at B
	oSheet.Columns.insertByIndex(COL_B,2)

	&apos;//		move data from entire column E to B
	oMrgRange = oRange
	oMrgRange.StartColumn = COL_E
	oMrgRange.EndColumn = COL_E
	oMrgRange.StartRow = ROW_HEADING + 1
	oMrgRange.EndRow = ROW_HEADING + lRowCount -1
dim oTarget as new com.sun.star.table.CellAddress
	oTarget.Sheet = oRange.Sheet
	oTarget.Column = COL_B
	oTarget.Row = ROW_HEADING + 1
	oSheet.moveRange(oTarget,oMrgRange)

	lThisRow = ROW_HEADING
	for i = 0 to lRowCount-1
		lThisRow = lThisRow + 1
		
		&apos;// store city, state, zip
		oCell = oSheet.getCellByPosition(COL_E, lThisRow)
		oCell.String = sCityStZip
&apos;//		  for each entry set col A = &quot;&quot;
		oCell = oSheet.getCellByPosition(COL_A, lThisRow)
		oCell.String = &quot;&quot;
&apos;//       for each entry if DoNotCall (J) &quot;Do NotCall&quot; into F
        sNotes = &quot;&quot;
		oCell = oSheet.getCellByPosition(COL_L, lThisRow)
		if len(trim(oCell.String)) &gt; 0 then
			sNotes = &quot;DoNotCall &quot; 
		endif
		
&apos;//       for each entry if RSO (K) &quot;RSO&quot; into F
		oCell = oSheet.getCellByPosition(COL_M, lThisRow)
		if len(trim(oCell.String)) &gt; 0 then
			sNotes = sNotes + &quot;RSO &quot;
		endif

&apos;//       for each entry if Foreign (L) &quot;Foreign&quot; into F
		oCell = oSheet.getCellByPosition(COL_N, lThisRow)
		if len(trim(oCell.String)) &gt; 0 then
			sNotes = sNotes + &quot;Foreign&quot;
		endif
		oCell = oSheet.getCellByPosition(COL_F, lThisRow)
		oCell.String = sNotes
		
	next i	&apos;// end loop setting row data

NormalExit:
	exit sub

ErrorHandler:
	msgbox(&quot;BridgeToTSx - unprocessed error.&quot;)
	GoTo NormalExit

end sub		&apos;// end BridgeToTSx		9/13/20
&apos;/**/

&apos;// CloseWindow.bas
&apos;//---------------------------------------------------------------
&apos;// CloseWindow - Close current window.
&apos;//		10/16/20.	wmk.
&apos;//---------------------------------------------------------------

public sub CloseWindow()

&apos;//	Usage.	macro call or
&apos;//			call CloseWindow()
&apos;//
&apos;// Entry.	user in workbook wishes to be closed
&apos;//
&apos;//	Exit.	user reverts to next window as determined by UNO sequencing
&apos;//
&apos;// Calls.
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	10/16/20.		wmk.	original code
&apos;//
&apos;//	Notes.

&apos;//	constants.

&apos;//	local variables.

	&apos;// code.
	ON ERROR GOTO ErrorHandler
	ThisComponent.close(true)
	
NormalExit:
	exit sub
	
ErrorHandler:
	msgbox(&quot;CloseWindow - unprocessed error&quot;)
	GoTo NormalExit
	
end sub		&apos;// end CloseWindow		10/16/20
&apos;/**/

&apos;// ConcatAddressM.bas
&apos;//---------------------------------------------------------------
&apos;// ConcatAddressM - Concatenate Number, Predirectional, Street,
&apos;//	  Street Suffix, Unit into single address field.
&apos;//		10/12/20.	wmk.	11:00
&apos;//---------------------------------------------------------------

public sub ConcatAddressM()

&apos;//	Usage.	macro call or
&apos;//			call ConcatAddressM()
&apos;//
&apos;// Entry.	user has selected row(s) in which to concatenate address fields
&apos;//			each row should have an empty column to its right in which
&apos;//			to place the concatenated address information
&apos;//
&apos;//	Exit.	concatenated address is in form:
&apos;//			&lt;number&gt;&lt;b&gt;&lt;b&gt;&lt;b&gt;&lt;Predir&gt;&lt;b&gt;&lt;Street&gt;&lt;b&gt;&lt;Street Suffix&gt;&lt;b_35&gt;&lt;Unit&gt;
&apos;//			where &lt;b&gt; is a single space
&apos;//			&lt;b_35&gt; is blank field ending in column 35
&apos;//			also trim all source fields to eliminate house numbers
&apos;//			which were imported as 10-character, right-justified,
&apos;//			space-filled fields
&apos;//
&apos;// Calls.
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	8/21/20.	wmk.	original code; adapted from GenHLinkM
&apos;//	8/22/20.	wmk.	modified to replace all address fields with
&apos;//						trimmed strings
&apos;//	8/28/20.	wmk.	source and target columns advanced by 1 to acccount for
&apos;//						new &quot;Found Name&quot; column in standardized
&apos;//						territory worksheet
&apos;//	9/3/20.		wmk.	shift concatentated address to uppercase for consistency
&apos;//						with addresses imported from SC-PA
&apos;//	9/15/20.	wmk.	modified to insert 3 spaces after number token
&apos;//						to match SCPA download of addresses; if there is
&apos;//						a &quot;pre-direction&quot; token, it is now moved to the
&apos;//						&quot;post-direction&quot; to make directional entries consistent
&apos;//						with RefUSA download data
&apos;//	9/16/20.	wmk.	fix bug introduced with 9/15 modifications where
&apos;//						full address being stored in wrong column
&apos;//	9/18/20.	wmk.	mod to space out unit 17 spaces from end of street;
&apos;//						dead code deleted
&apos;//	10/8/20.	wmk.	mod to space out unit 16 instead of 17 spaces from
&apos;//						end of street
&apos;// 10/12/20.	wmk.	mod to space out unit to always start in col 36
&apos;//
&apos;//	Notes. Column indexes for the address fields are for import spreadsheet
&apos;// taken from ReferenceUSA .xls format spreadsheet

&apos;//	constants.
const COL_NUMBER=3			&apos;// house number
const COL_PREDIR=4			&apos;// street pre-direction
const COL_STREET=5			&apos;// street name
const COL_SUFFIX=6			&apos;// street suffix (e.g. Ave)
const COL_POSTDIR=7			&apos;// street post direction
const COL_UNIT=8			&apos;// unit/apt #
const COL_FULLADDR=9		&apos;// full concatenated address
const YELLOW=16776960		&apos;// decimal value of YELLOW color
const BLANKS_30=&quot;                              &quot;	&apos;// exactly 30 spaces
const BLANKS_17=&quot;                 &quot;	&apos;// exactly 17 spaces
const BLANKS_16=&quot;                &quot;	&apos;// exactly 16 spaces
const BLANKS_3=&quot;   &quot;				&apos;// exactly 3 spaces
const BLANKS_2=&quot;  &quot;					&apos;// exactly 2 spaces

&apos;//	local variables.
Dim oDoc As Object
Dim oSheet As Object
Dim NewColumn As Object
dim oSel as Object
dim iSheetIx as integer
dim oRange as Object
dim lThisRow as long		&apos;// current row selected on sheet

&apos;// processing variables.
dim nRowsProcessed As Integer	&apos;// count of rows processed
dim nRowCount		As Integer	&apos;// # rows to process
dim sAddress As String		&apos;// address field from current row
dim sPrefix	As String		&apos;// url generated from sAddress
dim sStreet	As String		&apos;// HYPERTEXT link to store
dim sSuffix As String		&apos;// 
dim sUnit	As String	
dim i		As Integer		&apos;// loop counter
dim nBlanks		As Integer		&apos;// space count to insert to fill 35 columns

&apos;// XCell sheet objects
dim oCellAddr as object		&apos;// address field
dim oCellHLink as object	&apos;// hyperlink field
dim oCity 	As object		&apos;// city for sheet
dim sCity	As String		&apos;// city from sheet
dim sPreDir	As String		&apos;// prefix direction
dim sPostDir	As String		&apos;// post-direction token

&apos;// code.
	ON ERROR GOTO ErrorHandler
	oDoc = ThisComponent
	oSel = oDoc.getCurrentSelection()
	oRange = oSel.RangeAddress
	iSheetIx = oRange.Sheet
	oSheet = oDoc.Sheets(iSheetIx)
	nRowsProcessed = 0		&apos;// clear processed count

	&apos;// set row processing from oRange information
	lThisRow = oRange.StartRow - 1		&apos;// start at -1 since increment first
	nRowCount = oRange.EndRow - lThisRow	&apos;// set row count to process
	for i = 1 to nRowCount
		lThisRow = lThisRow + 1		&apos;// advance current row
		oCellAddr = oSheet.getCellByPosition(COL_NUMBER, lThisRow)
		oCellAddr.String = trim(oCellAddr.String)		
		sAddress = oCellAddr.String						&apos;// set number token text
		oCellAddr.String = trim(oCellAddr.String)		&apos;// set cell address text
		oCellAddr = oSheet.getCellByPosition(COL_PREDIR, lThisRow)
		sPreDir = oCellAddr.String				&apos;// save pre-direction for post..
		oCellAddr = oSheet.getCellByPosition(COL_STREET, lThisRow)
		oCellAddr.String = trim(oCellAddr.String)		&apos;// set street token
		sAddress = sAddress + BLANKS_3 + oCellAddr.String	&apos;// 3 spaces past number
		oCellAddr = oSheet.getCellByPosition(COL_SUFFIX, lThisRow)
		oCellAddr.String = trim(oCellAddr.String)
		sAddress = sAddress + &quot; &quot; + oCellAddr.String	&apos;// set Ave, St, etc
		oCellAddr = oSheet.getCellByPosition(COL_POSTDIR, lThisRow)
&apos;		oCellAddr.String = trim(oCellAddr.String)		&apos;// get post-direction
		sPostDir = trim(oCellAddr.String)		&apos;// get post-direction
		if len(sPreDir) &gt; 0 then
			sAddress = sAddress + &quot; &quot; + sPreDir			&apos;// set non-empty pre-direction
		endif
	    if len(sPostDir) &gt; 0 then
			sAddress = sAddress + &quot; &quot; + sPostDir	&apos;// set post-direction
	    endif	&apos;// end post-direction present conditional
		oCellAddr = oSheet.getCellByPosition(COL_UNIT, lThisRow)
		sUnit = trim(oCellAddr.String)
		&apos;// add unit text spaced out to col 36
		if len(sUnit) &gt; 0 then
            nBlanks = 35 - len(sAddress)		&apos;// get space count
            sAddress = sAddress + left(BLANKS_30, nBlanks) + sUnit
&apos;			sAddress = sAddress + BLANKS_16 + oCellAddr.String	&apos;// add unit text
		endif
	
		oCellAddr = oSheet.getCellByPosition(COL_FULLADDR, lThisRow)
		sAddress = trim(sAddress)
		if len(sAddress) = 0 then
			oCellAddr.String = &quot;&quot;
			oCellAddr.CellBackColor = YELLOW
			msgbox(&quot;At row &quot; + lThisRow + &quot;... empty address - skipped&quot;)
		else
			oCellAddr.String = UCase(sAddress)
		endif	&apos;// end empty address fields conditional
		
Nextfor:
		nRowsProcessed = nRowsProcessed + 1
	next i		&apos;// advance to next row
	
NormalExit:
	msgbox(&quot;ConcatAddressM complete. &quot; + nRowsProcessed + &quot; rows processed.&quot;)
	exit sub
	
ErrorHandler:	
	msgbox(&quot;ConcatAddressM - unprocessed error.&quot;)
	GoTo NormalExit

end sub		&apos;// end ConcatAddressM	10/12/20.
&apos;/**/

&apos;// ConcatFirstLastM.bas
&apos;//---------------------------------------------------------------
&apos;// ConcatFirstLastM - Concatenate first/last name into single field.
&apos;//		9/3/20.	wmk.	08:15
&apos;//---------------------------------------------------------------

public sub ConcatFirstLastM()

&apos;//	Usage.	macro call or
&apos;//			call ConcatFirstLastM()
&apos;//
&apos;// Entry.	user has selected row(s) in which to concatenate name fields
&apos;//			each row should have an empty column to its right in which
&apos;//			to place the concatenated name information
&apos;//
&apos;//	Exit.	concatenated name is in form:
&apos;//			&lt;First Name&gt;&lt;b&gt;&lt;Last Name&gt;
&apos;//			where &lt;b&gt; is a single space
&apos;//			also trim all source fields to eliminate any fields
&apos;//			which were imported as 10-character, right-justified,
&apos;//			space-filled fields
&apos;//
&apos;// Calls.
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	9/3/20.	wmk.	original code; adapted from GenHLinkM
&apos;//
&apos;//	Notes. Column indexes for the first/last name fields are for import
&apos;// spreadsheet taken from ReferenceUSA .xls format spreadsheet

&apos;//	constants.
const COL_FIRST=1			&apos;// first name field
const COL_LAST=0			&apos;// last name field
const COL_UNIT=8			&apos;// unit/apt #
const COL_FULLNAME=2		&apos;// full concatenated name
const YELLOW=16776960		&apos;// decimal value of YELLOW color

&apos;//	local variables.
Dim oDoc As Object
Dim oSheet As Object
Dim NewColumn As Object
dim oSel as Object
dim iSheetIx as integer
dim oRange as Object
dim lThisRow as long		&apos;// current row selected on sheet

&apos;// processing variables.
dim nRowsProcessed As Integer	&apos;// count of rows processed
dim nRowCount		As Integer	&apos;// # rows to process
dim sFirst  	As String		&apos;// first name from current row
dim sLast		As String		&apos;// last name from current row
dim sFullName	As String		&apos;// HYPERTEXT link to store
dim i			As Integer		&apos;// loop counter

&apos;// XCell sheet objects
dim oCell as object			&apos;// generic field

&apos;// code.
	ON ERROR GOTO ErrorHandler
	oDoc = ThisComponent
	oSel = oDoc.getCurrentSelection()
	oRange = oSel.RangeAddress
	iSheetIx = oRange.Sheet
	oSheet = oDoc.Sheets(iSheetIx)
	nRowsProcessed = 0		&apos;// clear processed count

	&apos;// set row processing from oRange information
	lThisRow = oRange.StartRow - 1		&apos;// start at -1 since increment first
	nRowCount = oRange.EndRow - lThisRow	&apos;// set row count to process
	for i = 1 to nRowCount
		lThisRow = lThisRow + 1		&apos;// advance current row
		oCell = oSheet.getCellByPosition(COL_FIRST, lThisRow)
		oCell.String = trim(oCell.String)		&apos;// set first name text
		sFirst = oCell.String
		oCell= oSheet.getCellByPosition(COL_LAST, lThisRow)
		oCell.String = trim(oCell.String)
		sLast = oCell.String	&apos;// set  last name set
		sFullName = trim(sFirst + &quot; &quot; + sLast)
		
		oCell = oSheet.getCellByPosition(COL_FULLNAME, lThisRow)
		oCell.String = sFullName
		oCell.HoriJustify = LJUST
		
		if len(sFullName) = 0 then
			oCell.String = &quot;&quot;
			oCell.CellBackColor = YELLOW
			msgbox(&quot;At row &quot; + lThisRow + &quot;... empty name - skipped&quot;)
		endif	&apos;// end empty address fields conditional
		
Nextfor:
		nRowsProcessed = nRowsProcessed + 1
	next i		&apos;// advance to next row
	
NormalExit:
	msgbox(&quot;ConcatFirstLastM complete. &quot; + nRowsProcessed + &quot; rows processed.&quot;)
	exit sub
	
ErrorHandler:	
	msgbox(&quot;ConcatFirstLastM - unprocessed error.&quot;)
	GoTo NormalExit

end sub		&apos;// end ConcatFirstLastM	9/3/20.
&apos;/**/

&apos;// CopyToEnd.bas
&apos;//---------------------------------------------------------------
&apos;// CopyToEnd - Copy currently selected sheet to end of workbook.
&apos;//		10/15/20.	wmk.
&apos;//---------------------------------------------------------------

public sub CopyToEnd()

&apos;//	Usage.	macro call or
&apos;//			call CopyToEnd()
&apos;//
&apos;// Entry.	user has worksheet selected
&apos;//
&apos;//	Exit.	copy of worksheet made to end of workbook, automatic
&apos;//			naming
&apos;//
&apos;// Calls.
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	10/12/20.	wmk.	original code; cloned from macro recording
&apos;//	10/15/20.	wmk.	bug fix; code was welded to &quot;Terr102&quot;
&apos;//
&apos;//	Notes.
&apos;//

&apos;//	constants.

&apos;//	local variables.
rem ----------------------------------------------------------------------
rem define variables
dim document   as object
dim dispatcher as object

dim oDoc		As Object
dim sTitle		As String
dim sDocName	As String

	&apos;// code.
	ON ERROR GOTO ErrorHandler
	oDoc = ThisComponent
	sTitle = oDoc.getTitle()
	sDocName = left(sTitle,len(sTitle)-4)		

rem ----------------------------------------------------------------------
rem get access to the document
document   = ThisComponent.CurrentController.Frame
dispatcher = createUnoService(&quot;com.sun.star.frame.DispatchHelper&quot;)

rem ----------------------------------------------------------------------
dim args1(2) as new com.sun.star.beans.PropertyValue
args1(0).Name = &quot;DocName&quot;
args1(0).Value = sDocName
args1(1).Name = &quot;Index&quot;
args1(1).Value = 32767
args1(2).Name = &quot;Copy&quot;
args1(2).Value = true

dispatcher.executeDispatch(document, &quot;.uno:Move&quot;, &quot;&quot;, 0, args1())
	
NormalExit:
	exit sub
	
ErrorHandler:
	msgbox(&quot;CopyToEnd - unprocessed error&quot;)
	GoTo NormalExit
	
end sub		&apos;// end CopyToEnd		10/15/20
&apos;/**/


&apos;// CopyBizToNewWork.bas
&apos;//---------------------------------------------------------------
&apos;// CopyBizToNewWork - Copy selected sheet to new workbook.
&apos;//		12/23/21.	wmk.	21:19
&apos;//---------------------------------------------------------------

public sub CopyBizToNewWork(psDocName As String)

&apos;//	Usage.	macro call or
&apos;//			call CopyBizToNewWork(sDocName)
&apos;//
&apos;//		sDocName = name of new workbook
&apos;//
&apos;// Entry.	user has sheet selected that will be copied to new workbook
&apos;//
&apos;//	Exit.	selected sheet copied into new workbook
&apos;//			goNewWorkdoc = document pointer
&apos;//
&apos;// Calls.
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	10/14/20.	wmk.	original code.
&apos;// 7/10/21.	wmk.	record new workbook selection.
&apos;// 7/12/21.	wmk.	add inline code to save with sheet name, add
&apos;//						inlilne code to save as .xlsx and export to pdf.
&apos;// 7/14/21.	wmk.	save path corrected to add in missing TerrData;
&apos;//				 remove superfluous &quot;.&quot; when saving to xlsx and pdf.
&apos;// 12/23/21.	wmk.	modified to use csTerrBase, csTerrDataPath module-wide
&apos;//				 variables for multihost support.
&apos;//
&apos;//	Notes.
&apos;//

&apos;//	constants.
&apos;const csTerrBase = &quot;defined above&quot;&quot;
&apos;const csTerrDataPath = &quot;defined above&quot;
&apos;const csBTerrDataPath = &quot;defined above&quot;

&apos;//	local variables.
rem ----------------------------------------------------------------------
rem define variables
dim document   as object
dim dispatcher as object

	&apos;// code.
	ON ERROR GOTO ErrorHandler
rem ----------------------------------------------------------------------
rem get access to the document
document   = ThisComponent.CurrentController.Frame
dispatcher = createUnoService(&quot;com.sun.star.frame.DispatchHelper&quot;)

rem ----------------------------------------------------------------------
dim args1(2) as new com.sun.star.beans.PropertyValue
args1(0).Name = &quot;DocName&quot;
args1(0).Value = &quot;&quot;
args1(1).Name = &quot;Index&quot;
args1(1).Value = 32767
args1(2).Name = &quot;Copy&quot;
args1(2).Value = true

dispatcher.executeDispatch(document, &quot;.uno:Move&quot;, &quot;&quot;, 0, args1())
dim oDoc	As Object
dim oSel	As Object
oDoc = ThisComponent.CurrentController.Frame
goNewWorkDoc = oDoc

&apos;// include SaveAs code here.
&apos;// now focus is on Untitled x.ods new workbook; save it
&apos;// there is no URL for it, so will have to generate a SaveAs
&apos;// uno request...
dim sPubTerrURL		As String
dim sPubTargPath	As String
dim sPubTerrBase	As String
dim sPubTargURL		As String
dim oPubTerrDoc		As Object
dim sTerrID			As String
dim sBasePath		As String
	sBasePath = &quot;/Terr&quot;
	sTerrID = mid(psDocName,5,3)
	oPubTerrDoc = ThisComponent.CurrentController.Frame
	sPubTerrBase = &quot;_PubTerr&quot;
    sPubTargPath = csBTerrDataPath &amp; sBasePath + sTerrID _ 
		+ sBasePath + sTerrID + sPubTerrBase + &quot;.ods&quot;
	sPubTargURL = convertToURL(sPubTargPath)
	
	&apos;// inline SaveAs to save Terrxxx_PubTerr.ods

rem ----------------------------------------------------------------------
rem get access to the document
&apos;dim document   as object
&apos;dim dispatcher as object

&apos;document   = ThisComponent.CurrentController.Frame
&apos;dispatcher = createUnoService(&quot;com.sun.star.frame.DispatchHelper&quot;)

rem ----------------------------------------------------------------------
dim args2(1) as new com.sun.star.beans.PropertyValue
args2(0).Name = &quot;URL&quot;
&apos;args1(0).Value = &quot;file:///media/ubuntu/Windows/Users/Bill/Documents/Cong-Files/Territories
&apos;                    /BTerrData/Terrxxx/TerrData/Terrxxx_PubTerr.ods&quot;
args2(0).Value = sPubTargURL
args2(1).Name = &quot;FilterName&quot;
args2(1).Value = &quot;calc8&quot;

dispatcher.executeDispatch(oPubTerrDoc, &quot;.uno:SaveAs&quot;, &quot;&quot;, 0, args2())
oPubTerrDoc = ThisComponent.CurrentController.Frame

&apos;// now save it as .xlsx...
dim sXlsxURL	As String
	sXlsxURL = left(sPubTargURL, len(sPubTargURL)-3) + &quot;xlsx&quot;
dim args3(1) as new com.sun.star.beans.PropertyValue
args3(0).Name = &quot;URL&quot;
&apos;// args2(0).Value = &quot;file:///media/ubuntu/Windows/Users/Bill/Territories&quot; _
&apos;//   || &quot;/BTerrData/Terr241/Terr241_PubTerr.xlsx&quot;
args3(0).Value = sXlsxURL
args3(1).Name = &quot;FilterName&quot;
args3(1).Value = &quot;Calc MS Excel 2007 XML&quot;

dispatcher.executeDispatch(oPubTerrDoc, &quot;.uno:SaveAs&quot;, &quot;&quot;, 0, args3())

&apos;// now export it as .pdf...

dim sPDFurl		As String
	sPDFurl = left(sPubTargURL,len(sPubTargURL)-3) + &quot;pdf&quot;
dim args4(2) as new com.sun.star.beans.PropertyValue
args4(0).Name = &quot;URL&quot;
args4(0).Value = sPDFurl
args4(1).Name = &quot;FilterName&quot;
args4(1).Value = &quot;calc_pdf_Export&quot;
args4(2).Name = &quot;FilterData&quot;
args4(2).Value = Array(Array(&quot;UseLosslessCompression&quot;,0,false,com.sun.star.beans.PropertyState.DIRECT_VALUE),Array(&quot;Quality&quot;,0,90,com.sun.star.beans.PropertyState.DIRECT_VALUE),Array(&quot;ReduceImageResolution&quot;,0,true,com.sun.star.beans.PropertyState.DIRECT_VALUE),Array(&quot;MaxImageResolution&quot;,0,300,com.sun.star.beans.PropertyState.DIRECT_VALUE),Array(&quot;UseTaggedPDF&quot;,0,false,com.sun.star.beans.PropertyState.DIRECT_VALUE),Array(&quot;SelectPdfVersion&quot;,0,0,com.sun.star.beans.PropertyState.DIRECT_VALUE),Array(&quot;ExportNotes&quot;,0,false,com.sun.star.beans.PropertyState.DIRECT_VALUE),Array(&quot;ViewPDFAfterExport&quot;,0,false,com.sun.star.beans.PropertyState.DIRECT_VALUE),Array(&quot;ExportBookmarks&quot;,0,true,com.sun.star.beans.PropertyState.DIRECT_VALUE),Array(&quot;SinglePageSheets&quot;,0,false,com.sun.star.beans.PropertyState.DIRECT_VALUE),Array(&quot;OpenBookmarkLevels&quot;,0,-1,com.sun.star.beans.PropertyState.DIRECT_VALUE),Array(&quot;UseTransitionEffects&quot;,0,true,com.sun.star.beans.PropertyState.DIRECT_VALUE),Array(&quot;IsSkipEmptyPages&quot;,0,true,com.sun.star.beans.PropertyState.DIRECT_VALUE),Array(&quot;ExportPlaceholders&quot;,0,false,com.sun.star.beans.PropertyState.DIRECT_VALUE),Array(&quot;IsAddStream&quot;,0,false,com.sun.star.beans.PropertyState.DIRECT_VALUE),Array(&quot;ExportFormFields&quot;,0,true,com.sun.star.beans.PropertyState.DIRECT_VALUE),Array(&quot;FormsType&quot;,0,0,com.sun.star.beans.PropertyState.DIRECT_VALUE),Array(&quot;AllowDuplicateFieldNames&quot;,0,false,com.sun.star.beans.PropertyState.DIRECT_VALUE),Array(&quot;HideViewerToolbar&quot;,0,false,com.sun.star.beans.PropertyState.DIRECT_VALUE),Array(&quot;HideViewerMenubar&quot;,0,false,com.sun.star.beans.PropertyState.DIRECT_VALUE),Array(&quot;HideViewerWindowControls&quot;,0,false,com.sun.star.beans.PropertyState.DIRECT_VALUE),Array(&quot;ResizeWindowToInitialPage&quot;,0,false,com.sun.star.beans.PropertyState.DIRECT_VALUE),Array(&quot;CenterWindow&quot;,0,false,com.sun.star.beans.PropertyState.DIRECT_VALUE),Array(&quot;OpenInFullScreenMode&quot;,0,false,com.sun.star.beans.PropertyState.DIRECT_VALUE),Array(&quot;DisplayPDFDocumentTitle&quot;,0,true,com.sun.star.beans.PropertyState.DIRECT_VALUE),Array(&quot;InitialView&quot;,0,0,com.sun.star.beans.PropertyState.DIRECT_VALUE),Array(&quot;Magnification&quot;,0,0,com.sun.star.beans.PropertyState.DIRECT_VALUE),Array(&quot;Zoom&quot;,0,100,com.sun.star.beans.PropertyState.DIRECT_VALUE),Array(&quot;PageLayout&quot;,0,0,com.sun.star.beans.PropertyState.DIRECT_VALUE),Array(&quot;FirstPageOnLeft&quot;,0,false,com.sun.star.beans.PropertyState.DIRECT_VALUE),Array(&quot;InitialPage&quot;,0,1,com.sun.star.beans.PropertyState.DIRECT_VALUE),Array(&quot;Printing&quot;,0,2,com.sun.star.beans.PropertyState.DIRECT_VALUE),Array(&quot;Changes&quot;,0,4,com.sun.star.beans.PropertyState.DIRECT_VALUE),Array(&quot;EnableCopyingOfContent&quot;,0,true,com.sun.star.beans.PropertyState.DIRECT_VALUE),Array(&quot;EnableTextAccessForAccessibilityTools&quot;,0,true,com.sun.star.beans.PropertyState.DIRECT_VALUE),Array(&quot;ExportLinksRelativeFsys&quot;,0,true,com.sun.star.beans.PropertyState.DIRECT_VALUE),Array(&quot;PDFViewSelection&quot;,0,0,com.sun.star.beans.PropertyState.DIRECT_VALUE),Array(&quot;ConvertOOoTargetToPDFTarget&quot;,0,false,com.sun.star.beans.PropertyState.DIRECT_VALUE),Array(&quot;ExportBookmarksToPDFDestination&quot;,0,false,com.sun.star.beans.PropertyState.DIRECT_VALUE),Array(&quot;SignPDF&quot;,0,false,com.sun.star.beans.PropertyState.DIRECT_VALUE),Array(&quot;_OkButtonString&quot;,0,&quot;&quot;,com.sun.star.beans.PropertyState.DIRECT_VALUE),Array(&quot;Watermark&quot;,0,&quot;&quot;,com.sun.star.beans.PropertyState.DIRECT_VALUE),Array(&quot;EncryptFile&quot;,0,false,com.sun.star.beans.PropertyState.DIRECT_VALUE),Array(&quot;PreparedPasswords&quot;,0,,com.sun.star.beans.PropertyState.DIRECT_VALUE),Array(&quot;RestrictPermissions&quot;,0,false,com.sun.star.beans.PropertyState.DIRECT_VALUE),Array(&quot;PreparedPermissionPassword&quot;,0,Array(),com.sun.star.beans.PropertyState.DIRECT_VALUE),Array(&quot;Selection&quot;,0,,com.sun.star.beans.PropertyState.DIRECT_VALUE),Array(&quot;SignatureLocation&quot;,0,&quot;&quot;,com.sun.star.beans.PropertyState.DIRECT_VALUE),Array(&quot;SignatureReason&quot;,0,&quot;&quot;,com.sun.star.beans.PropertyState.DIRECT_VALUE),Array(&quot;SignatureContactInfo&quot;,0,&quot;&quot;,com.sun.star.beans.PropertyState.DIRECT_VALUE),Array(&quot;SignaturePassword&quot;,0,&quot;&quot;,com.sun.star.beans.PropertyState.DIRECT_VALUE),Array(&quot;SignatureCertificate&quot;,0,,com.sun.star.beans.PropertyState.DIRECT_VALUE),Array(&quot;SignatureTSA&quot;,0,&quot;&quot;,com.sun.star.beans.PropertyState.DIRECT_VALUE),Array(&quot;UseReferenceXObject&quot;,0,false,com.sun.star.beans.PropertyState.DIRECT_VALUE))

dispatcher.executeDispatch(oPubTerrDoc, &quot;.uno:ExportToPDF&quot;, &quot;&quot;, 0, args4())

&apos;dim args5
&apos;dispatcher.executeDispatch(oPubTerrDoc, &quot;.uno:Close&quot;, &quot;&quot;, 0, args5())

&apos;oPubTerrDoc = ThisComponent.CurrentController.Frame
oPubTerrDoc.Close(1)
	
NormalExit:
	exit sub
	
ErrorHandler:
	msgbox(&quot;CopyBizToNewWork - unprocessed error&quot;)
	GoTo NormalExit
	
end sub		&apos;// end CopyBizToNewWork	11/23/21.	21:19
&apos;/**/

&apos;// CopyToNewWork.bas
&apos;//---------------------------------------------------------------
&apos;// CopyToNewWork - Copy selected sheet to new workbook.
&apos;//		12/23/21.	wmk.	21:26
&apos;//---------------------------------------------------------------

public sub CopyToNewWork(psDocName As String)

&apos;//	Usage.	macro call or
&apos;//			call CopyToNewWork(sDocName)
&apos;//
&apos;//		sDocName = name of new workbook
&apos;//
&apos;// Entry.	user has sheet selected that will be copied to new workbook
&apos;//
&apos;//	Exit.	selected sheet copied into new workbook
&apos;//			goNewWorkdoc = document pointer
&apos;//
&apos;// Calls.
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	10/14/20.	wmk.	original code.
&apos;// 7/10/21.	wmk.	record new workbook selection.
&apos;// 7/12/21.	wmk.	add inline code to save with sheet name, add
&apos;//						inlilne code to save as .xlsx and export to pdf.
&apos;// 7/14/21.	wmk.	save path corrected to add in missing TerrData;
&apos;//				 remove superfluous &quot;.&quot; when saving to xlsx and pdf.
&apos;// 12/23/21.	wmk.	modified to use csTerrBase, csTerrDataPath module-wide
&apos;//				 constants for multihost support.
&apos;//
&apos;//	Notes.
&apos;//

&apos;//	constants.
&apos;const csTerrBase = &quot;defined above&quot;
&apos;const csTerrDataPath = &quot;defined above&quot;

&apos;//	local variables.
rem ----------------------------------------------------------------------
rem define variables
dim document   as object
dim dispatcher as object

	&apos;// code.
	ON ERROR GOTO ErrorHandler
rem ----------------------------------------------------------------------
rem get access to the document
document   = ThisComponent.CurrentController.Frame
dispatcher = createUnoService(&quot;com.sun.star.frame.DispatchHelper&quot;)

rem ----------------------------------------------------------------------
dim args1(2) as new com.sun.star.beans.PropertyValue
args1(0).Name = &quot;DocName&quot;
args1(0).Value = &quot;&quot;
args1(1).Name = &quot;Index&quot;
args1(1).Value = 32767
args1(2).Name = &quot;Copy&quot;
args1(2).Value = true

dispatcher.executeDispatch(document, &quot;.uno:Move&quot;, &quot;&quot;, 0, args1())
dim oDoc	As Object
dim oSel	As Object
oDoc = ThisComponent.CurrentController.Frame
goNewWorkDoc = oDoc

&apos;// include SaveAs code here.
&apos;// now focus is on Untitled x.ods new workbook; save it
&apos;// there is no URL for it, so will have to generate a SaveAs
&apos;// uno request...
dim sPubTerrURL		As String
dim sPubTargPath	As String
dim sPubTerrBase	As String
dim sPubTargURL		As String
dim oPubTerrDoc		As Object
dim sTerrID			As String
dim sBasePath		As String
	sBasePath = &quot;/Terr&quot;
	sTerrID = mid(psDocName,5,3)
	oPubTerrDoc = ThisComponent.CurrentController.Frame
	sPubTerrBase = &quot;_PubTerr&quot;
    sPubTargPath = csTerrDataPath &amp; sBasePath + sTerrID _ 
		+ sBasePath + sTerrID + sPubTerrBase + &quot;.ods&quot;
	sPubTargURL = convertToURL(sPubTargPath)
	
	&apos;// inline SaveAs to save Terrxxx_PubTerr.ods

rem ----------------------------------------------------------------------
rem get access to the document
&apos;dim document   as object
&apos;dim dispatcher as object

&apos;document   = ThisComponent.CurrentController.Frame
&apos;dispatcher = createUnoService(&quot;com.sun.star.frame.DispatchHelper&quot;)

rem ----------------------------------------------------------------------
dim args2(1) as new com.sun.star.beans.PropertyValue
args2(0).Name = &quot;URL&quot;
&apos;args1(0).Value = &quot;file:///media/ubuntu/Windows/Users/Bill/Documents/Cong-Files/Territories
&apos;                    /TerrData/Terrxxx/TerrData/Terrxxx_PubTerr.ods&quot;
args2(0).Value = sPubTargURL
args2(1).Name = &quot;FilterName&quot;
args2(1).Value = &quot;calc8&quot;

dispatcher.executeDispatch(oPubTerrDoc, &quot;.uno:SaveAs&quot;, &quot;&quot;, 0, args2())
oPubTerrDoc = ThisComponent.CurrentController.Frame

&apos;// now save it as .xlsx...
dim sXlsxURL	As String
	sXlsxURL = left(sPubTargURL, len(sPubTargURL)-3) + &quot;xlsx&quot;
dim args3(1) as new com.sun.star.beans.PropertyValue
args3(0).Name = &quot;URL&quot;
&apos;// args2(0).Value = &quot;file:///media/ubuntu/Windows/Users/Bill/Territories&quot; _
&apos;//   || &quot;/TerrData/Terr241/Terr241_PubTerr.xlsx&quot;
args3(0).Value = sXlsxURL
args3(1).Name = &quot;FilterName&quot;
args3(1).Value = &quot;Calc MS Excel 2007 XML&quot;

dispatcher.executeDispatch(oPubTerrDoc, &quot;.uno:SaveAs&quot;, &quot;&quot;, 0, args3())

&apos;// now export it as .pdf...

dim sPDFurl		As String
	sPDFurl = left(sPubTargURL,len(sPubTargURL)-3) + &quot;pdf&quot;
dim args4(2) as new com.sun.star.beans.PropertyValue
args4(0).Name = &quot;URL&quot;
args4(0).Value = sPDFurl
args4(1).Name = &quot;FilterName&quot;
args4(1).Value = &quot;calc_pdf_Export&quot;
args4(2).Name = &quot;FilterData&quot;
args4(2).Value = Array(Array(&quot;UseLosslessCompression&quot;,0,false,com.sun.star.beans.PropertyState.DIRECT_VALUE),Array(&quot;Quality&quot;,0,90,com.sun.star.beans.PropertyState.DIRECT_VALUE),Array(&quot;ReduceImageResolution&quot;,0,true,com.sun.star.beans.PropertyState.DIRECT_VALUE),Array(&quot;MaxImageResolution&quot;,0,300,com.sun.star.beans.PropertyState.DIRECT_VALUE),Array(&quot;UseTaggedPDF&quot;,0,false,com.sun.star.beans.PropertyState.DIRECT_VALUE),Array(&quot;SelectPdfVersion&quot;,0,0,com.sun.star.beans.PropertyState.DIRECT_VALUE),Array(&quot;ExportNotes&quot;,0,false,com.sun.star.beans.PropertyState.DIRECT_VALUE),Array(&quot;ViewPDFAfterExport&quot;,0,false,com.sun.star.beans.PropertyState.DIRECT_VALUE),Array(&quot;ExportBookmarks&quot;,0,true,com.sun.star.beans.PropertyState.DIRECT_VALUE),Array(&quot;SinglePageSheets&quot;,0,false,com.sun.star.beans.PropertyState.DIRECT_VALUE),Array(&quot;OpenBookmarkLevels&quot;,0,-1,com.sun.star.beans.PropertyState.DIRECT_VALUE),Array(&quot;UseTransitionEffects&quot;,0,true,com.sun.star.beans.PropertyState.DIRECT_VALUE),Array(&quot;IsSkipEmptyPages&quot;,0,true,com.sun.star.beans.PropertyState.DIRECT_VALUE),Array(&quot;ExportPlaceholders&quot;,0,false,com.sun.star.beans.PropertyState.DIRECT_VALUE),Array(&quot;IsAddStream&quot;,0,false,com.sun.star.beans.PropertyState.DIRECT_VALUE),Array(&quot;ExportFormFields&quot;,0,true,com.sun.star.beans.PropertyState.DIRECT_VALUE),Array(&quot;FormsType&quot;,0,0,com.sun.star.beans.PropertyState.DIRECT_VALUE),Array(&quot;AllowDuplicateFieldNames&quot;,0,false,com.sun.star.beans.PropertyState.DIRECT_VALUE),Array(&quot;HideViewerToolbar&quot;,0,false,com.sun.star.beans.PropertyState.DIRECT_VALUE),Array(&quot;HideViewerMenubar&quot;,0,false,com.sun.star.beans.PropertyState.DIRECT_VALUE),Array(&quot;HideViewerWindowControls&quot;,0,false,com.sun.star.beans.PropertyState.DIRECT_VALUE),Array(&quot;ResizeWindowToInitialPage&quot;,0,false,com.sun.star.beans.PropertyState.DIRECT_VALUE),Array(&quot;CenterWindow&quot;,0,false,com.sun.star.beans.PropertyState.DIRECT_VALUE),Array(&quot;OpenInFullScreenMode&quot;,0,false,com.sun.star.beans.PropertyState.DIRECT_VALUE),Array(&quot;DisplayPDFDocumentTitle&quot;,0,true,com.sun.star.beans.PropertyState.DIRECT_VALUE),Array(&quot;InitialView&quot;,0,0,com.sun.star.beans.PropertyState.DIRECT_VALUE),Array(&quot;Magnification&quot;,0,0,com.sun.star.beans.PropertyState.DIRECT_VALUE),Array(&quot;Zoom&quot;,0,100,com.sun.star.beans.PropertyState.DIRECT_VALUE),Array(&quot;PageLayout&quot;,0,0,com.sun.star.beans.PropertyState.DIRECT_VALUE),Array(&quot;FirstPageOnLeft&quot;,0,false,com.sun.star.beans.PropertyState.DIRECT_VALUE),Array(&quot;InitialPage&quot;,0,1,com.sun.star.beans.PropertyState.DIRECT_VALUE),Array(&quot;Printing&quot;,0,2,com.sun.star.beans.PropertyState.DIRECT_VALUE),Array(&quot;Changes&quot;,0,4,com.sun.star.beans.PropertyState.DIRECT_VALUE),Array(&quot;EnableCopyingOfContent&quot;,0,true,com.sun.star.beans.PropertyState.DIRECT_VALUE),Array(&quot;EnableTextAccessForAccessibilityTools&quot;,0,true,com.sun.star.beans.PropertyState.DIRECT_VALUE),Array(&quot;ExportLinksRelativeFsys&quot;,0,true,com.sun.star.beans.PropertyState.DIRECT_VALUE),Array(&quot;PDFViewSelection&quot;,0,0,com.sun.star.beans.PropertyState.DIRECT_VALUE),Array(&quot;ConvertOOoTargetToPDFTarget&quot;,0,false,com.sun.star.beans.PropertyState.DIRECT_VALUE),Array(&quot;ExportBookmarksToPDFDestination&quot;,0,false,com.sun.star.beans.PropertyState.DIRECT_VALUE),Array(&quot;SignPDF&quot;,0,false,com.sun.star.beans.PropertyState.DIRECT_VALUE),Array(&quot;_OkButtonString&quot;,0,&quot;&quot;,com.sun.star.beans.PropertyState.DIRECT_VALUE),Array(&quot;Watermark&quot;,0,&quot;&quot;,com.sun.star.beans.PropertyState.DIRECT_VALUE),Array(&quot;EncryptFile&quot;,0,false,com.sun.star.beans.PropertyState.DIRECT_VALUE),Array(&quot;PreparedPasswords&quot;,0,,com.sun.star.beans.PropertyState.DIRECT_VALUE),Array(&quot;RestrictPermissions&quot;,0,false,com.sun.star.beans.PropertyState.DIRECT_VALUE),Array(&quot;PreparedPermissionPassword&quot;,0,Array(),com.sun.star.beans.PropertyState.DIRECT_VALUE),Array(&quot;Selection&quot;,0,,com.sun.star.beans.PropertyState.DIRECT_VALUE),Array(&quot;SignatureLocation&quot;,0,&quot;&quot;,com.sun.star.beans.PropertyState.DIRECT_VALUE),Array(&quot;SignatureReason&quot;,0,&quot;&quot;,com.sun.star.beans.PropertyState.DIRECT_VALUE),Array(&quot;SignatureContactInfo&quot;,0,&quot;&quot;,com.sun.star.beans.PropertyState.DIRECT_VALUE),Array(&quot;SignaturePassword&quot;,0,&quot;&quot;,com.sun.star.beans.PropertyState.DIRECT_VALUE),Array(&quot;SignatureCertificate&quot;,0,,com.sun.star.beans.PropertyState.DIRECT_VALUE),Array(&quot;SignatureTSA&quot;,0,&quot;&quot;,com.sun.star.beans.PropertyState.DIRECT_VALUE),Array(&quot;UseReferenceXObject&quot;,0,false,com.sun.star.beans.PropertyState.DIRECT_VALUE))

dispatcher.executeDispatch(oPubTerrDoc, &quot;.uno:ExportToPDF&quot;, &quot;&quot;, 0, args4())

&apos;dim args5
&apos;dispatcher.executeDispatch(oPubTerrDoc, &quot;.uno:Close&quot;, &quot;&quot;, 0, args5())

&apos;oPubTerrDoc = ThisComponent.CurrentController.Frame
oPubTerrDoc.Close(1)
	
NormalExit:
	exit sub
	
ErrorHandler:
	msgbox(&quot;CopyToNewWork - unprocessed error&quot;)
	GoTo NormalExit
	
end sub		&apos;// end CopyToNewWork	12/23/21	21:26
&apos;/**/

&apos;// CopyToUntitled.bas
&apos;//---------------------------------------------------------------
&apos;// CopyToUntitled - Copy selected sheet to new workbook.
&apos;//		10/14/20.	wmk.
&apos;//---------------------------------------------------------------

public sub CopyToUntitled()

&apos;//	Usage.	macro call or
&apos;//			call CopyToUntitled()
&apos;//
&apos;//		sDocName = name of new workbook
&apos;//
&apos;// Entry.	user has sheet selected that will be copied to new workbook
&apos;//
&apos;//	Exit.	selected sheet copied into &quot;Untitled 1&quot;
&apos;//
&apos;// Calls.
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	10/14/20.	wmk.	original code.
&apos;//
&apos;//	Notes.
&apos;//

&apos;//	constants.

&apos;//	local variables.
rem ----------------------------------------------------------------------
rem define variables
dim document   as object
dim dispatcher as object

	&apos;// code.
	ON ERROR GOTO ErrorHandler
rem ----------------------------------------------------------------------
rem get access to the document
document   = ThisComponent.CurrentController.Frame
dispatcher = createUnoService(&quot;com.sun.star.frame.DispatchHelper&quot;)

rem ----------------------------------------------------------------------
dim args1(2) as new com.sun.star.beans.PropertyValue
args1(0).Name = &quot;DocName&quot;
args1(0).Value = &quot;Untitled 2&quot;
args1(1).Name = &quot;Index&quot;
args1(1).Value = 32767
args1(2).Name = &quot;Copy&quot;
args1(2).Value = true

dispatcher.executeDispatch(document, &quot;.uno:Move&quot;, &quot;&quot;, 0, args1())

	
NormalExit:
	exit sub
	
ErrorHandler:
	msgbox(&quot;CopyToUntitled - unprocessed error&quot;)
	GoTo NormalExit
	
end sub		&apos;// end CopyToUntitled	&apos;// 3/14/21.	18:53
&apos;/**/


&apos;//---------------------------------------------------------------
&apos;// Crack - crack string on multiple separators.
&apos;//		8/18/20.	wmk.
&apos;//---------------------------------------------------------------

public sub Crack(psSource As String, psSepList As String, _
					psSubstr As String, psSep As String)

&apos;//	Usage.	macro call or
&apos;//			call Crack( sSource, sSepList, sSubstr, sSep )
&apos;//
&apos;//		sSource = source string to crack
&apos;//		sSepList = string of separators to search for
&apos;//		sSubstr = [returned] substring up to found separator
&apos;//		sSep = [returned] separator found
&apos;//
&apos;// Entry.
&apos;//
&apos;//	Exit.	sSource = updated source with substring and separator removed
&apos;//			sSubstr = extracted substring up to separator found; entire
&apos;//						source string if no separator found
&apos;//			sSep = separator found; &quot;&quot; if no separator found
&apos;//
&apos;// Calls.
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	8/10/20.	wmk.	original code
&apos;//	8/18/20.	wmk.	bug fix where using InStr on situs instead
&apos;//						of using InStr on sSepList
&apos;//
&apos;//	Notes. &lt;Insert notes here&gt;
&apos;//

&apos;//	constants.

&apos;//	local variables.
dim iSepIndex	As Integer	&apos;// separator string index
dim iSrcIndex	As Integer	&apos;// source string index
dim sCurrSep	As String	&apos;// current separatore from separator string
dim sCurrChar	As String	&apos;// current source character scanning
dim nSrcLen		As Integer	&apos;// length of original string
dim nSepLen		As Integer	&apos;// length of separator string
dim nSepPos		As Integer	&apos;// position of separator found in source
dim bMoreSrc	As Boolean	&apos;// more source to process
dim bMoreSeps	As Boolean	&apos;// more separators to process
dim bSepFound	As Boolean	&apos;// separator found flag

	&apos;// code.
	bMoreSrc = true			&apos;// more source to scan flag
	nSepLen = len(psSepList)
	nSrcLen = len(psSource)
	iSrcIndex = 0
	bSepFound = false
	
	do while (NOT bSepFound)
		iSrcIndex = iSrcIndex + 1
		bMoreSrc = iSrcIndex &lt;= nSrcLen
		if NOT bMoreSrc then
		  exit do
		endif	&apos;// end past end of separator list
		sCurrChar = mid(psSource, iSrcIndex, 1)
		
		&apos;// check char against all separators before advancing
		bSepFound = (InStr(psSepList, sCurrChar) &gt; 0)
		if bSepFound then
		   nSepPos = iSrcIndex		&apos;// set index in source where found
		   sCurrSep = sCurrChar		&apos;// save separator char
		   exit do					&apos;// exit loop
		endif	&apos;// end curr char in separator list conditional

	loop	&apos;// end loop until separator found
	
	if bSepFound then
	    psSep = sCurrSep
	    psSubstr = Left(psSource, nSepPos-1)
	    psSource = Right(psSource, nSrcLen-nSepPos)
	else
		psSubstr = psSource
		psSource = &quot;&quot;
		psSep = &quot;&quot;
	endif	&apos;// end no sep found conditional
	
end sub		&apos;// end Crack	8/10/20.
&apos;/**/

&apos;// DkLimeTab.bas
&apos;//---------------------------------------------------------------
&apos;// DkLimeTab - Change current worksheet tab color to DkLime.
&apos;//		2/12/21.	wmk.	17:45
&apos;//---------------------------------------------------------------

public sub DkLimeTab()

&apos;//	Usage.	macro call or
&apos;//			call DkLimeTab()
&apos;//
&apos;// Entry.	user has worksheet selected
&apos;//
&apos;//	Exit.	worksheet tab color changed to YELLOW
&apos;//
&apos;// Calls.
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	2/6/20.		wmk.	original code; cloned from YellowTab
&apos;// 2/12/21.	wmk.	DKLIME const corrected
&apos;//
&apos;//	Notes.
&apos;//

&apos;//	constants.
const YELLOW=16776960			&apos;// YELLOW color value
const DKLIME=6207774			&apos;// DK LIME color value

&apos;//	local variables.
rem ----------------------------------------------------------------------
rem define variables
dim document   as object
dim dispatcher as object

	&apos;// code.
	ON ERROR GOTO ErrorHandler
rem ----------------------------------------------------------------------
rem get access to the document
document   = ThisComponent.CurrentController.Frame
dispatcher = createUnoService(&quot;com.sun.star.frame.DispatchHelper&quot;)

rem ----------------------------------------------------------------------
dim args1(0) as new com.sun.star.beans.PropertyValue
args1(0).Name = &quot;TabBgColor&quot;
args1(0).Value = DKLIME

dispatcher.executeDispatch(document, &quot;.uno:SetTabBgColor&quot;, &quot;&quot;, 0, args1())
	
NormalExit:
	exit sub
	
ErrorHandler:
	msgbox(&quot;DkLimeTab - unprocessed error&quot;)
	GoTo NormalExit
	
end sub		&apos;// end DkLimeTab	2/12/21
&apos;/**/


&apos;// ExportPDF.bas
&apos;//--------------------------------------------------------------------
&apos;// ExportPDF - Export territory workbook as PDF.
&apos;//		12/23/21.	wmk.	21:32
&apos;//--------------------------------------------------------------------

public sub ExportPDF()

&apos;//	Usage.	macro call or
&apos;//			call ExportPDF()
&apos;//
&apos;// Entry.	user has worksheet selected
&apos;//			.Title = &quot;Terrxxx_PubTerr.xlsx&quot;
&apos;//
&apos;//	Exit.	copy of worksheet made to .pdf file
&apos;//
&apos;// Calls.
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;// 1/14/21.	wmk.	original code; cloned from macro recording.
&apos;//	7/10/21.	wmk.	dispatch parameter list split for readability.
&apos;// 7/11/21.	wmk.	name change to ExportPDF.
&apos;// 12/23/21.	wmk.	modified to use csTerrBase, csTerrDataPath module-wide
&apos;//				 variables for multihost.support.
&apos;//
&apos;//	Notes.
&apos;//

&apos;//	constants.
&apos;const csTerrBase = &quot;defined above&quot;
&apos;const csTerrDataPath = &quot;defined above&quot;

&apos;//	local variables.
rem ----------------------------------------------------------------------
rem define variables
dim document   as object
dim dispatcher as object
dim sTerrID		As String
dim sURL		As String
dim sFilePath	As String
dim Array()

&apos;// Code.
	ON ERROR GOTO ErrorHandler
rem ----------------------------------------------------------------------
rem get access to the document
document   = ThisComponent.CurrentController.Frame
sTerrID = mid(document.Title,5,3)
sFilePath = csTerrDataPath &amp; &quot;/Terr&quot; &amp; sTerrID &amp; &quot;/&quot; &amp; &quot;Terr&quot; &amp; sTerrID &amp; &quot;_PubTerr.pdf&quot;
sURL = 	convertToURL(sFilePath)
dispatcher = createUnoService(&quot;com.sun.star.frame.DispatchHelper&quot;)

rem ----------------------------------------------------------------------
dim args1(2) as new com.sun.star.beans.PropertyValue
args1(0).Name = &quot;URL&quot;
&apos;args1(0).Value = &quot;file:///home/ubuntu/Documents/Untitled.pdf&quot;
args1(0).Value = sURL
args1(1).Name = &quot;FilterName&quot;
args1(1).Value = &quot;calc_pdf_Export&quot;
args1(2).Name = &quot;FilterData&quot;
args1(2).Value = Array(Array(&quot;UseLosslessCompression&quot;,0,false,_ 
	 com.sun.star.beans.PropertyState.DIRECT_VALUE),_ 
	Array(&quot;Quality&quot;,0,90,com.sun.star.beans.PropertyState.DIRECT_VALUE),_
	Array(&quot;ReduceImageResolution&quot;,0,true,_
	 com.sun.star.beans.PropertyState.DIRECT_VALUE),_
	Array(&quot;MaxImageResolution&quot;,0,300,_
	 com.sun.star.beans.PropertyState.DIRECT_VALUE),_
	Array(&quot;UseTaggedPDF&quot;,0,false,_
	 com.sun.star.beans.PropertyState.DIRECT_VALUE),_
	Array(&quot;SelectPdfVersion&quot;,0,0,_
	 com.sun.star.beans.PropertyState.DIRECT_VALUE),_
	Array(&quot;ExportNotes&quot;,0,false,_
	 com.sun.star.beans.PropertyState.DIRECT_VALUE),_
	Array(&quot;ViewPDFAfterExport&quot;,0,false,_
	 com.sun.star.beans.PropertyState.DIRECT_VALUE),_
	Array(&quot;ExportBookmarks&quot;,0,true,_
	 com.sun.star.beans.PropertyState.DIRECT_VALUE),_
	Array(&quot;SinglePageSheets&quot;,0,false,_
	 com.sun.star.beans.PropertyState.DIRECT_VALUE),_
	Array(&quot;OpenBookmarkLevels&quot;,0,-1,_
	 com.sun.star.beans.PropertyState.DIRECT_VALUE),_
	Array(&quot;UseTransitionEffects&quot;,0,true,_
	 com.sun.star.beans.PropertyState.DIRECT_VALUE),_
	Array(&quot;IsSkipEmptyPages&quot;,0,true,_
	 com.sun.star.beans.PropertyState.DIRECT_VALUE),_
	Array(&quot;ExportPlaceholders&quot;,0,false,_
	 com.sun.star.beans.PropertyState.DIRECT_VALUE),_
	Array(&quot;IsAddStream&quot;,0,false,_
	 com.sun.star.beans.PropertyState.DIRECT_VALUE),_
	Array(&quot;ExportFormFields&quot;,0,true,_
	 com.sun.star.beans.PropertyState.DIRECT_VALUE),_
	Array(&quot;FormsType&quot;,0,0,_
	 com.sun.star.beans.PropertyState.DIRECT_VALUE),_
	Array(&quot;AllowDuplicateFieldNames&quot;,0,false,_
	 com.sun.star.beans.PropertyState.DIRECT_VALUE),_
	Array(&quot;HideViewerToolbar&quot;,0,false,_
	 com.sun.star.beans.PropertyState.DIRECT_VALUE),_
	Array(&quot;HideViewerMenubar&quot;,0,false,_
	 com.sun.star.beans.PropertyState.DIRECT_VALUE),_
	Array(&quot;HideViewerWindowControls&quot;,0,false,_
	 com.sun.star.beans.PropertyState.DIRECT_VALUE),_
	Array(&quot;ResizeWindowToInitialPage&quot;,0,false,_
	 com.sun.star.beans.PropertyState.DIRECT_VALUE),_
	Array(&quot;CenterWindow&quot;,0,false,_
	 com.sun.star.beans.PropertyState.DIRECT_VALUE),_
	Array(&quot;OpenInFullScreenMode&quot;,0,false,_
	 com.sun.star.beans.PropertyState.DIRECT_VALUE),_
	Array(&quot;DisplayPDFDocumentTitle&quot;,0,true,_
	 com.sun.star.beans.PropertyState.DIRECT_VALUE),_
	Array(&quot;InitialView&quot;,0,0,_
	 com.sun.star.beans.PropertyState.DIRECT_VALUE),_
	Array(&quot;Magnification&quot;,0,0,_
	 com.sun.star.beans.PropertyState.DIRECT_VALUE),_
	Array(&quot;Zoom&quot;,0,100,_
	 com.sun.star.beans.PropertyState.DIRECT_VALUE),_
	Array(&quot;PageLayout&quot;,0,0,_
	 com.sun.star.beans.PropertyState.DIRECT_VALUE),_
	Array(&quot;FirstPageOnLeft&quot;,0,false,_
	 com.sun.star.beans.PropertyState.DIRECT_VALUE),_
	Array(&quot;InitialPage&quot;,0,1,_
	 com.sun.star.beans.PropertyState.DIRECT_VALUE),_
	Array(&quot;Printing&quot;,0,2,_
	 com.sun.star.beans.PropertyState.DIRECT_VALUE),_
	Array(&quot;Changes&quot;,0,4,_
	 com.sun.star.beans.PropertyState.DIRECT_VALUE),_
	Array(&quot;EnableCopyingOfContent&quot;,0,true,_
	 com.sun.star.beans.PropertyState.DIRECT_VALUE),_
	Array(&quot;EnableTextAccessForAccessibilityTools&quot;,0,true,_
	 com.sun.star.beans.PropertyState.DIRECT_VALUE),_
	Array(&quot;ExportLinksRelativeFsys&quot;,0,true,_
	 com.sun.star.beans.PropertyState.DIRECT_VALUE),_
	Array(&quot;PDFViewSelection&quot;,0,0,_
	 com.sun.star.beans.PropertyState.DIRECT_VALUE),_
	Array(&quot;ConvertOOoTargetToPDFTarget&quot;,0,false,_
	 com.sun.star.beans.PropertyState.DIRECT_VALUE),_
	Array(&quot;ExportBookmarksToPDFDestination&quot;,0,false,_
	 com.sun.star.beans.PropertyState.DIRECT_VALUE),_
	Array(&quot;SignPDF&quot;,0,false,_
	 com.sun.star.beans.PropertyState.DIRECT_VALUE),_
	Array(&quot;_OkButtonString&quot;,0,&quot;&quot;,_
	 com.sun.star.beans.PropertyState.DIRECT_VALUE),_
	Array(&quot;Watermark&quot;,0,&quot;&quot;,_
	 com.sun.star.beans.PropertyState.DIRECT_VALUE),_
	Array(&quot;EncryptFile&quot;,0,false,_
	 com.sun.star.beans.PropertyState.DIRECT_VALUE),_
	Array(&quot;PreparedPasswords&quot;,0,,_
	 com.sun.star.beans.PropertyState.DIRECT_VALUE),_
	Array(&quot;RestrictPermissions&quot;,0,false,_
	 com.sun.star.beans.PropertyState.DIRECT_VALUE),_
	Array(&quot;PreparedPermissionPassword&quot;,0,_
	Array(),_
	 com.sun.star.beans.PropertyState.DIRECT_VALUE),_
	Array(&quot;Selection&quot;,0,,_
	 com.sun.star.beans.PropertyState.DIRECT_VALUE),_
	Array(&quot;SignatureLocation&quot;,0,&quot;&quot;,_
	 com.sun.star.beans.PropertyState.DIRECT_VALUE),_
	Array(&quot;SignatureReason&quot;,0,&quot;&quot;,_
	 com.sun.star.beans.PropertyState.DIRECT_VALUE),_
	Array(&quot;SignatureContactInfo&quot;,0,&quot;&quot;,_
	 com.sun.star.beans.PropertyState.DIRECT_VALUE),_
	Array(&quot;SignaturePassword&quot;,0,&quot;&quot;,_
	 com.sun.star.beans.PropertyState.DIRECT_VALUE),_
	Array(&quot;SignatureCertificate&quot;,0,,_
	 com.sun.star.beans.PropertyState.DIRECT_VALUE),_
	Array(&quot;SignatureTSA&quot;,0,&quot;&quot;,_
	 com.sun.star.beans.PropertyState.DIRECT_VALUE),_
	Array(&quot;UseReferenceXObject&quot;,0,false,_
	 com.sun.star.beans.PropertyState.DIRECT_VALUE))

dispatcher.executeDispatch(document, &quot;.uno:ExportToPDF&quot;, &quot;&quot;, 0, args1())

NormalExit:
	exit sub
	
ErrorHandler:
	msgbox(&quot;ExportPDF - unprocessed error&quot;)
	GoTo NormalExit

end sub			&apos;// end ExportPDF		12/23/21.	21:32
&apos;/**/


&apos;// OpenQTerr.bas - Open QTerrxxx.csv for territory xxx.
&apos;//---------------------------------------------------------------
&apos;// OpenQTerr - Open QTerrxxx.csv for territory xxx.
&apos;//		12/23/21.	wmk.	22:45
&apos;//---------------------------------------------------------------

public sub OpenQTerr( psTerrID As String )

&apos;//	Usage.	call OpenQTerr( sTerrID )
&apos;//
&apos;//		sTerrID = territory ID for which to open QTerrxxx.csv
&apos;//
&apos;// Entry.	Territories/.../TerrData/Terrxxx/Working-Files/QTerrxxx.csv
&apos;//				contains territory records for territory xxx, delimited
&apos;//				by &quot;|&quot;
&apos;//
&apos;//	Exit.	QTerrxxx.ods opened in new spreadsheet (visible)
&apos;//
&apos;// Calls.
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	7/9/21.		wmk.	original code.
&apos;//	7/10/21.	wmk.	bug fixes to meet OPTION EXPLICIT; conditional
&apos;//						msgbox; remove QToPubTerr3 call.
&apos;// 7/11/21.	wmk.	functionality simplified to just open QTerrxxx.csv
&apos;//				 and save as QTerrxxx.ods.
&apos;// 12/23/21.	wmk.	modified to use csTerrBase, csTerrDatapPath module-wide
&apos;//				 constants for multihost support.
&apos;//
&apos;//	Notes. Once the user has opened the spreadsheet, the user should
&apos;// be able to run all the Territories macros and process the territory.
&apos;// This sub bypasses the step of opening QTerrxxx.csv, but proves the
&apos;// concept that by using uno:loadComponentFromURL, one can load additional
&apos;// sheets for processing, then close them at will..
&apos;//

&apos;//	constants.
&apos;const csTerrBase = &quot;defined above&quot;
&apos;const csTerrDataPath = &quot;defined above&quot;

&apos;//	local variables.
dim oDoc			As Object	&apos;// generic document object
dim sBaseName		As string	&apos;// target base filename
dim sBasePath		As String	&apos;// target base folder
dim sTargPath		As String	&apos;// target access path
dim sTargFile		As string	&apos;// target filename to open
dim sTerrID			As String	&apos;// local territory ID
dim sFullTargPath	As String	&apos;// full target path
dim sTargetURL		As String	&apos;// target URL
dim oTestDoc		As Object	&apos;// document object

	&apos;// code.
	ON ERROR GOTO ErrorHandler
	oTestDoc = ThisComponent

if 0 = 1 then
xray oTestDoc
endif

	sTerrID = psTerrID
	sBaseName = &quot;QTerr&quot;
	sBasePath = &quot;/Terr&quot;
	sTargPath = sBasePath &amp; sTerrID
REM edit the file name as needed
&apos;    Target = &quot;/media/ubuntu/Windows/Users/Bill/Territories/TerrData/Terr240/Working-Files&quot;_
&apos;      &amp; &quot;/QTerr240.csv&quot;

&apos;    sFullTargPath = csTerrBase &amp; sBasePath &amp; sTerrID &amp; &quot;/Working-Files/&quot;_ 
&apos;		&amp; sBaseName &amp; sTerrID &amp; &quot;.csv&quot;
&apos;    TargetURL = convertToURL(sFullTargPath)

&apos;// open QTerrxxx.csv
    sFullTargPath = csTerrDataPath &amp; sBasePath &amp; sTerrID &amp; &quot;/Working-Files/&quot;_ 
		&amp; sBaseName &amp; sTerrID &amp; &quot;.csv&quot;
		
if 1 = 1 then
	sTargetURL = convertToURL(sFullTargPath)
&apos;    Empty() = Array()
dim Args(1)	As new com.sun.star.beans.PropertyValue 
   Args(1).name = &quot;FilterName&quot;
   Args(1).Value = &quot;Text - txt - csv&quot;
   Args(0).name = &quot;Hidden&quot;
   Args(0).value = False
    oTestDoc = StarDesktop.loadComponentFromURL(sTargetURL, &quot;_blank&quot;, 0, Args())
endif

	SaveQcsvODS(oTestDoc)
	oTestDoc.Close(1)
if 1 = 1 then
 GoTo NormalExit
endif

if 0 = 1 then
  xray oTestDoc
endif
&apos;// open TerrxxxHdr.ods
    sFullTargPath = csTerrDataPath &amp; sBasePath &amp; sTerrID &amp; &quot;/Working-Files/&quot;_ 
		&amp; sBasePath &amp; sTerrID &amp; &quot;Hdr.ods&quot;
dim oTestDoc2	as Object
	oTestDoc2 = ThisComponent
dim Args2(1) 	As new com.sun.star.beans.PropertyValue 
	sTargetURL = convertToURL(sFullTargPath)
   Args2(1).name = &quot;FilterName&quot;
   Args2(1).Value = &quot;calc8&quot;
   Args2(0).name = &quot;Hidden&quot;
   Args2(0).value = False
    oTestDoc2 = StarDesktop.loadComponentFromURL(sTargetURL, &quot;_blank&quot;, 0, Args2())

if 1 = 0 then
dim iResp as integer
	iResp = msgbox(&quot;Both .ods files opened...&quot; &amp; chr(13) &amp; chr(10)_
	  &amp; &quot;  Drop 1st file?&quot;, MB_OKCANCEL+ MB_ICONQUESTION)
	if iResp = IDOK then
	   oTestDoc.close(1)
	endif
endif

	&apos;// Now export the header to the QTerrxxx.ods workbook.
	ExportTerrHdr()	

	&apos;// move to header sheet just exported.
	&apos;// Now close the TerrxxxHdr.ods workbook.
	oTestDoc2.close(1)

&apos;	SaveQCsvODS	&apos;// save as .ods

	&apos;// exit with QTerrxxx.csv still open.
if 1 = 1 then
	GoTo NormalExit
endif

&apos;// Now ready to process territory.
&apos;	QToPubTerr3()
&apos;	oDoc = ThisComponent
&apos;dim oSel	As Object
&apos;	oSel = oDoc.getCurrentSelection()
&apos;	oTestDoc = oDoc.CurrentController.Frame
if 1 = 1 then	
	msgbox( &quot;Moving to &quot; &amp; oTestDoc.getURL &amp; &quot;.&quot; &amp; sBaseName &amp; sTerrID )
	MoveToDocSheet( oTestDoc, sBaseName &amp; sTerrID )
	DkLimeTab()
	ProtectSheet()
	MoveToSheet(sBasePath &amp; sTerrId &amp; &quot;Hdr&quot;)
	DkLimeTab()
	ProtectSheet()
	MoveToSheet(sBaseName &amp; sTerrID)
endif

&apos;// at this point, focus is on oTestDoc; preserve as goTerrODSDoc so
&apos;// can be picked up by MoveTo
	
NormalExit:
	exit sub
	
ErrorHandler:
	msgbox(&quot;OpenQTerr - unprocessed error&quot;)
	GoTo NormalExit

end sub		&apos;// end OpenQTerr	12/23/21. 22:45
&apos;/**/

&apos;// OpenQTerr.bas - Open QTerrxxx.csv for territory xxx.
&apos;//---------------------------------------------------------------
&apos;// OpenQTerr - Open QTerrxxx.csv for territory xxx.
&apos;//		7/11/21.	wmk.	17:31
&apos;//---------------------------------------------------------------

public sub OpenQTerr1( psTerrID As String )

&apos;//	Usage.	call OpenQTerr( sTerrID )
&apos;//
&apos;//		sTerrID = territory ID for which to open QTerrxxx.csv
&apos;//
&apos;// Entry.	Territories/.../TerrData/Terrxxx/Working-Files/QTerrxxx.csv
&apos;//				contains territory records for territory xxx, delimited
&apos;//				by &quot;|&quot;
&apos;//
&apos;//	Exit.	QTerrxxx.ods opened in new spreadsheet (visible)
&apos;//			TerrxxxHdr.ods opened in new spreadsheet (visible)
&apos;//
&apos;// Calls.
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	7/9/21.		wmk.	original code.
&apos;//	7/10/21.	wmk.	bug fixes to meet OPTION EXPLICIT; conditional
&apos;//						msgbox; remove QToPubTerr3 call.
&apos;//
&apos;//	Notes. Once the user has opened the spreadsheet, the user should
&apos;// be able to run all the Territories macros and process the territory.
&apos;// This sub bypasses the step of opening QTerrxxx.csv, but proves the
&apos;// concept that by using uno:loadComponentFromURL, one can load additional
&apos;// sheets for processing, then close them at will..
&apos;//

&apos;//	constants.
const csTerrBase = &quot;/media/ubuntu/Windows/Users/Bill/Territories/TerrData/&quot;

&apos;//	local variables.
dim oDoc			As Object	&apos;// generic document object
dim sBaseName		As string	&apos;// target base filename
dim sBasePath		As String	&apos;// target base folder
dim sTargPath		As String	&apos;// target access path
dim sTargFile		As string	&apos;// target filename to open
dim sTerrID			As String	&apos;// local territory ID
dim sFullTargPath	As String	&apos;// full target path
dim sTargetURL		As String	&apos;// target URL
dim oTestDoc		As Object	&apos;// document object

	&apos;// code.
	ON ERROR GOTO ErrorHandler
	oTestDoc = ThisComponent

if 0 = 1 then
xray oTestDoc
endif
	sTerrID = psTerrID
	sBaseName = &quot;QTerr&quot;
	sBasePath = &quot;Terr&quot;
	sTargPath = sBasePath &amp; sTerrID
REM edit the file name as needed
&apos;    Target = &quot;/media/ubuntu/Windows/Users/Bill/Territories/TerrData/Terr240/Working-Files&quot;_
&apos;      &amp; &quot;/QTerr240.csv&quot;

&apos;    sFullTargPath = csTerrBase &amp; sBasePath &amp; sTerrID &amp; &quot;/Working-Files/&quot;_ 
&apos;		&amp; sBaseName &amp; sTerrID &amp; &quot;.csv&quot;
&apos;    TargetURL = convertToURL(sFullTargPath)

&apos;// open QTerrxxx.csv
    sFullTargPath = csTerrBase &amp; sBasePath &amp; sTerrID &amp; &quot;/Working-Files/&quot;_ 
		&amp; sBaseName &amp; sTerrID &amp; &quot;.csv&quot;
		
if 1 = 1 then
	sTargetURL = convertToURL(sFullTargPath)
&apos;    Empty() = Array()
dim Args(1)	As new com.sun.star.beans.PropertyValue 
   Args(1).name = &quot;FilterName&quot;
   Args(1).Value = &quot;Text - txt - csv&quot;
   Args(0).name = &quot;Hidden&quot;
   Args(0).value = False
    oTestDoc = StarDesktop.loadComponentFromURL(sTargetURL, &quot;_blank&quot;, 0, Args())
endif

SaveQcsvODS(oTestDoc)

if 1 = 1 then
 GoTo NormalExit
endif

if 0 = 1 then
  xray oTestDoc
endif
&apos;// open TerrxxxHdr.ods
    sFullTargPath = csTerrBase &amp; sBasePath &amp; sTerrID &amp; &quot;/Working-Files/&quot;_ 
		&amp; sBasePath &amp; sTerrID &amp; &quot;Hdr.ods&quot;
dim oTestDoc2	as Object
	oTestDoc2 = ThisComponent
dim Args2(1) 	As new com.sun.star.beans.PropertyValue 
	sTargetURL = convertToURL(sFullTargPath)
   Args2(1).name = &quot;FilterName&quot;
   Args2(1).Value = &quot;calc8&quot;
   Args2(0).name = &quot;Hidden&quot;
   Args2(0).value = False
    oTestDoc2 = StarDesktop.loadComponentFromURL(sTargetURL, &quot;_blank&quot;, 0, Args2())

if 1 = 0 then
dim iResp as integer
	iResp = msgbox(&quot;Both .ods files opened...&quot; &amp; chr(13) &amp; chr(10)_
	  &amp; &quot;  Drop 1st file?&quot;, MB_OKCANCEL+ MB_ICONQUESTION)
	if iResp = IDOK then
	   oTestDoc.close(1)
	endif
endif

	&apos;// Now export the header to the QTerrxxx.ods workbook.
	ExportTerrHdr()	

	&apos;// move to header sheet just exported.
	&apos;// Now close the TerrxxxHdr.ods workbook.
	oTestDoc2.close(1)
	oTestDoc.close(1)
	
&apos;	SaveQCsvODS	&apos;// save as .ods

	&apos;// exit with QTerrxxx.csv still open.
if 1 = 1 then
	GoTo NormalExit
endif

&apos;// Now ready to process territory.
&apos;	QToPubTerr3()
&apos;	oDoc = ThisComponent
&apos;dim oSel	As Object
&apos;	oSel = oDoc.getCurrentSelection()
&apos;	oTestDoc = oDoc.CurrentController.Frame
if 1 = 1 then	
	msgbox( &quot;Moving to &quot; &amp; oTestDoc.getURL &amp; &quot;.&quot; &amp; sBaseName &amp; sTerrID )
	MoveToDocSheet( oTestDoc, sBaseName &amp; sTerrID )
	DkLimeTab()
	ProtectSheet()
	MoveToSheet(sBasePath &amp; sTerrId &amp; &quot;Hdr&quot;)
	DkLimeTab()
	ProtectSheet()
	MoveToSheet(sBaseName &amp; sTerrID)
endif

&apos;// at this point, focus is on oTestDoc; preserve as goTerrODSDoc so
&apos;// can be picked up by MoveTo
	
NormalExit:
	exit sub
	
ErrorHandler:
	msgbox(&quot;OpenQTerr - unprocessed error&quot;)
	GoTo NormalExit

end sub		&apos;// end OpenQTerr1	7/11/21. 17:31
&apos;/**/


&apos;// OpenBQTerr.bas - Open QTerrxxx.csv for business territory xxx.
&apos;//---------------------------------------------------------------
&apos;// OpenBQTerr - Open QTerrxxx.csv for territory xxx.
&apos;//		`12/23/21.	wmk.	22:49
&apos;//---------------------------------------------------------------

public sub OpenBQTerr( psTerrID As String )

&apos;//	Usage.	call OpenBQTerr( sTerrID )
&apos;//
&apos;//		sTerrID = territory ID for which to open QTerrxxx.csv
&apos;//
&apos;// Entry.	Territories/.../BTerrData/Terrxxx/Working-Files/QTerrxxx.csv
&apos;//				contains territory records for territory xxx, delimited
&apos;//				by &quot;|&quot;
&apos;//
&apos;//	Exit.	QTerrxxx.ods opened in new spreadsheet (visible)
&apos;//			TerrxxxHdr.ods opened in new spreadsheet (visible)
&apos;//		On exit, all workbooks and sheets will be closed, since
&apos;//		the objects pointing to them are not guaranteed to be
&apos;//		intact for the next process in line.
&apos;//
&apos;// Calls. ExportTerrHdr, SaveQcsvODS.
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	9/25/21.	wmk.	original code; adapted from OpenQTerr.bas.
&apos;// 9/26/21.	wmk.	all workbook/sheet objects closed, since
&apos;//						the pointers get lost anyway.
&apos;// 9/29/21.	wmk.	gbKillProcess used to alert caller of error.
&apos;// 12/23/21.	wmk.	modified to use csTerrBase, csBTerrDataPath module-wide
&apos;//				 constants for multihost support.
&apos;//
&apos;//	Notes. Once the user has opened the spreadsheet, the user should
&apos;// be able to run all the Territories macros and process the territory.
&apos;// This sub bypasses the step of opening QTerrxxx.csv, but proves the
&apos;// concept that by using uno:loadComponentFromURL, one can load additional
&apos;// sheets for processing, then close them at will..
&apos;//

&apos;//	constants.
&apos;const csTerrBase = &quot;defined above&quot;
&apos;const csBTerrDataPath = &quot;defined above&quot;

&apos;//	local variables.
dim sBaseName		As string	&apos;// target base filename
dim sBasePath		As String	&apos;// target base folder
dim sTargPath		As String	&apos;// target access path
dim sTargFile		As string	&apos;// target filename to open
dim sTerrID			As String	&apos;// local territory ID
dim sFullTargPath	As String	&apos;// full target path
dim sTargetURL		As String	&apos;// target URL
dim oTestDoc		As Object	&apos;// document object

	&apos;// code.
	ON ERROR GOTO ErrorHandler
	oTestDoc = ThisComponent

if 0 = 1 then
xray oTestDoc
endif

	sTerrID = psTerrID
	sBaseName = &quot;QTerr&quot;
	sBasePath = &quot;/Terr&quot;
	sTargPath = sBasePath &amp; sTerrID
REM edit the file name as needed
&apos;    Target = &quot;/media/ubuntu/Windows/Users/Bill/Territories/TerrData/Terr240/Working-Files&quot;_
&apos;      &amp; &quot;/QTerr240.csv&quot;

&apos;    sFullTargPath = csTerrBase &amp; sBasePath &amp; sTerrID &amp; &quot;/Working-Files/&quot;_ 
&apos;		&amp; sBaseName &amp; sTerrID &amp; &quot;.csv&quot;
&apos;    TargetURL = convertToURL(sFullTargPath)

&apos;// open QTerrxxx.csv
    sFullTargPath = csBTerrPath &amp; sBasePath &amp; sTerrID &amp; &quot;/Working-Files/&quot;_ 
		&amp; sBaseName &amp; sTerrID &amp; &quot;.csv&quot;
		
	sTargetURL = convertToURL(sFullTargPath)
&apos;    Empty() = Array()
dim Args(1)	As new com.sun.star.beans.PropertyValue 
	Args(1).name = &quot;FilterName&quot;
	Args(1).Value = &quot;Text - txt - csv&quot;
	Args(0).name = &quot;Hidden&quot;
	Args(0).value = False
    oTestDoc = StarDesktop.loadComponentFromURL(sTargetURL, &quot;_blank&quot;, 0, Args())

if 0 = 1 then
  xray oTestDoc
endif
&apos;// open TerrxxxHdr.ods
    sFullTargPath = csBTerrPath &amp; sBasePath &amp; sTerrID &amp; &quot;/Working-Files/&quot;_ 
		&amp; sBasePath &amp; sTerrID &amp; &quot;Hdr.ods&quot;
dim oTestDoc2	as Object
	oTestDoc2 = ThisComponent
dim Args2(1) 	As new com.sun.star.beans.PropertyValue 
	sTargetURL = convertToURL(sFullTargPath)
	Args2(1).name = &quot;FilterName&quot;
	Args2(1).Value = &quot;calc8&quot;
	Args2(0).name = &quot;Hidden&quot;
	Args2(0).value = False
    oTestDoc2 = StarDesktop.loadComponentFromURL(sTargetURL, &quot;_blank&quot;, 0, Args2())

if 0 = 1 then
dim iResp as integer
	iResp = msgbox(&quot;Both .ods files opened...&quot; &amp; chr(13) &amp; chr(10)_
	  &amp; &quot;  Drop 1st file?&quot;, MB_OKCANCEL+ MB_ICONQUESTION)
	if iResp = IDOK then
	   oTestDoc.close(1)
	endif
endif
	
	&apos;// Now export the header to the QTerrxxx.ods workbook.
	ExportTerrHdr()	

&apos;	msgbox( &quot;Moving to &quot; &amp; oTestDoc.getURL &amp; &quot;.&quot; &amp; sBaseName &amp; sTerrID )
	&apos;// Now close the TerrxxxHdr.ods workbook.
	oTestDoc2.close(1)

	&apos;// move to header sheet just exported.
&apos;	MoveToDocSheet( oTestDoc, sBaseName &amp; sTerrID )
&apos;	oTestDoc = ThisComponent
	SaveQcsvODS( oTestDoc )
	oTestDoc.Close(1)
		
&apos;// Now ready to process territory.	
&apos;	DkLimeTab()
&apos;	ProtectSheet()
&apos;	MoveToSheet(sBasePath &amp; sTerrId)
&apos;	DkLimeTab()
&apos;	ProtectSheet()
&apos;	MoveToDocSheet(oTestDoc,sBaseName &amp; sTerrID)
	
	
NormalExit:
	exit sub
	
ErrorHandler:
	msgbox(&quot;OpenBQTerr - unprocessed error&quot;)
	gbKillProcess = true
	GoTo NormalExit
	
end sub		&apos;// end OpenBQTerr	12/23/21. 22:49
&apos;/**/

&apos;// QcsvToBridge.bas
&apos;//---------------------------------------------------------------
&apos;// QcsvToBridge - Query .csv sheet to Admin-Bridge sheet.
&apos;//		9/30/20.	wmk.	07:30
&apos;//---------------------------------------------------------------

public sub QcsvToBridge()

&apos;//	Usage.	macro call or
&apos;//			call QcsvToBridge()
&apos;//
&apos;// Entry.
&apos;//	sheet selected with .csv fields generated by SQL/Query of any of the
&apos;// .Props tables (e.g. SplitProps, TerrProps, BizProps, with rows selected
&apos;// for a given territory. Following are the columns and .Props columns:
&apos;//
&apos;//	OwningParcel  UnitAddress  Resident1 Resident2 Phone1 Phone2 RefUSA-Phone
&apos;//			A			B			C		D		  E		 F		G	
&apos;//  SubTerrItory CongTerrID DoNotCall RSO Foreign  RecordDate SitusAddress  DelPending
&apos;//		H				I		   J     K     L		M			  N			  O
&apos;//
&apos;//	Exit.	produces an &quot;Admin-Bridge&quot; formatted sheet with the x..Props columns:
&apos;//	OwningParcel  UnitAddress  Resident1 Resident2 Phone1 Phone2 RefUSA-Phone
&apos;//	 A (from A)	  B (from K)	C (from B)  D (from C)	E	 F		G	
&apos;//
&apos;//  SubTerrItory CongTerrID DoNotCall RSO Foreign  RecordDate SitusAddress
&apos;//		H				I		   J     K     L	(header C2)		N (from N)
&apos;//
&apos;//  Property Use	DelPending
&apos;//		  O				P
&apos;//
&apos;//		along with 4 header rows, populated with the Admin-Bridge header information.
&apos;//&lt;Area-CommonName&gt;			Property ID	&lt;OwnerParcel&gt;			Admin-Bridge formatted sheet
&apos;//Units shown:	63	9/16/20	Owner		&lt;OwnerName1&gt;
&apos;//City	Venice	34285	Streets/Addrs	&lt;Streets-Address(s)&gt;
&apos;//SubTerritory		CongTerrID

&apos;// Calls.	SetTerrHeader, SetBridgeHeadings
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	9/18/20.	wmk.	original code; adapted from EditToTerr
&apos;// 9/24/20.	wmk.	mod to add PropUse column, SetTerrHeader, 
&apos;//						SetBridgeHeadings
&apos;// 9/30/20.	wmk.	dead code removed
&apos;//
&apos;//	Notes.
&apos;// Method.
&apos;//		insert 4 rows at top
&apos;//		use SetBridgeHeadings for setting header fields

&apos;//	constants.
const COL_PARCEL=0		&apos;// &quot;OwningParcel&quot; column index
const COL_A=0
const COL_B=1
const COL_C=2	
const COL_D=3
const COL_E=4
const COL_F=5
const COL_G=6			&apos;// column G index
const COL_H=7			&apos;// column H index
const COL_I=8			&apos;// column I index
const COL_J=9			&apos;// column J index
const COL_K=10			&apos;// column K index
const COL_L=11			&apos;// column L index (DoNotCall)
const COL_M=12			&apos;// column M index (RSO)
const COL_N=13			&apos;// column N index (Foreign)
const ROW_1=0
const ROW_2=1
const ROW_3=2
const ROW_4=3
const ROW_HEADING=4		&apos;// headings row index
const LJUST=1		&apos;// left-justify HoriJustify				&apos;// mod052020
const CJUST=2		&apos;// center HoriJustify						&apos;// mod052020
const RJUST=3		&apos;// right-justify HoriJustify				&apos;// mod052320
const MDYY=30		&apos;// &apos;M/D/YY&apos; format value

&apos;//	local variables.
Dim oDoc As Object
Dim oSheet As Object
Dim NewColumn As Object
dim oSel as Object
dim iSheetIx as integer
dim oRange as Object
dim lThisRow as long		&apos;// current row selected on sheet
dim oMrgRange	As Object	&apos;// merge range

dim oCell	As Object		&apos;// cell working on
dim i		As Integer		&apos;// loop index
dim sPropID	As String		&apos;// property ID
dim sSubTerr	As String	&apos;// subterritory
dim sCongTerr	As String	&apos;// cong terr ID
dim lRowCount	As Long		&apos;// row count of addresses
dim dDate		As Double	&apos;// date value
dim sCityStZip	As String	&apos;// concatenated City, State, Zip
dim sNotes		As String	&apos;// notes field
dim nCols		As Integer	&apos;// removal column count

	&apos;// code.
	ON ERROR GoTo ErrorHandler
	oDoc = ThisComponent
	oSel = oDoc.getCurrentSelection()
	oRange = oSel.RangeAddress
	iSheetIx = oRange.Sheet
	oSheet = oDoc.Sheets(iSheetIx)

	InsertTerrHdr(&quot;Admin-Bridge formatted sheet&quot;)		&apos;// set territory sheet header information
	SetBridgeHeadings()
	
NormalExit:
	exit sub

ErrorHandler:
	msgbox(&quot;QcsvToBridge - unprocessed error.&quot;)
	GoTo NormalExit

end sub		&apos;// end QcsvToBridge		9/30/20
&apos;/**/

&apos;// QGetToBridge.bas
&apos;//---------------------------------------------------------------
&apos;// QGetToBridge - Query .csv sheet to Admin-Bridge sheet.
&apos;//		7/9/21.	wmk.	23:26
&apos;//---------------------------------------------------------------

public sub QGetToBridge()

&apos;//	Usage.	macro call or
&apos;//			call QGetToBridge()
&apos;//
&apos;// Entry.
&apos;//	sheet selected with .csv fields generated by SQL/Query of any of the
&apos;// .Props tables (e.g. SplitProps, TerrProps, BizProps, with rows selected
&apos;// for a given territory. Note: differs from QcsvToBridge only slightly;
&apos;// The Get .csv sheet has  no column headings, so 5 rows are inserted
&apos;// insted of 4; all the rest of the code is cloned from QcsvToBridge. 
&apos;// Following are the columns and .Props columns:
&apos;//
&apos;//	OwningParcel  UnitAddress  Unit Resident1 Phone1 Phone2 RefUSA-Phone
&apos;//			A			B		C		D		  E		 F		G	
&apos;//  SubTerrItory CongTerrID DoNotCall RSO Foreign  RecordDate SitusAddress  DelPending
&apos;//		H				I		   J     K     L		M			  N			  O
&apos;//
&apos;//	Exit.	produces an &quot;Admin-Bridge&quot; formatted sheet with the x..Props columns:
&apos;//	OwningParcel  UnitAddress  Unit 	Resident1	 Phone1 Phone2 RefUSA-Phone
&apos;//	 A (from A)	  B (from B)	C (from C)  D (from D)	E	 F		G	
&apos;//
&apos;//  SubTerrItory CongTerrID DoNotCall RSO Foreign  RecordDate SitusAddress
&apos;//		H				I		   J     K     L	(header C2)		N (from N)
&apos;//
&apos;//  Property Use	DelPending
&apos;//		  O				P
&apos;//
&apos;//		along with 4 header rows, populated with the Admin-Bridge header information
&apos;//		and headings row.
&apos;//&lt;Area-CommonName&gt;			Property ID	&lt;OwnerParcel&gt;			Admin-Bridge formatted sheet
&apos;//Units shown:	63	9/16/20	Owner		&lt;OwnerName1&gt;
&apos;//City	Venice	34285	Streets/Addrs	&lt;Streets-Address(s)&gt;
&apos;//SubTerritory		CongTerrID

&apos;// Calls.	InsertQTerrHeader, SetBridgeHeadings, BoldHeadings, FreezeView,
&apos;//			SetBridgeColWidths
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	9/29/20.	wmk.	original code; cloned from QcsvToBridge
&apos;//	10/5/20.	wmk.	add TerrID to InsertQTerrHdr call
&apos;//	10/24/20.	wmk.	updated documentation for Unit/Header1 placement
&apos;// 11/4/20.	wmk.	accommodate source sheet names Terrxxx or QTerrxxx
&apos;//						to match new QGetTerr SQL query file naming.
&apos;//	7/9/21.		wmk.	eliminated ending FreezeView to see if helps downstream
&apos;//						cell selection;restored FreezeView.
&apos;//
&apos;//	Notes.
&apos;// Method.
&apos;//		insert 4 rows and headings row at top
&apos;//		column data remains intact in place
&apos;//		use SetBridgeHeadings for setting header fields

&apos;//	constants.
const COL_PARCEL=0		&apos;// &quot;OwningParcel&quot; column index
const COL_A=0
const COL_B=1
const COL_C=2	
const COL_D=3
const COL_E=4
const COL_F=5
const COL_G=6			&apos;// column G index
const COL_H=7			&apos;// column H index
const COL_I=8			&apos;// column I index
const COL_J=9			&apos;// column J index
const COL_K=10			&apos;// column K index
const COL_L=11			&apos;// column L index (DoNotCall)
const COL_M=12			&apos;// column M index (RSO)
const COL_N=13			&apos;// column N index (Foreign)
const ROW_1=0
const ROW_2=1
const ROW_3=2
const ROW_4=3
const ROW_HEADING=4		&apos;// headings row index
const LJUST=1		&apos;// left-justify HoriJustify				&apos;// mod052020
const CJUST=2		&apos;// center HoriJustify						&apos;// mod052020
const RJUST=3		&apos;// right-justify HoriJustify				&apos;// mod052320
const MDYY=30		&apos;// &apos;M/D/YY&apos; format value

&apos;//	local variables.
Dim oDoc As Object
Dim oSheet As Object
Dim NewColumn As Object
dim oSel as Object
dim iSheetIx as integer
dim oRange as Object
dim lThisRow as long		&apos;// current row selected on sheet
dim oMrgRange	As Object	&apos;// merge range

dim oCell	As Object		&apos;// cell working on
dim i		As Integer		&apos;// loop index
dim sPropID	As String		&apos;// property ID
dim sSubTerr	As String	&apos;// subterritory
dim sCongTerr	As String	&apos;// cong terr ID
dim lRowCount	As Long		&apos;// row count of addresses
dim dDate		As Double	&apos;// date value
dim sCityStZip	As String	&apos;// concatenated City, State, Zip
dim sNotes		As String	&apos;// notes field
dim nCols		As Integer	&apos;// removal column count
dim sTerrID		As String	&apos;// territory ID
dim sSheetName	As String	&apos;// sheet name

	&apos;// code.
	ON ERROR GoTo ErrorHandler
	oDoc = ThisComponent
	oSel = oDoc.getCurrentSelection()
	oRange = oSel.RangeAddress
	iSheetIx = oRange.Sheet
	oSheet = oDoc.Sheets(iSheetIx)
	sSheetName = oSheet.Name
	if strcomp(left(sSheetName,1),&quot;Q&quot;) = 0 then
		sTerrID = Mid(oSheet.Name,6,3)	
	else
		sTerrID = Mid(oSheet.Name,5,3)
	endif
	InsertQTerrHdr(sTerrID, &quot;Admin-Bridge formatted sheet&quot;)		&apos;// set territory sheet header information
	SetBridgeHeadings()
	SetBridgeColWidths()
	BoldHeadings()
	FreezeView()
		
NormalExit:
	exit sub

ErrorHandler:
	msgbox(&quot;QGetToBridge - unprocessed error.&quot;)
	GoTo NormalExit

end sub		&apos;// end QGetToBridge		7/9/21.	23:26
&apos;/**/


&apos;// QGetToBizBridge.bas
&apos;//---------------------------------------------------------------
&apos;// QGetToBizBridge - Query .csv sheet to Admin-Bridge sheet.
&apos;//		9/26/21.	wmk.	13:09
&apos;//---------------------------------------------------------------

public sub QGetToBizBridge()

&apos;//	Usage.	macro call or
&apos;//			call QGetToBizBridge()
&apos;//
&apos;// Entry.
&apos;//	sheet selected with .csv fields generated by SQL/Query of any of the
&apos;// .Props tables (e.g. SplitProps, TerrProps, BizProps, with rows selected
&apos;// for a given territory. Note: differs from QcsvToBridge only slightly;
&apos;// The Get .csv sheet has  no column headings, so 5 rows are inserted
&apos;// insted of 4; all the rest of the code is cloned from QcsvToBridge.
&apos;//
&apos;// Method. 
&apos;//	remove columns F (City) and G (Zip) bringing gender and title into correct
&apos;//	 columns, moving H and I data into F and G;
&apos;//	Columns J-M automatically shifted by removing F and G
&apos;//now move over to H;
&apos;//	Column headings H-L Territory, DoNotCall,RecordDate,SunBiz,DelPending
&apos;//
&apos;// Following are the columns and .Props columns:
&apos;//CompanyName	UnitAddress	Owner  ContactPhone  BizDesc [ ]  [ ] Gender Title
&apos;//		A			B		  C			D		   E		 		F	   G	
&apos;//   Terr DoNotCall RecDate SunbizDoc	Del
&apos;//		H		I	   J    	 K    	 L	
&apos;//
&apos;//	Exit.	produces a &quot;Biz-Bridge&quot; formatted sheet with the x..Props columns:
&apos;//CompanyName	UnitAddress	Owner  ContactPhone  BizDesc Gender Title
&apos;//		A			B		  C			D		   E 		F	   G	
&apos;//   [Terr] DoNotCall  [ RecDate ]	[SunbizDoc]	[Del]
&apos;//				H	  (header C2)
&apos;//
&apos;//		along with 4 header rows, populated with the Biz-Bridge header information
&apos;//		and headings row.
&apos;//&lt;Area-CommonName&gt;				Biz-Bridge formatted sheet
&apos;//Units shown:	63	9/16/20	Owner		&lt;OwnerName1&gt;
&apos;//City	Venice	34285	Streets/Addrs	&lt;Streets-Address(s)&gt;
&apos;//SubTerritory		CongTerrID

&apos;// Calls.	InsertQBizHeader, SetBridgeHeadings, BoldHeadings, FreezeView,
&apos;//			SetBizColWidths
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;// 9/25/21.	wmk.	original code; adapted from QGetToBridge;
&apos;//						InsertQTerrHeader replaced with InsertQBizHeader;
&apos;//						SetBridgeHeadings replaced with SetBizHeadings;
&apos;//						SetBridgeColWidths replaced with SetBizColWidths.
&apos;// 9/26/21.	wmk.	sheet column documentation; columns F and G removed before
&apos;//						adding header to make life easy.
&apos;// Legacy mods.
&apos;//	9/25/20.	wmk.	original code; cloned from QcsvToBizBridge.
&apos;// 9/26/21.	wmk.	document method and implement.
&apos;//	10/5/20.	wmk.	add TerrID to InsertQTerrHdr call
&apos;//	10/24/20.	wmk.	updated documentation for Unit/Header1 placement
&apos;// 11/4/20.	wmk.	accommodate source sheet names Terrxxx or QTerrxxx
&apos;//						to match new QGetTerr SQL query file naming.
&apos;//	7/9/21.		wmk.	eliminated ending FreezeView to see if helps downstream
&apos;//						cell selection;restored FreezeView.
&apos;//
&apos;//	Notes. The first business territory created with the new Bridge table
&apos;// data from the Terrxxx_RU.db is 502. That territory Terr502_BizTerr.ods
&apos;// has the detailed instructions as to how the column data was massaged
&apos;// into BizBridge format. The sheet with the instructions is named
&apos;// QTerr502B_BizTerrTemplate.
&apos;//
&apos;//
&apos;// Method.
&apos;//		insert 4 rows and headings row at top
&apos;//		column data remains intact in place
&apos;//		use SetBridgeHeadings for setting header fields

&apos;//	constants.
const COL_PARCEL=0		&apos;// &quot;OwningParcel&quot; column index
const COL_A=0
const COL_B=1
const COL_C=2	
const COL_D=3
const COL_E=4
const COL_F=5
const COL_G=6			&apos;// column G index
const COL_H=7			&apos;// column H index
const COL_I=8			&apos;// column I index
const COL_J=9			&apos;// column J index
const COL_K=10			&apos;// column K index
const COL_L=11			&apos;// column L index (DoNotCall)
const COL_M=12			&apos;// column M index (RSO)
const COL_N=13			&apos;// column N index (Foreign)
const ROW_1=0
const ROW_2=1
const ROW_3=2
const ROW_4=3
const ROW_HEADING=4		&apos;// headings row index
const LJUST=1		&apos;// left-justify HoriJustify				&apos;// mod052020
const CJUST=2		&apos;// center HoriJustify						&apos;// mod052020
const RJUST=3		&apos;// right-justify HoriJustify				&apos;// mod052320
const MDYY=30		&apos;// &apos;M/D/YY&apos; format value

&apos;//	local variables.
Dim oDoc As Object
Dim oSheet As Object
Dim NewColumn As Object
dim oSel as Object
dim iSheetIx as integer
dim oRange as Object
dim lThisRow as long		&apos;// current row selected on sheet
dim oMrgRange	As Object	&apos;// merge range

dim oCell	As Object		&apos;// cell working on
dim i		As Integer		&apos;// loop index
dim sPropID	As String		&apos;// property ID
dim sSubTerr	As String	&apos;// subterritory
dim sCongTerr	As String	&apos;// cong terr ID
dim lRowCount	As Long		&apos;// row count of addresses
dim dDate		As Double	&apos;// date value
dim sCityStZip	As String	&apos;// concatenated City, State, Zip
dim sNotes		As String	&apos;// notes field
dim nCols		As Integer	&apos;// removal column count
dim sTerrID		As String	&apos;// territory ID
dim sSheetName	As String	&apos;// sheet name

	&apos;// code.
	ON ERROR GoTo ErrorHandler
	oDoc = ThisComponent
	oSel = oDoc.getCurrentSelection()
	oRange = oSel.RangeAddress
	iSheetIx = oRange.Sheet
	oSheet = oDoc.Sheets(iSheetIx)
	sSheetName = oSheet.Name
	if strcomp(left(sSheetName,1),&quot;Q&quot;) = 0 then
		sTerrID = Mid(oSheet.Name,6,3)	
	else
		sTerrID = Mid(oSheet.Name,5,3)
	endif

	&apos;// remove columns F and G.
	oSheet.Columns.removeByIndex(COL_F, 2)
	
&apos;//	InsertQTerrHdr(sTerrID, &quot;Admin-Bridge formatted sheet&quot;)		&apos;// set territory sheet header information
	InsertQBizHdr(sTerrID, &quot;Biz-Bridge formatted sheet&quot;)
&apos;//	SetBridgeHeadings()
	SetBizHeadings()
&apos;//	SetBridgeColWidths()
	SetBizColWidths()
	BoldHeadings()
	FreezeView()
		
NormalExit:
	exit sub

ErrorHandler:
	msgbox(&quot;QGetToBizBridge - unprocessed error.&quot;)
	GoTo NormalExit

end sub		&apos;// end QGetToBizBridge		9/26/21.	13:09
&apos;/**/

&apos;// QSCToBridge.bas
&apos;//-------------------------------------------------------------------
&apos;// QSCToBridge - Query SC extracted .csv sheet to Admin-Bridge sheet.
&apos;//		10/24/20.	wmk.	16:45
&apos;//-------------------------------------------------------------------

public sub QSCToBridge()

&apos;//	Usage.	macro call or
&apos;//			call QSCToBridge(); used to get multiowner condos from SC
&apos;//			query to MultiMail.db [SplitOwners table] via Bridge
&apos;//
&apos;// Entry.
&apos;//	sheet selected with .csv fields generated by SQL/Query of any of the
&apos;// SC download tables (e.g. VeniceNTerritory) with rows selected by query
&apos;// (typically a property address that may be a multiunit/multiowner condo.
&apos;// QSCToBridge assumes headings row present from query.
&apos;//
&apos;// Following are the SC columns and .Props columns:
&apos;//
&apos;//	&quot;Account #&quot;	&quot;Owner 1&quot;	&quot;Owner 2&quot;	&quot;Owner 3&quot;	&quot;Mailing Address 1&quot;
&apos;//		A			B			C			D			E
&apos;//	&quot;Mailing Address 2&quot;	  &quot;Mailing City&quot;	&quot;Mailing State&quot;	&quot;Mailing Zip Code&quot;
&apos;//			F					G					H				I
&apos;//
&apos;//	&quot;Mailing Country&quot;   Situs Address (Property Address)	Situs City
&apos;//		J						K								L		
&apos;//
&apos;//	Situs State 	Situs Zip Code		Property Use
&apos;// 	M				N					O				
&apos;//
&apos;//	Exit.	produces an &quot;Admin-Bridge&quot; formatted sheet with the x..Props columns:
&apos;//	OwningParcel  UnitAddress  	Unit		 Resident1	 Phone1 Phone2 RefUSA-Phone
&apos;//	 A (from A)	  B (from K)	C (from K)  D (from B)		E	   F		G	
&apos;//
&apos;//  SubTerrItory CongTerrID DoNotCall RSO Foreign  RecordDate SitusAddress
&apos;//		H				I		   J     K     L	(header C2)		N (from K)
&apos;//
&apos;//  Property Use	DelPending
&apos;//		O (from O)		P
&apos;//
&apos;//		along with 4 header rows, populated with the Admin-Bridge header information.
&apos;//&lt;Area-CommonName&gt;			Property ID	&lt;OwnerParcel&gt;			Admin-Bridge formatted sheet
&apos;//Units shown:	63	9/16/20	Owner		&lt;OwnerName1&gt;
&apos;//City	Venice	34285	Streets/Addrs	&lt;Streets-Address(s)&gt;
&apos;//SubTerritory		CongTerrID
&apos;//
&apos;// Calls.	InsertTerrHdr, ForceRecalc.
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	9/23/20.	wmk.	original code; adapted from QcsvToBridge
&apos;// 9/30/20.	wmk.	added BoldHeadings, FreezeView calls; dead code removed
&apos;// 10/24/20.	wmk.	modified to support Unit field, Resident2 field dropped
&apos;//
&apos;//	Notes.	When this routine is picking up rows of a resultant query
&apos;// from SC data, if the rows are territory parcels that are NOT 
&apos;// SplitProps parcels, there will be relevant unit information in the
&apos;// SC data. If they ARE parcels that are SplitProps, there should NEVER
&apos;// be any unit token in the situs address.
&apos;//
&apos;// Method.
&apos;//		Remove all columns P through rightmost (AW?)
&apos;//			Z is index 25 AZ is 51  AW is 47
&apos;//		Move column B contents to D
&apos;//		Move column K contents (substr(1,35) to B
&apos;//     Move column K contents (substr(36,*) to C
&apos;//		Remove columns E through J
&apos;//		Insert Territory sheet header at top
&apos;//		
&apos;//	constants.
const COL_PARCEL=0		&apos;// &quot;OwningParcel&quot; column index
const COL_A=0
const COL_B=1
const COL_C=2	
const COL_D=3
const COL_E=4
const COL_F=5
const COL_G=6			&apos;// column G index
const COL_H=7			&apos;// column H index
const COL_I=8			&apos;// column I index
const COL_J=9			&apos;// column J index
const COL_K=10			&apos;// column K index
const COL_L=11			&apos;// column L index (DoNotCall)
const COL_M=12			&apos;// column M index (RSO)
const COL_N=13			&apos;// column N index (Foreign)
const COL_O=14			&apos;// column O index (Property Use)
const COL_P=15			&apos;// column P index
const COL_AW=47			&apos;// column AW index (Status)
const ROW_1=0
const ROW_2=1
const ROW_3=2
const ROW_4=3
const ROW_HEADING=4		&apos;// headings row index
const LJUST=1		&apos;// left-justify HoriJustify				&apos;// mod052020
const CJUST=2		&apos;// center HoriJustify						&apos;// mod052020
const RJUST=3		&apos;// right-justify HoriJustify				&apos;// mod052320
const MDYY=30		&apos;// &apos;M/D/YY&apos; format value
const ZEROS_4=121	&apos;// four zeros number format value

&apos;//	local variables.
Dim oDoc As Object
Dim oSheet As Object
Dim NewColumn As Object
dim oSel as Object
dim oSel2	As Object		&apos;// active row selection
dim iSheetIx as integer
dim oRange as Object
dim lThisRow as long		&apos;// current row selected on sheet
dim oMrgRange	As Object	&apos;// merge range

dim oCell	As Object		&apos;// cell working on
dim oCell2	As Object		&apos;// related to cell working on
dim i		As Integer		&apos;// loop index
dim sPropID	As String		&apos;// property ID
dim sSubTerr	As String	&apos;// subterritory
dim sCongTerr	As String	&apos;// cong terr ID
dim lRowCount	As Long		&apos;// row count of addresses
dim dDate		As Double	&apos;// date value
dim sCityStZip	As String	&apos;// concatenated City, State, Zip
dim sNotes		As String	&apos;// notes field
dim nCols		As Integer	&apos;// removal column count
dim oCols		As Object	&apos;// .Columns this sheet
dim sCity		As String
dim sZip		As String

	&apos;// code.
	ON ERROR GoTo ErrorHandler
	oDoc = ThisComponent
	oSel = oDoc.getCurrentSelection()
	oRange = oSel.RangeAddress
	iSheetIx = oRange.Sheet
	oSheet = oDoc.Sheets(iSheetIx)
	oCols = oSheet.Columns
	
	&apos;// get active row count (no heading)
	SelectActiveRows()
	oSel2 = oDoc.getCurrentSelection()
	oMrgRange = oSel2.RangeAddress
	lRowCount = oMrgRange.EndRow+1 - oMrgRange.StartRow + ROW_HEADING
	SetSelection(oRange)		&apos;// restore entry selection



&apos;//		Remove all columns P through rightmost (AW?)
&apos;//			Z is index 25 AZ is 51  AW is 47
	oSheet.Columns.removeByIndex(COL_P, COL_AW+1-COL_O)

&apos;//		Move column B contents to D
	oMrgRange = oRange
	oMrgRange.StartColumn = COL_B
	oMrgRange.EndColumn = COL_B
	oMrgRange.StartRow = ROW_2
	oMrgRange.EndRow = ROW_2 + lRowCount-1
dim oTarget as new com.sun.star.table.CellAddress
	oTarget.Sheet = oRange.Sheet
	oTarget.Column = COL_D
	oTarget.Row = ROW_2
	oSheet.moveRange(oTarget,oMrgRange)
	

&apos;//		Move column B contents to C
	oMrgRange = oRange
	oMrgRange.StartColumn = COL_B
	oMrgRange.EndColumn = COL_B
	oMrgRange.StartRow = ROW_2
	oMrgRange.EndRow = ROW_2 + lRowCount-1
	oTarget.Sheet = oRange.Sheet
	oTarget.Column = COL_C
	oTarget.Row = ROW_2
	oSheet.moveRange(oTarget,oMrgRange)

&apos;//		Copy column K contents (with unit) to B
	oMrgRange = oRange
	oMrgRange.StartColumn = COL_K
	oMrgRange.EndColumn = COL_K
	oMrgRange.StartRow = ROW_2
	oMrgRange.EndRow = ROW_2 + lRowCount-1
	oTarget.Sheet = oRange.Sheet
	oTarget.Column = COL_B
	oTarget.Row = ROW_2
	oSheet.copyRange(oTarget,oMrgRange)

&apos;//		Remove columns E through J
	oSheet.Columns.removeByIndex(COL_E, COL_J+1-COL_E)

&apos;//		Move column I to column O
	oMrgRange = oRange
	oMrgRange.StartColumn = COL_I
	oMrgRange.EndColumn = COL_I
	oMrgRange.StartRow = ROW_2
	oMrgRange.EndRow = ROW_2 + lRowCount-1
	oTarget.Sheet = oRange.Sheet
	oTarget.Column = COL_O
	oTarget.Row = ROW_2
	oSheet.moveRange(oTarget,oMrgRange)
	oCols(COL_O).setPropertyValue(&quot;NumberFormat&quot;, ZEROS_4)
	oCols(COL_O).setPropertyValue(&quot;HoriJustify&quot;, CJUST)
	
&apos;//		Insert Territory sheet header at top
	InsertTerrHdr(&quot;Admin-Bridge formatted sheet&quot;)

&apos;//     column E info to col N
	oMrgRange = oRange
	oMrgRange.StartColumn = COL_E
	oMrgRange.EndColumn = COL_E
	oMrgRange.StartRow = ROW_HEADING+1
	oMrgRange.EndRow = ROW_HEADING + lRowCount
	oTarget.Sheet = oRange.Sheet
	oTarget.Column = COL_N
	oTarget.Row = ROW_HEADING+1
	oSheet.moveRange(oTarget,oMrgRange)

&apos;//		City from F6 to B3
	oCell = oSheet.getCellByPosition(COL_F, ROW_HEADING+1)
	sCity = oCell.String
	oCell2 = oSheet.getCellByPosition(COL_B, ROW_3)
	oCell2.String = sCity
	
&apos;//		Zip  from H6 to C3
	oCell = oSheet.getCellByPosition(COL_H, ROW_HEADING+1)
	sZip = oCell.String
	oCell2 = oSheet.getCellByPosition(COL_C, ROW_3)
	oCell2.String = sZip
	
&apos;//	empty columns F - H, using columns I - K
	oMrgRange = oRange
	oMrgRange.StartColumn = COL_I
	oMrgRange.EndColumn = COL_K
	oMrgRange.StartRow = ROW_HEADING+1
	oMrgRange.EndRow = ROW_HEADING + lRowCount
	oTarget.Sheet = oRange.Sheet
	oTarget.Column = COL_F
	oTarget.Row = ROW_HEADING+1
	oSheet.copyRange(oTarget,oMrgRange)

	lThisRow = ROW_HEADING
&apos;// for each active row
&apos;// set all H values to &quot;=$B$4&quot; formula, SubTerritory
&apos;// set all I values to &quot;=$D$4&quot; formula, CongTerrID

	for i = 0 to lRowCount-1
		lThisRow = lThisRow + 1

	&apos;// set all C values (Unit) to substr(B,36)
		oCell = oSheet.getCellByPosition(COL_B, lThisRow)
		oCell2 = oSheet.getCellByPosition(COL_C, lThisRow)
		oCell2.String = substr(oCell.String, 36)
		
	&apos;// set all B values (UnitAddress) to substr(B,1,35)
		oCell.String = trim(substr(oCell.String, 1, 35))
		
	&apos;//	set all H values to &quot;=$B$4&quot; SubTerritory
		oCell = oSheet.getCellByPosition(COL_H, lThisRow)
		oCell.setFormula(&quot;=$B$4&quot;)
		oCell.HoriJustify = CJUST
		
	&apos;// set all I values to &quot;$D$4&quot;	CongTerrID
		oCell = oSheet.getCellByPosition(COL_I, lThisRow)
		oCell.setFormula(&quot;=$D$4&quot;)
		oCell.HoriJustify = CJUST

&apos;// next row
	next i
	
	SetBridgeHeadings()
	SetBridgeColWidths()
	BoldHeadings()
	ForceRecalc()
	FreezeView()
	
NormalExit:
	exit sub

ErrorHandler:
	msgbox(&quot;QSCToBridge - unprocessed error.&quot;)
	GoTo NormalExit

end sub		&apos;// end QSCToBridge		10/24/20
&apos;/**/

&apos;// QToPubTerr.bas
&apos;//------------------------------------------------------------------
&apos;// QToPubTerr - Take SQL Territory query .csv data to PubTerr sheet.
&apos;//		10/14/20.	wmk.
&apos;//------------------------------------------------------------------
	
public sub QToPubTerr()

&apos;//	Usage.	macro call or
&apos;//			call QToPubTerr()
&apos;//
&apos;// Entry.	user in workbook with sheet &quot;Terrxxx&quot; that is the query
&apos;//			data from the SQL territory database
&apos;//			a second sheet &quot;TerrxxxHdr should also have been loaded
&apos;//			into the workbook, so that QGetToBridge has all the needed
&apos;//			information for the sheet headings.
&apos;//
&apos;//	Exit.	2 new sheets generated; Terrxxx-Bridge and Terrxxx_PubTerr.
&apos;//			The Terxxx_PubTerr is also copied to a new workbook, which
&apos;//			the user can save as a &quot;ready-to-go&quot; territory.
&apos;//
&apos;// Calls.	CopyToEnd, UnprotectSheet, QGetToBridge, RenameSheet,
&apos;//			BridgeToTerr, CopyToNewWork
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	10/14/20.	wmk.	original code
&apos;// 2/13/21.	wmk.	test call to BridgeToTerr2 for moving columns around
&apos;//
&apos;//	Notes.

&apos;//	constants.
const COL_D=3
const ROW_4=3


&apos;//	local variables.
dim oDoc		As Object
dim oSel		As Object
dim oRange		As Object
dim iSheetIx	As Integer
dim oSheet		As Object
dim oCell		As Object
dim sTerrID		As String
dim sSheetName	As String

&apos;// code.
	ON ERROR GOTO ErrorHandler
	CopyToEnd()
	UnprotectSheet()
	QGetToBridge()

	oDoc = ThisComponent
	oSel = oDoc.getCurrentSelection()
	oRange = oSel.RangeAddress
	iSheetIx = oRange.Sheet
	oSheet = oDoc.Sheets(iSheetIx)
	oCell = oSheet.getCellByPosition(COL_D, ROW_4)
	sTerrID = trim(oCell.String)
	sSheetName = &quot;Terr&quot; + sTerrID + &quot;_Bridge&quot;
	RenameSheet(sSheetName)
	ProtectSheet()								&apos;// protect sheet

	CopyToEnd()
	UnprotectSheet()
&apos;	BridgeToTerr()
	BridgeToTerr2()
	
	sSheetName = &quot;Terr&quot; + sTerrID + &quot;_PubTerr&quot;
	RenameSheet(sSheetName)
	ProtectSheet()
	CopyToNewWork(sSheetName)

NormalExit:
	exit sub
	
ErrorHandler:
	msgbox(&quot;QToPubTerr - unprocessed error&quot;)
	GoTo NormalExit
	
end sub 	&apos;// end QToPubTerr
&apos;/**/

&apos;// QToPubTerr3.bas
&apos;//------------------------------------------------------------------
&apos;// QToPubTerr3 - Take SQL Territory query .csv data to PubTerr sheet.
&apos;//		7/10/21.	wmk.	09:28
&apos;//------------------------------------------------------------------
	
public sub QToPubTerr3()

&apos;//	Usage.	macro call or
&apos;//			call QToPubTerr3()
&apos;//
&apos;// Entry.	user in workbook with sheet &quot;Terrxxx&quot; that is the query
&apos;//			data from the SQL territory database
&apos;//			a second sheet &quot;TerrxxxHdr should also have been loaded
&apos;//			into the workbook, so that QGetToBridge has all the needed
&apos;//			information for the sheet headings.
&apos;//
&apos;//	Exit.	2 new sheets generated; Terrxxx-Bridge and Terrxxx_PubTerr.
&apos;//			The Terxxx_PubTerr is also copied to a new workbook, which
&apos;//			the user can save as a &quot;ready-to-go&quot; territory.
&apos;//
&apos;// Calls.	CopyToEnd, UnprotectSheet, QGetToBridge, RenameSheet,
&apos;//			BridgeToTerr3, CopyToNewWork, fsSetPubSheetName
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	10/14/20.	wmk.	original code
&apos;// 2/20/21.	wmk.	move forward to use BridgeToTerr3.
&apos;// 3/16/21.	wmk.	preserve PubTerr sheet name for use
&apos;//						by other subs via fsSetPubSheetName.
&apos;//	7/9/21.		wmk.	oDoc and oSel assignments moved ahead of all other code;
&apos;//						PickACell called to anchor focus; code modified to use
&apos;//						URL to extract territory ID instead of $D$4.
&apos;// 7/10/21.	wmk.	PickACell removed.
&apos;//	Notes.

&apos;//	constants.
const COL_D=3
const ROW_4=3


&apos;//	local variables.
dim oDoc		As Object
dim oSel		As Object
dim oRange		As Object
dim iSheetIx	As Integer
dim oSheet		As Object
dim oCell		As Object
dim sTerrID		As String
dim sSheetName	As String

&apos;// code.
	ON ERROR GOTO ErrorHandler
&apos;	PickACell()
	oDoc = ThisComponent
	oSel = oDoc.getCurrentSelection()
	CopyToEnd()
	UnprotectSheet()
	QGetToBridge()

	oRange = oSel.RangeAddress
	iSheetIx = oRange.Sheet
	oSheet = oDoc.Sheets(iSheetIx)

dim sDocURL		As	String
dim nURLlen		As	Integer
dim sURLBase	As	String
dim sFileBase	As	String
dim sHdrFile	As	String

	&apos;// modify code to get sTerrID from URL ...QTerrxxx.csv
	sDocURL = ThisComponent.getURL()
	&apos;// expected URL = ../TerrData/Working-Files/QTerrxxx.csv
	nURLlen = len(sDocURL)
	sURLBase = left(sDocURL, nURLLen-12)	&apos;// up to last &apos;/&apos;
	sFileBase = right(sDocURL,11)	&apos;// Terrxxx.csv
	sHdrFile = left(sFileBase,7) + &quot;Hdr&quot; + right(sFileBase,4)
	sTerrID = mid(sFileBase,5,3)
		
&apos;	oCell = oSheet.getCellByPosition(COL_D, ROW_4)
&apos;	sTerrID = trim(oCell.String)
	sSheetName = &quot;Terr&quot; + sTerrID + &quot;_Bridge&quot;
	RenameSheet(sSheetName)
	ProtectSheet()								&apos;// protect sheet

	CopyToEnd()
	UnprotectSheet()
	BridgeToTerr3()

	sSheetName = &quot;Terr&quot; + sTerrID + &quot;_PubTerr&quot;
	RenameSheet(sSheetName)
	fsSetPubSheetName(sSheetName)
	ProtectSheet()
	CopyToNewWork(sSheetName)

NormalExit:
	exit sub
	
ErrorHandler:
	msgbox(&quot;QToPubTerr3 - unprocessed error&quot;)
	GoTo NormalExit
	
end sub 	&apos;// end QToPubTerr3		7/10/21.	09:28
&apos;/**/

&apos;// RenameSheet.bas
&apos;//---------------------------------------------------------------
&apos;// RenameSheet - Rename sheet with new name.
&apos;//		10/12/20.	wmk.		13:00
&apos;//---------------------------------------------------------------

public sub RenameSheet( psNewName As String )

&apos;//	Usage.	macro call or
&apos;//			call RenameSheet(sNewName As String)
&apos;//
&apos;//		sNewName = new sheet name
&apos;//
&apos;// Entry.	ThisComponent = this XFrame object
&apos;//
&apos;//	Exit.	table name changed to psNewName
&apos;//
&apos;// Calls.
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	10/12/20.		wmk.	original code
&apos;//
&apos;//	Notes.
&apos;//

&apos;//	constants.

&apos;//	local variables.

	&apos;// code.
	ON ERROR GOTO ErrorHandler

rem ----------------------------------------------------------------------
rem define variables
dim document   as object
dim dispatcher as object
rem ----------------------------------------------------------------------
rem get access to the document
document   = ThisComponent.CurrentController.Frame
dispatcher = createUnoService(&quot;com.sun.star.frame.DispatchHelper&quot;)

rem ----------------------------------------------------------------------
dim args1(0) as new com.sun.star.beans.PropertyValue
args1(0).Name = &quot;Name&quot;
&apos;args1(0).Value = &quot;Terr102_Import&quot;
args1(0).Value = psNewName

dispatcher.executeDispatch(document, &quot;.uno:RenameTable&quot;, &quot;&quot;, 0, args1())

	
NormalExit:
	exit sub
	
ErrorHandler:
	msgbox(&quot;RenameSheet - unprocessed error&quot;)
	GoTo NormalExit
	
end sub		&apos;// end RenameSheet		10/12/20
&apos;/**/

&apos;// RUDldToRaw.bas
&apos;//----------------------------------------------------------------------------
&apos;// RUDldToRaw - Restructure ReferenceUSA imported sheet to RawData.csv format.
&apos;//		9/14/20.	wmk.	01:10	
&apos;//----------------------------------------------------------------------------

public sub RUDldToRaw()

&apos;//	Usage.	macro call or
&apos;//			call RUDldToRaw()
&apos;//
&apos;// Entry.	sheet selected with raw .csv imported data from ReferenceUSA
&apos;//			row index 0 contains headings
&apos;//
&apos;//	Exit.	sheet reorganized as per Notes below; resultant sheet is
&apos;//			in RefUSA-RawData format
&apos;//
&apos;// Calls.	KillAutoRecalc, FreezeView, BoldHeadings, SetPhoneWidts
&apos;//			SetFullAddrWidth, SetColWidth, SelectActiveRows, SetSelection,
&apos;//			SortOnAddress, SetSearchWidths
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	9/13/20.	wmk.	original code
&apos;//	9/14/20.	wmk.	code completion; misc bug fixes
&apos;//
&apos;//	Notes. Territories/RefUSATest.csv import into sheet..
&apos;// CREATE TABLE &quot;RawData&quot;
&apos;//  ( &apos;LastName&apos; TEXT NOT NULL,	
  &apos;// &apos;FirstName&apos; TEXT NOT NULL,
  &apos;// &apos;HouseNumber&apos; TEXT,
  &apos;// &apos;Pre-Dir&apos; TEXT,
  &apos;// &apos;Street&apos; TEXT,
  &apos;// &apos;PostDir&apos; TEXT, 
  &apos;// &apos;AptNum&apos; TEXT, 
  &apos;// &apos;City&apos; TEXT, 
  &apos;// &apos;State&apos; TEXT, 
  &apos;// &apos;Zip&apos; TEXT, 
  &apos;// &apos;County&apos; TEXT, 
  &apos;// &apos;Phone&apos; TEXT,
  &apos;// &apos;FullAddress&apos; TEXT,
  &apos;// &apos;CongTerr&apos; TEXT,
  &apos;// &apos;RecordDate&apos; REAL DEFAULT 0,
  &apos;// &apos;DelPending&apos; INTEGER DEFAULT 0 )
&apos;//	Method. the following steps will be executed
&apos;//		insert 4 rows starting at row index 0
&apos;//		[Set View/Freeze Rows and Columns at column 0, row 5]
&apos;//		insert column at index 2 &quot;Found Name&quot;
&apos;//		set column header at index 2 &quot;Found Name&quot;
&apos;//		delete 4 columns at column index 9 (city, state, zip, county)
&apos;//		add 3 columns at column index 9 (Full Address, Phone1, Phone2)
&apos;//		insert 3 columns at column index 13 (truepeople, 411, whitepages)
&apos;//		write column headings in 2 cells row indexes 3,4 column indexes 13-15
&apos;//			&quot;search/truepeople&quot;, &quot;search/411&quot;, &quot;search/whitepages&quot;

&apos;//	constants.
const ONE_INCH=2540

const COL_FULLNAME=2		&apos;// found name
const COL_NUMBER=3			&apos;// house number
const COL_PREDIR=4			&apos;// street pre-direction
const COL_STREET=5			&apos;// street name
const COL_SUFFIX=6			&apos;// street suffix (e.g. Ave)
const COL_POSTDIR=7			&apos;// street post direction
const COL_UNIT=8			&apos;// unit/apt #
const YELLOW=16776960		&apos;// decimal value of YELLOW color
const MDYY=30				&apos;// number format M/D/YYY
const LJUST=1		&apos;// left-justify HoriJustify				&apos;// mod052020
const CJUST=2		&apos;// center HoriJustify						&apos;// mod052020
const RJUST=3		&apos;// right-justify HoriJustify				&apos;// mod052320
const COL_FULLADDR=13
const COL_CONGTERR=14
const COL_RECDATE=15
const COL_DELPENDING=16

const ROW_HEADING=4

const COL_AREA=0
const ROW_AREA=0
const COL_CITY=8		&apos;// I
const COL_ZIP = 10
const COL_ICITY=1
const ROW_ICITY=2
const COL_IZIP=2
const ROW_DATE=1
const COL_DATE=2
const ROW_BASE=5
const COL_UNITS=0		&apos;// &quot;Units shown:&quot;
const ROW_UNITS=1
const COL_FUNITS=1		&apos;// &quot;=COUNTA(A6:A298)&quot;

&apos;// new header locations 9/2/20
const COL_SUBTERR=0		&apos;// &quot;SubTerritory&quot;
const ROW_SUBTERR=3
const COL_TERRID=2		&apos;// &quot;CongTerrID&quot;
const ROW_TERRID=3
const COL_PROPID=3		&apos;// &quot;Property ID&quot;
const ROW_PROPID=0
const ROW_OWNER=1		&apos;// &quot;Owner&quot;
const ROW_STRADDR=2		&apos;// &quot;Streets/Addrs&quot;
&apos;// end new header locations 9/2/20
const COL_SEARCH=13		&apos;//	search/truepeople
const COL_RUPHONE=12	&apos;// RefUSA Phone column
const COL_DONOTCALL=16		&apos;// do not call
const COL_RSO=17			&apos;// registered sex offender
const COL_FOREIGN=18		&apos;// foreign language

&apos;//	local variables.
Dim oDoc As Object
Dim oSheet As Object
Dim NewColumn As Object
dim oSel as Object
dim iSheetIx as integer
dim oRange as Object
dim oCols	As Object		&apos;// .Columns this sheet
dim lThisRow as long		&apos;// current row selected on sheet
dim oMrgRange	As Object	&apos;// merge range

&apos;// processing variables.
dim oCell 		As Object	&apos;// transient cell data
dim	i			As Integer	&apos;// loop counter
dim nRowCount	As Integer	&apos;// active rows count
dim nRowsProcessed	As Integer	&apos;// processed rows count
dim sFullAddress	As String	&apos;// full address string
dim dTodaysDate	As Double	&apos;// today&apos;s date NOW()
dim sTerrID		As String	&apos;// territory ID from D4

	&apos;// code.
	ON ERROR GoTo ErrorHandler
	oDoc = ThisComponent
	oSel = oDoc.getCurrentSelection()
	oRange = oSel.RangeAddress
	iSheetIx = oRange.Sheet
	oSheet = oDoc.Sheets(iSheetIx)
	oCols = oSheet.Columns

	&apos;// insert 4 rows at top of sheet
	oSheet.Rows.insertByIndex(0, 4)	&apos;// insert new category 1 row
	&apos;// set up heading information
	&apos;// merge columns 0,1,2 in row 0 &quot;&lt;AREA NAME&gt;&quot;
	&apos;// column 0, row 1 &quot;Units shown&quot;
	&apos;// column 1, row 1 formula &quot;=COUNTA(A6:A1298)
	&apos;// column 0, row 2 &quot;City&quot;, row 3 &quot;Street&quot;
	&apos;// columns 1,2,3 row 3 merged &quot;&lt;street list&gt;&quot;
	&apos;// column 3, row 1 set date
	&apos;// column 3, row 2 set zip from cell data row 5 cell 10
	&apos;// column 1, row 2 set city from cell data row 5 cell 8


	&apos;// set header information dependent on RefUSA import columns
	&apos;// set &lt;AREA NAME&gt; in header
	oCell = oSheet.getCellByPosition(COL_AREA, ROW_AREA)
	oCell.String = &quot;Territory n&gt;&quot;
	&apos;// Merge cells A1-C1.
	oMrgRange = oRange
	oMrgRange.Sheet = oRange.Sheet
	oMrgRange.StartColumn = 0	&apos;// $A
	oMrgRange.EndColumn = 2		&apos;// $C
	oMrgRange.StartRow = 0
	oMrgRange.EndRow =0
	SetSelection(oMrgRange)
	MergeNCenter()
	
	
&apos;// K6 has Zip, I6 has City
dim sCity	As String	&apos;// city from import data
dim sZip	As String	&apos;// zip code from import data	
	oCell = oSheet.getCellByPosition(COL_CITY, ROW_BASE)
	sCity = oCell.String
	oCell = oSheet.getCellByPosition(COL_ZIP, ROW_BASE)
	sZip = oCell.String
	oCell = oSheet.getCellByPosition(COL_ICITY-1, ROW_ICITY)
	oCell.String = &quot;City&quot;
	oCell.HoriJustify = RJUST
	oCell = oSheet.getCellByPosition(COL_ICITY, ROW_ICITY)
	oCell.String = sCity
	oCell.HoriJustify = CJUST
	oCell = oSheet.getCellByPosition(COL_IZIP, ROW_ICITY)
	oCell.String = sZip
	oCell.HoriJustify = CJUST
	
	
	&apos;// Units shown header and formula.
	oCell = oSheet.getCellByPosition(COL_UNITS, ROW_UNITS)
	oCell.String = &quot;Units shown:&quot;
	oCell.HoriJustify = RJUST
	oCell = oSheet.getCellByPosition(COL_FUNITS, ROW_UNITS)
	oCell.setFormula(&quot;=COUNTA(A6:A1298)&quot;)
	SetColWidth(COL_UNITS, 1.0)

const COL_A=0
const COL_B=1
const COL_C=2
const COL_D=3
const COL_E=4
const COL_H=7
const ROW_1=0
const ROW_2=1
const ROW_3=2
const ROW_4=3
	&apos;// A4 = &quot;SubTerritory, B4 =&quot;&quot;
	oCell = oSheet.getCellByPosition(COL_A, ROW_4)
	oCell.String = &quot;SubTerritory&quot;
	oCell = oSheet.getCellByPosition(COL_B, ROW_4)
	oCell.String = &quot;&quot;
	
	&apos;// C4 = &quot;CongTerrID&quot;, D4 = &quot;&lt;territory_number&gt;&quot;
	oCell = oSheet.getCellByPosition(COL_C, ROW_4)
	oCell.String = &quot;CongTerrID&quot;
	oCell = oSheet.getCellByPosition(COL_D, ROW_4)
	oCell.String = &quot;&lt;territory-number&gt;&quot;
	
	&apos;// D1 - D3 = &quot;Property ID&quot;, &quot;Owner&quot;, &quot;Streets-Address(s)&quot;
	oCell = oSheet.getCellByPosition(COL_D, ROW_1)
	oCell.String = &quot;Property ID&quot;
	oCell = oSheet.getCellByPosition(COL_D, ROW_2)
	oCell.String = &quot;Owner&quot;
	oCell = oSheet.getCellByPosition(COL_D, ROW_3)
	oCell.String = &quot;Streets-Address(s)&quot;

	&apos;// E1 - E3 = &quot;-&quot;, &quot;-&quot;, &quot;All streets in Territory &lt;territory_number&gt;&quot;
	oCell = oSheet.getCellByPosition(COL_E, ROW_1)
	oCell.String = &quot;-&quot;
	oCell = oSheet.getCellByPosition(COL_E, ROW_2)
	oCell.String = &quot;-&quot;
	oCell = oSheet.getCellByPosition(COL_E, ROW_3)
	oCell.String = &quot;All streets in Territory &lt;territory_number&gt;&quot;
	
	&apos;// H1 = &quot;Terr-RawData formatted sheet&quot;
	oCell = oSheet.getCellByPosition(COL_H, ROW_1)
	oCell.String = &quot;Terr-RawData formatted sheet&quot;
	
&apos;//	Define new columns at end FullAddress, CongTerr, RecordDate, DeletePending	
	&apos;// define column at end &quot;FullAddress&quot;
&apos;	oSheet.Columns.insertByIndex(COL_FULLADDR, 1)
	oCell = oSheet.getCellByPosition(COL_FULLADDR, ROW_HEADING)
	oCell.String = &quot;FullAddress&quot;
	oCell.HoriJustify = CJUST
	oCols(COL_FULLADDR).setPropertyValue(&quot;Width&quot;, 1.75*ONE_INCH)

	oCell = oSheet.getCellByPosition(COL_CONGTERR, ROW_HEADING)
	oCell.String = &quot;CongTerr&quot;
	oCell.HoriJustify = CJUST
	oCols(COL_CONGTERR).setPropertyValue(&quot;Width&quot;, 0.75*ONE_INCH)

	oCell = oSheet.getCellByPosition(COL_RECDATE, ROW_HEADING)
	oCell.String = &quot;RecordDate&quot;
	oCell.HoriJustify = CJUST
	oCols(COL_RECDATE).setPropertyValue(&quot;Width&quot;, 2.0*ONE_INCH)

	oCell = oSheet.getCellByPosition(COL_DELPENDING, ROW_HEADING)
	oCell.String = &quot;DelPending&quot;
	oCell.HoriJustify = CJUST
	oCols(COL_DELPENDING).setPropertyValue(&quot;Width&quot;, 0.75*ONE_INCH)

	&apos;// loop on all active rows
	&apos;// set COL_DELPENDING.Value = 0
	&apos;//	set COL_RECDATE = Now(); .NumberFormat=30
	&apos;//	set COL_CONG_TERR = sCongTerr
	&apos;// set COL_FULLADDR = fsConcatRawAddress( lThisRow )
	dTodaysDate = Now()
	lThisRow = ROW_HEADING
	nRowsProcessed = 0
	oCell = oSheet.getCellByPosition(COL_FUNITS, ROW_UNITS)
	nRowCount = oCell.getValue()
	for i = 0 to nRowCount-1
		lThisRow = lThisRow + 1
		&apos;// set COL_DELPENDING.Value = 0
		oCell = oSheet.getCellByPosition(COL_DELPENDING, lThisRow)
		oCell.setValue(0)
		
		&apos;//	set COL_RECDATE = Now(); .NumberFormat=30
		oCell = oSheet.getCellByPosition(COL_RECDATE, lThisRow)
		oCell.setValue(dTodaysDate)
		oCell.NumberFormat = MDYY
		
		&apos;//	set COL_CONG_TERR = sCongTerr
		oCell = oSheet.getCellByPosition(COL_CONGTERR, lThisRow)
		oCell.setFormula(&quot;=$D$4&quot;)

		&apos;// because may skip, concatenate address last
		sFullAddress = fsConcatRawAddress(lThisRow)
		oCell = oSheet.getCellByPosition(COL_FULLADDR, lThisRow)
		if Len(sFullAddress) = 0 then
			oCell.String = &quot;&quot;
			oCell.CellBackColor = YELLOW
			msgbox(&quot;At row &quot; + lThisRow + &quot;... empty address - skipped&quot;)
		else
			oCell.String = UCase(sFullAddress)
		endif	&apos;// end empty address fields conditional

NextFor:
		nRowsProcessed = nRowsProcessed + 1
	next i
	
if true then
	GoTo EndOldCode
endif
&apos;//---------------------------------------------------------------
	&apos;// remove 4 columns at Full Address column
	oSheet.Columns.removeByIndex(COL_FULLADDR, 4)
	
	&apos;// insert 3 columns at Full Address column
	&apos;// Headings &quot;Full Address&quot;, &quot;Phone1&quot;, &quot;Phone2&quot;
	oSheet.Columns.insertByIndex(COL_FULLADDR, 3)
	
	&apos;// Now all columns in place; set headings
	&apos;// Date to header
	oCell = oSheet.getCellByPosition(COL_DATE, ROW_DATE)
	oCell.setValue(Now())					&apos;// time stamp

&apos;	oCell.String = Date
	oCell.Text.NumberFormat = MDYY
	oCell.HoriJustify = CJUST
	
	&apos;// set column headings
	oCell = oSheet.getCellByPosition(COL_IZIP, ROW_ICITY)
	oCell.String = sZip
	oCell.HoriJustify = CJUST
	oCell = oSheet.getCellByPosition(COL_FULLADDR, ROW_HEADING)
	oCell.String = &quot;Full Address&quot;
	oCell.HoriJustify = CJUST
	SetColWidth(COL_FULLADDR, 1.75)
	oCell = oSheet.getCellByPosition(COL_FULLADDR+1, ROW_HEADING)
	oCell.String = &quot;Phone1&quot;
	oCell.HoriJustify = CJUST
	oCell = oSheet.getCellByPosition(COL_FULLADDR+2, ROW_HEADING)
	oCell.String = &quot;Phone2&quot;
	oCell.HoriJustify = CJUST
	
	&apos;// place &quot;RefUSA&quot; heading above its phone heading.
	oCell = oSheet.getCellByPosition(COL_RUPHONE, ROW_HEADING-1)
	oCell.String = &quot;RefUSA&quot;
	
	&apos;// place column headings on search/truepeople, search/411,
	&apos;//  search/whitepages
	oCell = oSheet.getCellByPosition(COL_SEARCH, ROW_HEADING)
	oCell.String = &quot;truepeople&quot;
	oCell.HoriJustify = CJUST
	oCell = oSheet.getCellByPosition(COL_SEARCH+1, ROW_HEADING)
	oCell.String = &quot;411&quot;
	oCell.HoriJustify = CJUST
	oCell = oSheet.getCellByPosition(COL_SEARCH+2, ROW_HEADING)
	oCell.String = &quot;whitepages&quot;
	oCell.HoriJustify = CJUST

	oCell = oSheet.getCellByPosition(COL_SEARCH, ROW_HEADING-1)
	oCell.String = &quot;search&quot;
	oCell.HoriJustify = CJUST
	oCell = oSheet.getCellByPosition(COL_SEARCH+1, ROW_HEADING-1)
	oCell.String = &quot;search&quot;
	oCell.HoriJustify = CJUST
	oCell = oSheet.getCellByPosition(COL_SEARCH+2, ROW_HEADING-1)
	oCell.String = &quot;search&quot;
	oCell.HoriJustify = CJUST

	&apos;// place column headings on DoNotCall, RSO, and Foreign
	oCell = oSheet.getCellByPosition(COL_DONOTCALL, ROW_HEADING)
	oCell.String = &quot;DoNotCall&quot;
	oCell.HoriJustify = CJUST
	
	oCell = oSheet.getCellByPosition(COL_RSO, ROW_HEADING)
	oCell.String = &quot;RSO&quot;
	oCell.HoriJustify = CJUST
	
	oCell = oSheet.getCellByPosition(COL_FOREIGN, ROW_HEADING)
	oCell.String = &quot;Foreign&quot;
	oCell.HoriJustify = CJUST
	
	&apos;// Columns fixed; now set remaining header information
	&apos;// new header locations 9/2/20
&apos;const COL_SUBTERR=0		&apos;// &quot;SubTerritory&quot;
&apos;const ROW_SUBTERR=3
&apos;const COL_TERRID=2		&apos;// &quot;CongTerrID&quot;
&apos;const ROW_TERRID=3
&apos;const COL_PROPID=3		&apos;// &quot;Property ID&quot;
&apos;const ROW_PROPID=0
&apos;const ROW_OWNER=0		&apos;// &quot;Owner&quot;
&apos;const ROW_STRADDR=2		&apos;// &quot;Streets/Addrs&quot;
&apos;// end new header locations 9/2/20

	oCell = oSheet.getCellByPosition(COL_SUBTERR, ROW_SUBTERR)
	oCell.String = &quot;SubTerritory&quot;
	oCell.HoriJustify = RJUST

	oCell = oSheet.getCellByPosition(COL_TERRID, ROW_TERRID)
	oCell.String = &quot;CongTerrID&quot;
	oCell.HoriJustify = RJUST

	oCell = oSheet.getCellByPosition(COL_PROPID, ROW_PROPID)
	oCell.String = &quot;Property ID&quot;
	oCell.HoriJustify = RJUST
	oCell = oSheet.getCellByPosition(COL_PROPID+1, ROW_PROPID)
	oCell.String = &quot;&lt;OwnerParcel&gt;&quot;
	oCell.HoriJustify = CJUST
	
	oCell = oSheet.getCellByPosition(COL_PROPID, ROW_OWNER)
	oCell.String = &quot;Owner&quot;
	oCell.HoriJustify = RJUST
	oCell = oSheet.getCellByPosition(COL_PROPID+1, ROW_OWNER)
	oCell.String = &quot;&lt;OwnerName1&gt;&quot;
	oCell.HoriJustify = LJUST
	
	oCell = oSheet.getCellByPosition(COL_PROPID, ROW_STRADDR)
	oCell.String = &quot;Streets/Addrs&quot;
	oCell.HoriJustify = RJUST
	oCell = oSheet.getCellByPosition(COL_PROPID+1, ROW_STRADDR)
	oCell.String = &quot;&lt;Streets-Address(s)&gt;&quot;

	&apos;// kill AutoCalculate
	KillAutoRecalc()

	&apos;// Set phone column widths.
	SetPhoneWidths()

	&apos;// Set full address column width.
	SetFullAddrWidth()

	&apos;// Set search columns widths.
	SetSearchWidths()
	
	&apos;// Merge cells A1-C1.
	oMrgRange = oRange
	oMrgRange.Sheet = oRange.Sheet
	oMrgRange.StartColumn = 0	&apos;// $A
	oMrgRange.EndColumn = 2
	oMrgRange.StartRow = 0
	oMrgRange.EndRow =0
	SetSelection(oMrgRange)
	MergeNCenter()
	
	&apos;// Merge cells E1-G1.
	oMrgRange.StartColumn = 4	&apos;// $E
	oMrgRange.EndColumn = 6	&apos;// $G
	oMrgRange.StartRow = 0
	oMrgRange.EndRow = 0		&apos;// .$1
	SetSelection(oMrgRange)
	MergeNCenter()
	
	&apos;// Merge cells E2-G2
	oMrgRange.StartColumn = 4	&apos;// $E
	oMrgRange.EndColumn = 6	&apos;// $G
	oMrgRange.StartRow = 1
	oMrgRange.EndRow = 1		&apos;// .$2
	SetSelection(oMrgRange)
	MergeNCenter()
	
	&apos;// Merge cells E3-G3.
	oMrgRange.StartColumn = 4	&apos;// $E
	oMrgRange.EndColumn = 6	&apos;// $G
	oMrgRange.StartRow = 2
	oMrgRange.EndRow = 2		&apos;// .$3
	SetSelection(oMrgRange)
	MergeNCenter()
	
&apos;const COL_H=7
&apos;const ROW_1=0
	&apos;// set sheet type at H1 &quot;Admin-Bridge formatted sheet&quot;
	oCell =	oSheet.getCellByPosition(COL_H, ROW_1)
	oCell.String = &quot;Admin-Import formatted sheet&quot;
	
	&apos;// select all active rows.
	SelectActiveRows()
	
	&apos;// concatenate addresses
	ConcatAddressM()
	
	&apos;// concatenate names
	ConcatFirstLastM()

	&apos;// select through column S (at column A in last row)
&apos;// 
dim oDocument	As Object
dim oDispatcher	As Object
dim nColumns	As Integer
	oDocument   = ThisComponent.CurrentController.Frame
	oDispatcher = createUnoService(&quot;com.sun.star.frame.DispatchHelper&quot;)
	nColumns = ASC(&quot;S&quot;) - ASC(&quot;A&quot;)
dim args2(0) as new com.sun.star.beans.PropertyValue
	args2(0).Name = &quot;By&quot;
	args2(0).Value = nColumns
oDispatcher.executeDispatch(oDocument, &quot;.uno:GoRightSel&quot;, &quot;&quot;, 0, args2())
	SortOnAddress()
	
&apos;//--------------------------------------------------------------------	
EndOldCode:

	&apos;// Freeze header so stays when scrolling
	FreezeView()
	
	&apos;// Bold and center headings
	BoldHeadings()
	SetColWidth(COL_RECDATE, 1.0)
	oCols(COL_FULLADDR).setPropertyValue(&quot;Width&quot;, 1.75*ONE_INCH)
		
	&apos;// restore user entry range selection.
	SetSelection(oRange)
		
	&apos;// finished
	msgbox(&quot;RUDldToRaw complete.&quot;)

NormalExit:
	exit sub
	
ErrorHandler:
	msgbox(&quot;RUDldToRaw - unprocessed error.&quot;)
	GoTo NormalExit
	
end sub		&apos;// end RUDldToRaw	9/14/20
&apos;/**/

&apos;// RUEditToBridge.bas
&apos;//--------------------------------------------------------------------------
&apos;// RUEditToBridge - Convert RU/Admin-Edit spreadsheet to Admin-Bridge sheet.
&apos;//		9/30/20.	wmk.	12:00
&apos;//--------------------------------------------------------------------------

public sub RUEditToBridge()

&apos;//	Usage.	macro call or
&apos;//			call RUEditToBridge()
&apos;//
&apos;// Entry.	user in Admin-Edit format spreadsheet
&apos;//	OwningParcel  UnitAddress  Resident1 Resident2 Phone1 Phone2 RUPhone
&apos;//			A			B			C		D		  E		 F		G	
&apos;//  
&apos;//	truepeople	411		whitepages
&apos;//		H		 I		   J
&apos;//
&apos;//	SubTerr CongTerr DoNotCall RSO Foreign  RecordDate SitusAddress
&apos;//		K		L		   M     N    O			P			  Q		
&apos;//  PropUse	DelPending
&apos;//		R  			S
&apos;//
&apos;//	Exit.	sheet columns and header modified to match Admin-Bridge spec
&apos;//			for updating MultiMail.db/SplitProps table
&apos;//	OwningParcel  UnitAddress  Resident1 Resident2 Phone1 Phone2 RUPhone
&apos;//			A			B			C		D		  E		 F		G	
&apos;//  SubTerr CongTerr DoNotCall RSO Foreign  RecordDate SitusAddress
&apos;//		H		I		   J     K     L		M			  N		
&apos;//  PropUse	DelPending
&apos;//		O  			P
&apos;//
&apos;//
&apos;// Calls.	SetTerrWidths, BoldHeadings
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	9/4/20.		wmk.	original code
&apos;// 9/5/20.		wmk.	misc. bug fixes to comply with OPTION EXPLICIT;
&apos;//						fix RefUSA Phone column being deleted; column
&apos;//						widths for SubTerritory, CongTerrID adjusted to 0.9&quot;
&apos;//	9/6/20.		wmk.	add support for &quot;RecordDate&quot; field in SplitProps
&apos;//						table; take date from cell C2 in edit sheet; bug fix
&apos;//						where DoNotCall column lost; move BoldHeadings call
&apos;//						to after RecordDate heading set
&apos;// 9/7/20.		wmk.	code adjustments for support of &quot;Foreign&quot; and
&apos;//						&quot;X-Pending&quot; fields
&apos;//	9/30/20.	wmk.	documentation updated
&apos;//
&apos;//	Notes. This sub/utility is run on the Admin-Edit sheet coming back from
&apos;//	either the territory sevant, or a territory administrator after being
&apos;// updated with changes. This sheet is morphed into an Admin-Bridge
&apos;// sheet that is then used to produce a .csv &quot;&lt;ST&gt;Update.csv&quot; where &lt;ST&gt;
&apos;// is the SubTerritory name (e.g. ANDROS). That .csv will then be used
&apos;// to create a &lt;ST&gt;Update.db containing 1 table &quot;PropsUpdt&quot;. That .db
&apos;// and table will be used with SQL and a SELECT..UNION..SELECT that will
&apos;// form the union of any new records and the entire MultiMail/SplitProps
&apos;// records. (CREATE TEMP TABLE &lt;table-name&gt; AS SELECT..UNION..SELECT)
&apos;//
&apos;// MultiMail/SplitProps table fields.
&apos;//		9/7/20.
&apos;//0|OwningParcel|TEXT|1||0
&apos;//1|UnitAddress|TEXT|1||0
&apos;//2|Resident1|TEXT|0||0
&apos;//3|Resident2|TEXT|0||0
&apos;//4|Phone1|TEXT|0||0
&apos;//5|Phone2|TEXT|0||0
&apos;//6|RefUSA-Phone|TEXT|0||0
&apos;//7|SubTerritory|TEXT|0||0
&apos;//8|CongTerrID|TEXT|0||0
&apos;//9|DoNotCall|INTEGER|0|0|0
&apos;//10|RSO|INTEGER|0|0|0
&apos;//11|Foreign|INTEGER|0|0|0
&apos;//12|RecordDate|REAL|0|0|0
&apos;//13|X-Pending|INTEGER|0|0|0
&apos;//	Method. code RueditToBridge to take edit spreadsheet and move upward
&apos;// to Bridge format:
&apos;// Insert column 0 “OwningParcel”,
&apos;// rename “search/truepeople column H to “SubTerritory”,
&apos;// rename column I to CongTerrID,
&apos;// delete column J moving DoNotCall and RSO over 1 left;
&apos;// fill column 0 with OwningParcel from header;
&apos;// fill SubTerritory and CongTerrID with fields from header


&apos;//	constants.
const COL_PARCEL=0		&apos;// &quot;OwningParcel&quot; column index
const COL_A=0
const COL_B=1
const COL_C=2	
const COL_D=3
const COL_E=4
const COL_G=6			&apos;// column G index
const COL_H=7			&apos;// column H index
const COL_I=8			&apos;// column I index
const COL_J=9			&apos;// column J index
const COL_K=10			&apos;// column K index (DoNotCall)
const COL_L=11			&apos;// column L index (RSO)
const COL_M=12			&apos;// column M index (Foreign)
const COL_N=13			&apos;// column N index (RecordDate)
const COL_O=14			&apos;// column O index (X-Pending)
const ROW_1=0
const ROW_2=1
const ROW_3=2
const ROW_4=3
const ROW_HEADING=4		&apos;// headings row index
const LJUST=1		&apos;// left-justify HoriJustify				&apos;// mod052020
const CJUST=2		&apos;// center HoriJustify						&apos;// mod052020
const RJUST=3		&apos;// right-justify HoriJustify				&apos;// mod052320
const MDYY=30		&apos;// &apos;M/D/YY&apos; format value

&apos;//	local variables.
Dim oDoc As Object
Dim oSheet As Object
Dim NewColumn As Object
dim oSel as Object
dim iSheetIx as integer
dim oRange as Object
dim lThisRow as long		&apos;// current row selected on sheet
dim oMrgRange	As Object	&apos;// merge range

dim oCell	As Object		&apos;// cell working on
dim i		As Integer		&apos;// loop index
dim sPropID	As String		&apos;// property ID
dim sSubTerr	As String	&apos;// subterritory
dim sCongTerr	As String	&apos;// cong terr ID
dim lRowCount	As Long		&apos;// row count of addresses
dim dDate		As Double	&apos;// date value

	&apos;// code.
	ON ERROR GoTo ErrorHandler
	oDoc = ThisComponent
	oSel = oDoc.getCurrentSelection()
	oRange = oSel.RangeAddress
	iSheetIx = oRange.Sheet
	oSheet = oDoc.Sheets(iSheetIx)
	
	&apos;// delete columns H, I, search columns 
	oSheet.Columns.removeByIndex(COL_H,2)
	
	&apos;// insert 2 columns at H for SubTerritory and CongTerr ID
	oSheet.Columns.insertByIndex(COL_H,2)
	
	&apos;// insert 1 column at A for OwningParcel
	oSheet.Columns.insertByIndex(COL_PARCEL,1)
	SetBridgeHeadings()
	
if true then
	GoTo NewCode
endif

	&apos;// insert column at index 0 for &quot;OwningParcel&quot;
	oSheet.Columns.insertByIndex(COL_PARCEL,1)
	
	&apos;// delete column J (search whitepages, index 9)
	oSheet.Columns.removeByIndex(COL_J,1)

	&apos;// remove columns I, J and replace with 2 new columns
	oSheet.Columns.removeByIndex(COL_I,2)
	oSheet.Columns.insertByIndex(COL_I,2)
	SetBridgeHeadings()

NewCode:	
if true then
	GoTo Skip1
endif

	&apos;// correct column headings
	&apos;// set OwningParcel heading
	oCell = oSheet.getCellByPosition(COL_PARCEL, ROW_HEADING)
	oCell.String = &quot;OwningParcel&quot;
	oCell.HoriJustify = CJUST

	&apos;// set SubTerritory heading
	oCell = oSheet.getCellByPosition(COL_I, ROW_HEADING)
	oCell.String = &quot;SubTerritory&quot;
	oCell.HoriJustify = CJUST
	
	&apos;// set CongTerrID heading
	oCell = oSheet.getCellByPosition(COL_I+1, ROW_HEADING)
	oCell.String = &quot;CongTerrID&quot;
	oCell.HoriJustify = CJUST
&apos;	SetColWidth(COL_I, 0.9)
&apos;	SetColWidth(COL_J, 0.9)
	SetTerrWidths()		&apos;// also RecordDate

	&apos;// set DoNotCall heading (K)
	
	&apos;// set RSO heading (L)
	
	&apos;// set Foreign heading (M)
	oCell = oSheet.getCellByPosition(COL_M, ROW_HEADING)
	oCell.String = &quot;Foreign&quot;
	oCell.HoriJustify = CJUST
	
	
	&apos;// set RecordDate heading
	oCell = oSheet.getCellByPosition(COL_N, ROW_HEADING)
	oCell.String = &quot;RecordDate&quot;
	oCell.HoriJustify = CJUST

	&apos;// set X-Pending heading.
	oCell = oSheet.getCellByPosition(COL_O, ROW_HEADING)
	oCell.String = &quot;X-Pending&quot;
	oCell.HoriJustify = CJUST
Skip1:
	
	&apos;// Insure all headings Bold.
	BoldHeadings()
	
	&apos;// move B1 through G3 to A1
	oMrgRange = oRange
	oMrgRange.StartColumn = COL_B
	oMrgRange.EndColumn = COL_G
	oMrgRange.StartRow = ROW_1
	oMrgRange.EndRow = ROW_3
dim oTarget as new com.sun.star.table.CellAddress
	oTarget.Sheet = oRange.Sheet
	oTarget.Column = COL_A
	oTarget.Row = ROW_1
	oSheet.moveRange(oTarget,oMrgRange)

	&apos;// move B4 through E4 to A4
	oMrgRange.StartColumn = COL_B
	oMrgRange.EndColumn = COL_E
	oMrgRange.StartRow = ROW_4
	oMrgRange.EndRow = ROW_4
	oTarget.Column = COL_A
	oTarget.Row = ROW_4
	oSheet.moveRange(oTarget,oMrgRange)
	
	&apos;// right-justify A2-A4
	oCell = oSheet.getCellByPosition(COL_A, ROW_2)
	oCell.HoriJustify = RJUST
	oCell = oSheet.getCellByPosition(COL_A, ROW_3)
	oCell.HoriJustify = RJUST
	oCell = oSheet.getCellByPosition(COL_A, ROW_4)
	oCell.HoriJustify = RJUST
	
	&apos;// fill column A with property id from E1
	&apos;// B2.Value = row count
	oCell =	oSheet.getCellByPosition(COL_E, ROW_1)
	sPropID = oCell.String
	oCell =	oSheet.getCellByPosition(COL_B, ROW_2)
	lRowCount = oCell.Value
	lThisRow = ROW_HEADING
	for i = 0 to lRowCount-1
		lThisRow = lThisRow + 1
		oCell =	oSheet.getCellByPosition(COL_A, lThisRow)
		oCell.String = sPropID
	next i	

	&apos;// fill column I with SubTerritory from B4
	oCell =	oSheet.getCellByPosition(COL_B, ROW_4)
	sSubTerr = oCell.String
	lThisRow = ROW_HEADING
	for i = 0 to lRowCount-1
		lThisRow = lThisRow + 1
		oCell =	oSheet.getCellByPosition(COL_I, lThisRow)
		oCell.String = sSubTerr
	next i	
	
	&apos;// fill column J with CongTerrID from D4
	oCell =	oSheet.getCellByPosition(COL_D, ROW_4)
	sCongTerr = oCell.String
	lThisRow = ROW_HEADING
	for i = 0 to lRowCount-1
		lThisRow = lThisRow + 1
		oCell =	oSheet.getCellByPosition(COL_J, lThisRow)
		oCell.String = sCongTerr
	next i	

	&apos;// fill column M with RecordDate from C2
	oCell =	oSheet.getCellByPosition(COL_C, ROW_2)
	dDate = oCell.Value
	lThisRow = ROW_HEADING
	for i = 0 to lRowCount-1
		lThisRow = lThisRow + 1
		oCell =	oSheet.getCellByPosition(COL_M, lThisRow)
		oCell.setValue(dDate)
		oCell.NumberFormat = MDYY
		oCell.HoriJustify = CJUST
	next i	
	
NormalExit:
	exit sub
	
ErrorHandler:
	msgBox(&quot;RUEditToBridge - unprocessed error.&quot;)
	GoTo NormalExit
end sub		&apos;// end RUEditToBridge		9/30/20
&apos;/**/

&apos;// RUImportToBridge.bas
&apos;//------------------------------------------------------------------------------
&apos;// RUImportToBridge - Convert RU/Admin-Import spreadsheet to Admin-Bridge sheet.
&apos;//		10/23/20.	wmk.	05:00
&apos;//------------------------------------------------------------------------------

public sub RUImportToBridge()

&apos;//	Usage.	macro call or
&apos;//			call RUImportToBridge()
&apos;//
&apos;// Entry.	user in Admin-Import format spreadsheet (from ImportRefUSA)
&apos;//Last Name [A], First Name [B], Full Name [C], House Number [D],
&apos;//Pre-directional [E], Street [F], Street Suffix [G], Post-directional [H],
&apos;//Apartment Number [I], Full Address [J], Phone1 [K],
&apos;//Phone2 [L], RefUSA Phone [M], truepeople [N], 411 [O], whitepages [P],
&apos;//DoNotCall [Q], RSO [R], Foreign [S]
&apos;//
&apos;//	Exit.	produces an &quot;Admin-Bridge&quot; formatted sheet with the x..Props columns:
&apos;//	OwningParcel  UnitAddress  Unit		  Resident1	 Phone1 Phone2 RefUSA-Phone
&apos;//	 A (from A)	  B (from K)  C (from I)  D (from C)	E	 F		G	
&apos;//
&apos;//  SubTerrItory CongTerrID DoNotCall RSO Foreign  RecordDate	 SitusAddress
&apos;//		H				I		   J     K     L	M (header C2)	N (from N)
&apos;//
&apos;//  Property Use	DelPending
&apos;//		  O				P
&apos;//
&apos;//		along with 4 header rows, populated with the Admin-Bridge header information.
&apos;//&lt;Area-CommonName&gt;			Property ID	&lt;OwnerParcel&gt;			Admin-Bridge formatted sheet
&apos;//Units shown:	63	9/16/20	Owner		&lt;OwnerName1&gt;
&apos;//City	Venice	34285	Streets/Addrs	&lt;Streets-Address(s)&gt;
&apos;//SubTerritory		CongTerrID
&apos;//
&apos;//sheet columns and header modified to match Admin-Bridge spec
&apos;//			for updating MultiMail.db/SplitProps table
&apos;//
&apos;//
&apos;// Calls.	ForceRecalc, SetTerrWidths, BoldHeadings, SetUnitAddrWidth,
&apos;//			fsAddrToSCFormat, SetBridgeHeadings(), SetBridgeColWidths
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	9/7/20.		wmk.	original code
&apos;// 9/8/20.		wmk.	fix bug where formula in C2 being lost
&apos;// 9/16/20.	wmk.	mod to set SubTerritory to formula =$B$4
&apos;//						and CongTerrID to formula =$D$4; this will
&apos;//						allow the user to set values in B4 and D4
&apos;//						that will be part of the Bridge records
&apos;//	9/17/20.	wmk.	field added &quot;SitusAddress&quot;; by adding
&apos;//						this field, &quot;bridge&quot; records can be used
&apos;//						in either the MultiMail or PolyTerri .db
&apos;//						records for queries and other operations;
&apos;//						field added &quot;DelPending&quot; last to match TerrProps
&apos;//						table
&apos;//	9/23/20.	wmk.	added PropUse field so addresses can be properly
&apos;//						handled when generating territories
&apos;// 9/27/20.	wmk.	documentation added; code compatibility with new
&apos;//						InsertTerrHdr code; columns added to match new
&apos;//						bridge format columns
&apos;//	10/22/20.	wmk.	Change Bridge to support &quot;Unit&quot; field in place
&apos;//						of Resident1; Resident2 to Resident1; remove dead
&apos;//						code; set $B$4 formula to =&quot;&quot; if empty
&apos;//
&apos;//	Notes. This sub/utility is run on the Admin-Import sheet coming in from
&apos;//	ImportRefUSA, after the raw RefUSA download has been processed.
&apos;// updated with changes. This sheet is morphed into an Admin-Bridge
&apos;// sheet that is then used to produce a .csv with the &quot;bridge&quot; fields
&apos;// necessary to produce SplitProps or TerrProps records compatible
&apos;// with the MulitiMail or PolyTerri tables containing territory
&apos;// records, 1 per address.
&apos;// is the SubTerritory name (e.g. ANDROS). That .csv will then be used
&apos;// to create a &lt;ST&gt;Update.db containing 1 table &quot;PropsUpdt&quot;. That .db
&apos;// and table will be used with SQL and a SELECT..UNION..SELECT that will
&apos;// form the union of any new records and the entire MultiMail/SplitProps
&apos;// records. (CREATE TEMP TABLE &lt;table-name&gt; AS SELECT..UNION..SELECT)
&apos;//
&apos;// MultiMail/SplitProps table fields.
&apos;//		10/22/20.					Column
&apos;//0|OwningParcel|TEXT|1||0				A
&apos;//1|UnitAddress|TEXT|1||0				B
&apos;//2|Unit|TEXT|0||0						C
&apos;//3|Resident1|TEXT|0||0				D
&apos;//4|Phone1|TEXT|0||0					E
&apos;//5|Phone2|TEXT|0||0					F
&apos;//6|RefUSA-Phone|TEXT|0||0				G
&apos;//7|SubTerritory|TEXT|0||0				H
&apos;//8|CongTerrID|TEXT|0||0				I
&apos;//9|DoNotCall|INTEGER|0|0|0			J
&apos;//10|RSO|INTEGER|0|0|0					K
&apos;//11|Foreign|INTEGER|0|0|0				L
&apos;//12|RecordDate|REAL|0|0|0				M
&apos;//13|SitusAddress|TEXT|0||0			N
&apos;//14|PropertyUse|TEXT|0||0				O
&apos;//15|DeletePending|INTEGER|0|0|0		P
&apos;//
&apos;//	Method. code RUImportToBridge to take import spreadsheet and move downward
&apos;// to Bridge format:
&apos;// Preserve Header information
&apos;// Remove column N (search/truepeople);
&apos;// Re-title columns N, O &quot;SubTerritory&quot; &quot;CongTerrID&quot;
&apos;// Insert column 0 “OwningParcel”; set col 0 heading to &quot;OwningParcel&quot;
&apos;// fill column 0 with OwningParcel from header;
&apos;// Remove column B; set col B heading (from &quot;Last Name&quot;) to &quot;UnitAddress&quot;
&apos;// Set column C heading to &quot;Unit&quot;
&apos;// Move data from column J (&quot;Full Address&quot;) to column B (&quot;UnitAddress&quot;)
&apos;// Remove columns C-H; set col D heading (from &quot;Full Address&quot;) to &quot;Resident1&quot;
&apos;// Move data from old column I (now E) to column C (Unit)

&apos;//	constants.
const COL_PARCEL=0		&apos;// &quot;OwningParcel&quot; column index
const COL_A=0
const COL_B=1
const COL_C=2	
const COL_D=3
const COL_E=4
const COL_F=5
const COL_G=6			&apos;// column G index
const COL_H=7			&apos;// column H index
const COL_I=8			&apos;// column I index
const COL_J=9			&apos;// column J index
const COL_K=10			&apos;// column K index (DoNotCall)
const COL_L=11			&apos;// column L index (RSO)
const COL_M=12			&apos;// column M index (RecordDate)
const COL_N=13			&apos;// column N index
const COL_O=14			&apos;// column O index
const COL_P=15			&apos;// column P index
const COL_S=18
const ROW_1=0
const ROW_2=1
const ROW_3=2
const ROW_4=3
const ROW_6=5
const ROW_HEADING=4		&apos;// headings row index
const LJUST=1		&apos;// left-justify HoriJustify				&apos;// mod052020
const CJUST=2		&apos;// center HoriJustify						&apos;// mod052020
const RJUST=3		&apos;// right-justify HoriJustify				&apos;// mod052320
const MDYY=30		&apos;// &apos;M/D/YY&apos; format value

&apos;//	local variables.
Dim oDoc As Object
Dim oSheet As Object
Dim NewColumn As Object
dim oSel as Object
dim iSheetIx as integer
dim oRange as Object
dim lThisRow as long		&apos;// current row selected on sheet
dim oMrgRange	As Object	&apos;// merge range

dim oCell	As Object		&apos;// cell working on
dim i		As Integer		&apos;// loop index
dim sPropID	As String		&apos;// property ID
dim sSubTerr	As String	&apos;// subterritory
dim sCongTerr	As String	&apos;// cong terr ID
dim lRowCount	As Long		&apos;// row count of addresses
dim dDate		As Double	&apos;// date value
dim sFullAddr	As String	&apos;// full address (col B)
dim sSCAddr		As String	&apos;// county address (col N)

	&apos;// code.
	ON ERROR GoTo ErrorHandler
	oDoc = ThisComponent
	oSel = oDoc.getCurrentSelection()
	oRange = oSel.RangeAddress
	iSheetIx = oRange.Sheet
	oSheet = oDoc.Sheets(iSheetIx)

	&apos;// B2.Value = row count
	ForceRecalc()
	oCell =	oSheet.getCellByPosition(COL_B, ROW_2)
	lRowCount = oCell.Value

	&apos;// move the whole stinking header to column S
	&apos;// so it&apos;s out of the way
	&apos;// move A1 through H4 to S1
	oMrgRange = oRange
	oMrgRange.StartColumn = COL_A
	oMrgRange.EndColumn = COL_H
	oMrgRange.StartRow = ROW_1
	oMrgRange.EndRow = ROW_4
dim oTarget as new com.sun.star.table.CellAddress
	oTarget.Sheet = oRange.Sheet
	oTarget.Column = COL_S
	oTarget.Row = ROW_1
	oSheet.moveRange(oTarget,oMrgRange)
	
	&apos;// Remove column N (search/truepeople)
	oSheet.Columns.removeByIndex(COL_N, 1)

	&apos;// Re-title columns N, O &quot;SubTerritory&quot; &quot;CongTerrID&quot;
	oCell = oSheet.getCellByPosition(COL_N, ROW_HEADING-1)
	oCell.String = &quot;&quot;
	oCell = oSheet.getCellByPosition(COL_N, ROW_HEADING)
	oCell.String = &quot;SubTerritory&quot;
	oCell.HoriJustify = CJUST
	
	oCell = oSheet.getCellByPosition(COL_O, ROW_HEADING-1)
	oCell.String = &quot;&quot;
	oCell = oSheet.getCellByPosition(COL_O, ROW_HEADING)
	oCell.String = &quot;CongTerrID&quot;
	oCell.HoriJustify = CJUST
	
	&apos;// Insert column 0 “OwningParcel”; set col 0 heading to &quot;OwningParcel&quot;
	oSheet.Columns.insertByIndex(COL_A, 1)
	oCell = oSheet.getCellByPosition(COL_A, ROW_HEADING)
	oCell.String = &quot;OwningParcel&quot;
	oCell.HoriJustify = CJUST
	
	&apos;// Remove column 1; set col 1 heading (from &quot;Last Name&quot;) to &quot;UnitAddress&quot;
	oSheet.Columns.removeByIndex(COL_B, 1)
	oCell = oSheet.getCellByPosition(COL_B, ROW_HEADING)
	oCell.String = &quot;UnitAddress&quot;
	oCell.HoriJustify = CJUST
	
	&apos;// Set column 2 heading to &quot;Unit&quot;
	oCell = oSheet.getCellByPosition(COL_C, ROW_HEADING)
	oCell.String = &quot;Unit&quot;
	oCell.HoriJustify = CJUST

	&apos;// Move data from column J (&quot;Full Address&quot;) to column B (&quot;UnitAddress&quot;)
	oMrgRange = oRange
	oMrgRange.StartColumn = COL_J
	oMrgRange.EndColumn = COL_J
	oMrgRange.StartRow = ROW_6
	oMrgRange.EndRow = ROW_6 + lRowCount-1
&apos;dim oTarget as new com.sun.star.table.CellAddress
	oTarget.Sheet = oRange.Sheet
	oTarget.Column = COL_B
	oTarget.Row = ROW_6
	oSheet.moveRange(oTarget,oMrgRange)

	&apos;// remove columns D - H
	oSheet.Columns.removeByIndex(COL_D, COL_H-COL_D+1)
	
	&apos;// insert &quot;Resident1&quot; column at D
	oSheet.Columns.insertByIndex(COL_D, 1)
	oCell = oSheet.getCellByPosition(COL_D, ROW_HEADING)
	oCell.String = &quot;Resident1&quot;
	oCell.HoriJustify = CJUST

	&apos;// move all column C name entries to column D
	oMrgRange = oRange
	oMrgRange.StartColumn = COL_C
	oMrgRange.EndColumn = COL_C
	oMrgRange.StartRow = ROW_6
	oMrgRange.EndRow = ROW_6 + lRowCount-1
&apos;dim oTarget as new com.sun.star.table.CellAddress
	oTarget.Sheet = oRange.Sheet
	oTarget.Column = COL_D
	oTarget.Row = ROW_6
	oSheet.moveRange(oTarget,oMrgRange)	

	&apos;// Move data from old column I [now E] (&quot;Apartment Number&quot;) to column C (Unit)
	oMrgRange = oRange
	oMrgRange.StartColumn = COL_E
	oMrgRange.EndColumn = COL_E
	oMrgRange.StartRow = ROW_6
	oMrgRange.EndRow = ROW_6 + lRowCount-1
&apos;dim oTarget as new com.sun.star.table.CellAddress
	oTarget.Sheet = oRange.Sheet
	oTarget.Column = COL_C
	oTarget.Row = ROW_6
	oSheet.moveRange(oTarget,oMrgRange)

	&apos;// remove old columns I, J (now E, F)
	oSheet.Columns.removeByIndex(COL_E, 2)
	
	&apos;// set E, F column headings to Phone1, Phone2
	oCell = oSheet.getCellByPosition(COL_E, ROW_HEADING)
	oCell.String = &quot;Phone1&quot;
	oCell.HoriJustify = CJUST
	oCell = oSheet.getCellByPosition(COL_F, ROW_HEADING)
	oCell.String = &quot;Phone2&quot;
	oCell.HoriJustify = CJUST
	
	
	&apos;// set &quot;RecordDate&quot; heading on col M
	oCell = oSheet.getCellByPosition(COL_M, ROW_HEADING)
	oCell.String = &quot;RecordDate&quot;
	oCell.HoriJustify = CJUST
	
	&apos;// move L1 - S4 header info back to A1
	oMrgRange = oRange
	oMrgRange.StartColumn = COL_L
	oMrgRange.EndColumn = COL_S
	oMrgRange.StartRow = ROW_1
	oMrgRange.EndRow = ROW_4
&apos;dim oTarget as new com.sun.star.table.CellAddress
	oTarget.Sheet = oRange.Sheet
	oTarget.Column = COL_A
	oTarget.Row = ROW_1
	oSheet.moveRange(oTarget,oMrgRange)

	&apos;// fill column 0 with OwningParcel from header;
	&apos;// fill column A with property id from E1
	&apos;// add SitusAddress in each column N from FullAddress (column B)
	&apos;// B2.Value = row count
	oCell =	oSheet.getCellByPosition(COL_E, ROW_1)
	sPropID = oCell.String
	lThisRow = ROW_HEADING
	for i = 0 to lRowCount-1
		lThisRow = lThisRow + 1
		oCell =	oSheet.getCellByPosition(COL_A, lThisRow)
		oCell.setFormula(&quot;=$E$1&quot;)
		
		&apos;// convert full address col B to SC address col N
		oCell =	oSheet.getCellByPosition(COL_B, lThisRow)
		sFullAddr = oCell.String
		sSCAddr = fsAddrToSCFormat(sFullAddr)
		oCell =	oSheet.getCellByPosition(COL_N, lThisRow)
		oCell.String = sSCAddr
		
	next i	

	&apos;// fill column H with SubTerritory from B4; set formula so
	&apos;// user may change dynamically
	oCell =	oSheet.getCellByPosition(COL_B, ROW_4)
	if Len(oCell.String) = 0 then
	   oCell.SetFormula(&quot;=&quot; + CHR(34) + CHR(34))
	endif
	sSubTerr = oCell.String
	lThisRow = ROW_HEADING
	for i = 0 to lRowCount-1
		lThisRow = lThisRow + 1
		oCell =	oSheet.getCellByPosition(COL_H, lThisRow)
		oCell.setFormula(&quot;=$B$4&quot;)
	next i	
	
	&apos;// fill column I with CongTerrID from D4; set formula so
	&apos;// user may change dynamically
	oCell =	oSheet.getCellByPosition(COL_D, ROW_4)
	sCongTerr = oCell.String
	lThisRow = ROW_HEADING
	for i = 0 to lRowCount-1
		lThisRow = lThisRow + 1
		oCell =	oSheet.getCellByPosition(COL_I, lThisRow)
		oCell.setFormula(&quot;=$D$4&quot;)
	next i	
	SetTerrWidths()		&apos;// also RecordDate

	&apos;// fill column M with RecordDate from C2
	oCell =	oSheet.getCellByPosition(COL_C, ROW_2)
	dDate = oCell.Value
	lThisRow = ROW_HEADING
	for i = 0 to lRowCount-1
		lThisRow = lThisRow + 1
		oCell =	oSheet.getCellByPosition(COL_M, lThisRow)
		oCell.setValue(dDate)
		oCell.NumberFormat = MDYY
		oCell.HoriJustify = CJUST
	next i	

	SetBridgeHeadings()
	SetBridgeColWidths()
	
	&apos;// set sheet type at H1 &quot;Admin-Bridge formatted sheet&quot;
	oCell =	oSheet.getCellByPosition(COL_H, ROW_1)
	oCell.String = &quot;Admin-Bridge formatted sheet&quot;

	&apos;// Reset formula =COUNTA($A$6:$A$1299) in cell C2
&apos;	oCell = oSheet.getCellByPosition(COL_B, ROW_2)
&apos;	oCell.setFormula(&quot;=COUNTA(A6:A1299)&quot;)
&apos;	oCell.HoriJustify = CJUST
	SetHdrSumFormula()
		
	&apos;// Insure all headings Bold.
	BoldHeadings()

	&apos;// Set UnitAddress column width
	SetUnitAddrWidth()
	
	&apos;// Set SitusAddress column width
	SetSitusAddrWidth()
	
	&apos;// Force recalculation so count shows up correctly
	ForceRecalc()
	
NormalExit:
	exit sub
	
ErrorHandler:
	msgBox(&quot;RUImportToBridge - unprocessed error.&quot;)
	GoTo NormalExit
end sub		&apos;// end RUImportToBridge		10/23/20
&apos;/**/

&apos;// RUNewTerr_1.bas
&apos;//---------------------------------------------------------------
&apos;// RUNewTerr_1 - RefUSA new territory phase 1 process.
&apos;//		10/16/20.	wmk.	22:15
&apos;//---------------------------------------------------------------

public sub RUNewTerr_1()

&apos;//	Usage.	macro call or
&apos;//			call RUNewTerr_1()
&apos;//
&apos;// Entry.	user has loaded Terxxx.csv RefUSA raw data with column headings
&apos;//			user has also (optionally) created TErrxxxHdr sheet with
&apos;//			 essential territory definition fields set
&apos;//
&apos;//	Exit.	Terrxxx_Bridge.csv created and ready for SQL .import using
&apos;//			RUNewTerr_2.sh proc
&apos;//
&apos;// Calls.
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	10/15/20.	wmk.	original code
&apos;//	10/16/20.	wmk.	add CopyToEnd and delete 4 lines before copy
&apos;//						to file for export; export sheet as .csv with
&apos;//						name Terrxxx_Bridge.csv; mod to require
&apos;//						TerrNewHdr to be present
&apos;//	Notes.


&apos;//	constants.
const DKLIME=6207774			&apos;// DARKLIME color value

&apos;//	local variables.
dim oDoc		As Object
dim oSel		As Object
dim oRange		As Object
dim oSheet		As Object
dim iSheetIx	As Integer
dim sSheetName	As String
dim sTerrID	As String		&apos;// territory ID

	&apos;// code.
	ON ERROR GOTO ErrorHandler
	oDoc = ThisComponent
	oSel = oDoc.getCurrentSelection()
	oRange = oSel.RangeAddress
	iSheetIx = oRange.Sheet
	oSheet = oDoc.Sheets(iSheetIx)
		
	TabColor( DKLIME )
	ProtectSheet()
	CopyToEnd()
	UnprotectSheet()

	&apos;// presort imported data
	SelectNewRows()
	
dim oDocument	As Object
dim oDispatcher	As Object
dim nColumns	As Integer
	oDocument   = ThisComponent.CurrentController.Frame
	oDispatcher = createUnoService(&quot;com.sun.star.frame.DispatchHelper&quot;)
	nColumns = ASC(&quot;S&quot;) - ASC(&quot;A&quot;)
dim args2(0) as new com.sun.star.beans.PropertyValue
	args2(0).Name = &quot;By&quot;
	args2(0).Value = nColumns
oDispatcher.executeDispatch(oDocument, &quot;.uno:GoRightSel&quot;, &quot;&quot;, 0, args2())
	SortByStreetNum()

	ImportRefUSA()
	sTerrID = Mid(ThisComponent.getTitle(),5,3)
	sSheetName = &quot;Terr&quot; + sTerrID + &quot;_Import&quot;
	RenameSheet(sSheetName)
	ProtectSheet()
	CopyToEnd()
	
	UnprotectSheet()
	RUImportToBridge
	sSheetName = &quot;Terr&quot; + sTerrID + &quot;_Import&quot;
	RenameSheet(sSheetName)
	ProtectSheet()
	CopyToEnd()
	
	UnprotectSheet()
	&apos;// pick up new sheet pointers
	oSel = oDoc.getCurrentSelection()
	oRange = oSel.RangeAddress
	iSheetIx = oRange.Sheet
	oSheet = oDoc.Sheets(iSheetIx)
	&apos;// leave all header rows, since linked values will lose refs if delete
	sSheetName = &quot;Terr&quot; + sTerrID + &quot;_IBridge&quot;
	RenameSheet(sSheetName)
	ProtectSheet()
	CopyToNewWork()
	
NormalExit:
	exit sub
	
ErrorHandler:
	msgbox(&quot;RUNewTerr_1 - unprocessed error&quot;)
	GoTo NormalExit
	
end sub		&apos;// end RUNewTerr_1		10/16/20
&apos;/**/

&apos;// SCBridgeToBridge.bas
&apos;//-------------------------------------------------------------------
&apos;// SCBridgeToBridge - Make Admin-Bridge sheet from SCPA.csv download.
&apos;//		9/21/20.	wmk.	06:45
&apos;//-------------------------------------------------------------------

public sub SCBridgeToBridge()

&apos;//	Usage.	macro call or
&apos;//			call SCBridgeToBridge()
&apos;//
&apos;// Entry.	user has SCPA.csv download sheet selected
&apos;//
&apos;//	Exit.	Sheet has 4-row Admin-Bridge sheet header added; columns bold,
&apos;//			view frozen at Row5
&apos;//
&apos;// Calls.	InsertTerrHdr, SetBridgeColWidths, BoldHeadings, FreezeView
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	9/21/20.	wmk.	original code
&apos;//
&apos;//	Notes.

&apos;//	constants.

&apos;//	local variables.
Dim oDoc As Object
Dim oSheet As Object
Dim NewColumn As Object
dim oSel as Object
dim iSheetIx as integer
dim oRange as Object
dim lThisRow as long		&apos;// current row selected on sheet
dim oMrgRange	As Object	&apos;// merge range

dim oCell	As Object		&apos;// cell working on

	&apos;// code.
	ON ERROR GOTO ErrorHandler
	oDoc = ThisComponent
	oSel = oDoc.getCurrentSelection()
	oRange = oSel.RangeAddress
	iSheetIx = oRange.Sheet
	oSheet = oDoc.Sheets(iSheetIx)
	InsertTerrHdr(&quot;Admin-Bridge formatted sheet&quot;)
	SetBridgeHeadings()
	SetBridgeColWidths()
	BoldHeadings()
	FreezeView()

NormalExit:
	exit sub
	
ErrorHandler:
	msgbox(&quot;SCBridgeToBridge - unprocessed error&quot;)
	GoTo NormalExit
	
end sub		&apos;// end SCBridgeToBridge	9/21/20
&apos;/**/

&apos;// ImportRefUSA.bas
&apos;//---------------------------------------------------------------
&apos;// ImportRefUSA - Restructure ReferenceUSA imported sheet.
&apos;//		10/25/20.	wmk.	08:00
&apos;//---------------------------------------------------------------

public sub ImportRefUSA()

&apos;//	Usage.	macro call or
&apos;//			call ImportRefUSA()
&apos;//
&apos;// Entry.	sheet selected with raw .csv imported data from ReferenceUSA
&apos;//			row index 0 contains headings
&apos;//
&apos;//	Exit.	sheet reorganized as per Notes below; resultant sheet is
&apos;//			in Admin-Import format
&apos;//Last Name, First Name, Full Name, House Number, Pre-directional, Street,
&apos;//Street Suffix, Post-directional, Apartment Number, Full Address, Phone1,
&apos;//Phone2, RefUSA Phone, truepeople, 411, whitepages, DoNotCall, RSO, Foreign
&apos;//
&apos;// Calls.	KillAutoRecalc, FreezeView, BoldHeadings, SetPhoneWidts
&apos;//			SetFullAddrWidth, SetColWidth, SelectActiveRows, SetSelection,
&apos;//			SortByStreetNum, SetSearchWidths, ConcatAddressM, ConcatFirstLastM
&apos;//			InsertRUNewHdr, SelectNewRows
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	8/28/20.	wmk.	original code
&apos;//	8/28/20.	wmk.	added calls to KillAutoRecalc and FreezeView
&apos;// 8/30/20.	wmk.	added call to SetPhoneWidths; added header
&apos;//						&quot;RefUSA&quot; at colum COL_RUPHONE, ROW 3
&apos;//	9/1/20.		wmk.	added code to place column headings for
&apos;//						DoNotCall, RSO
&apos;// 9/2/20.		wmk.	Found Name column changed to Full Name; header
&apos;//						information updated to match MultiMail.db
&apos;//						field mapping sheet for Admin Import
&apos;//	9/3/20		wmk.	Merge A1-A3 for &lt;Area-CommonName&gt;, merge E1-G1
&apos;//						for &lt;OwnerParcel&gt;, merge E2-G2 for &lt;OwnerName1&gt;,
&apos;//						merge E3-G3 for Streets-Address(s); SortOnAddress
&apos;//						ConcatAddressM, ConcatFirstLastM calls added; 
&apos;// 					columns M-P widths set to 1.34&quot;
&apos;//	9/6/20.		wmk.	add support for &quot;RecordDate&quot; field in SplitProps
&apos;//						note RUImportToBridge is where the actual support
&apos;//						code will be placed
&apos;//	9/8/20.		wmk.	add support for &quot;Foreign&quot; field in SplitProps;
&apos;//						note RUIMportToBridge and RUImportToEdit is where
&apos;//						actual support code will be placed; range for
&apos;//						SortAddress now includes column &quot;S&quot;
&apos;// 9/16/20.	wmk.	change to sort on both street and full address
&apos;//						so records come out in street order
&apos;//	9/24/20.	wmk.	mod to call InsertTerrHdr to set up header rows;
&apos;//						constants moved ahead of code; perform all column
&apos;//						insertion and deletion prior to InsertTerrHdr;
&apos;//						use SetColHeadings to set column headings; use
&apos;//						SetColWidths to set column widths; SortAgain
&apos;//						substituted for SortRUImport
&apos;//	9/25/20.	wmk.	old abandoned code removed
&apos;//	10/6/20.	wmk.	mod to call InsertRUNewHdr to set basic territory
&apos;//						information in header. User can now define terr
&apos;//						so basic territory data can be query extracted
&apos;//						to sheet TerrxxxHdr
&apos;//	10/15/20.	wmk.	first presort imported data by Street, Number
&apos;// 10/25/20.	wmk.	skip sort deactivated; insert column moved after
&apos;//						presort
&apos;//
&apos;//	Notes. Territories/RefUSATest.csv import into sheet..
&apos;// MultiMail/SplitProps table fields.
&apos;//		9/7/20.
&apos;//0|OwningParcel|TEXT|1||0
&apos;//1|UnitAddress|TEXT|1||0
&apos;//2|Resident1|TEXT|0||0
&apos;//3|Resident2|TEXT|0||0
&apos;//4|Phone1|TEXT|0||0
&apos;//5|Phone2|TEXT|0||0
&apos;//6|RefUSA-Phone|TEXT|0||0
&apos;//7|SubTerritory|TEXT|0||0
&apos;//8|CongTerrID|TEXT|0||0
&apos;//9|DoNotCall|INTEGER|0|0|0
&apos;//10|RSO|INTEGER|0|0|0
&apos;//11|Foreign|INTEGER|0|0|0
&apos;//12|RecordDate|REAL|0|0|0
&apos;//13|DeletePending|INTEGER|0|0|0
&apos;//
&apos;//	Method. the following steps will be executed
&apos;//		turn off &quot;Autorecalculate&quot; Data property
&apos;//		insert 4 rows starting at row index 0
&apos;//		[Set View/Freeze Rows and Columns at column 0, row 5]
&apos;//		insert column at index 2 &quot;Found Name&quot;
&apos;//		set column header at index 2 &quot;Found Name&quot;
&apos;//		delete 4 columns at column index 9 (city, state, zip, county)
&apos;//		add 3 columns at column index 9 (Full Address, Phone1, Phone2)
&apos;//		insert 3 columns at column index 13 (truepeople, 411, whitepages)
&apos;//		write column headings in 2 cells row indexes 3,4 column indexes 13-15
&apos;//			&quot;search/truepeople&quot;, &quot;search/411&quot;, &quot;search/whitepages&quot;

&apos;//	constants.
const COL_FULLNAME=2		&apos;// found name
const COL_NUMBER=3			&apos;// house number
const COL_PREDIR=4			&apos;// street pre-direction
const COL_STREET=5			&apos;// street name
const COL_SUFFIX=6			&apos;// street suffix (e.g. Ave)
const COL_POSTDIR=7			&apos;// street post direction
const COL_UNIT=8			&apos;// unit/apt #
const COL_FULLADDR=9		&apos;// full concatenated address
const YELLOW=16776960		&apos;// decimal value of YELLOW color
const MDYY=30				&apos;// number format M/D/YYY
const LJUST=1		&apos;// left-justify HoriJustify				&apos;// mod052020
const CJUST=2		&apos;// center HoriJustify						&apos;// mod052020
const RJUST=3		&apos;// right-justify HoriJustify				&apos;// mod052320
const COL_AREA=0
const ROW_AREA=0
const COL_CITY=8
const COL_ZIP = 10
const COL_ICITY=1
const ROW_ICITY=2
const COL_IZIP=2
const ROW_DATE=1
const COL_DATE=2
const ROW_BASE=5
const COL_UNITS=0		&apos;// &quot;Units shown:&quot;
const ROW_UNITS=1
const COL_FUNITS=1		&apos;// &quot;=COUNTA(A6:A298)&quot;
&apos;// new header locations 9/2/20
const COL_SUBTERR=0		&apos;// &quot;SubTerritory&quot;
const ROW_SUBTERR=3
const COL_TERRID=2		&apos;// &quot;CongTerrID&quot;
const ROW_TERRID=3
const COL_PROPID=3		&apos;// &quot;Property ID&quot;
const ROW_PROPID=0
const ROW_OWNER=1		&apos;// &quot;Owner&quot;
const ROW_STRADDR=2		&apos;// &quot;Streets/Addrs&quot;
&apos;// end new header locations 9/2/20
const COL_SEARCH=13		&apos;//	search/truepeople
const COL_RUPHONE=12	&apos;// RefUSA Phone column
const COL_DONOTCALL=16		&apos;// do not call
const COL_RSO=17			&apos;// registered sex offender
const COL_FOREIGN=18		&apos;// foreign language

&apos;// column widths
const ONE_INCH=2540	&apos;// one inch in .001cm
const A_WIDTH=1.0	&apos;// Last Name
const B_WIDTH=1.0	&apos;// First Name
const C_WIDTH=1.75	&apos;// Full Name
const D_WIDTH=1.04	&apos;// House Number
const E_WIDTH=1.01	&apos;// Pre-directional
const F_WIDTH=1.0	&apos;// Street
const G_WIDTH=0.9	&apos;// Street Suffix
const H_WIDTH=1.1	&apos;// Post-directional
const I_WIDTH=1.30	&apos;// Apartment Number
const J_WIDTH=1.75	&apos;// Full Address
const K_WIDTH=1.0	&apos;// Phone1
const L_WIDTH=1.0	&apos;// Phone2
const M_WIDTH=1.1	&apos;// RefUSA Phone
const N_WIDTH=0.9	&apos;// truepeople
const O_WIDTH=0.9	&apos;// 411
const P_WIDTH=0.9	&apos;// whitepages
const Q_WIDTH=0.9	&apos;// DoNotCall
const R_WIDTH=0.9	&apos;// RSO
const S_WIDTH=0.9	&apos;// Foreign

&apos;//	local variables.
Dim oDoc As Object
Dim oSheet As Object
Dim NewColumn As Object
dim oSel as Object
dim iSheetIx as integer
dim oRange as Object
dim lThisRow as long		&apos;// current row selected on sheet
dim oMrgRange	As Object	&apos;// merge range

&apos;// processing variables.
dim oCell As Object			&apos;// transient cell data
dim sColHdgs(18)	As String	&apos;// column heading strings
dim nColWidths(18)	As Integer	&apos;// column widths

	&apos;// code.
	ON ERROR GoTo ErrorHandler
	oDoc = ThisComponent
	oSel = oDoc.getCurrentSelection()
	oRange = oSel.RangeAddress
	iSheetIx = oRange.Sheet
	oSheet = oDoc.Sheets(iSheetIx)


if false then
 GoTo SkipSort
endif
	&apos;// presort imported data
	SelectNewRows()
	
dim oDocument	As Object
dim oDispatcher	As Object
dim nColumns	As Integer
	oDocument   = ThisComponent.CurrentController.Frame
	oDispatcher = createUnoService(&quot;com.sun.star.frame.DispatchHelper&quot;)
	nColumns = ASC(&quot;S&quot;) - ASC(&quot;A&quot;)
dim args2(0) as new com.sun.star.beans.PropertyValue
	args2(0).Name = &quot;By&quot;
	args2(0).Value = nColumns
oDispatcher.executeDispatch(oDocument, &quot;.uno:GoRightSel&quot;, &quot;&quot;, 0, args2())
&apos;	SortRUImport()
&apos;	SortAgain()
	SortByStreetNum()
SkipSort:

	&apos;// insert and delete columns before doing anything else
	&apos;// insert column at index 2 &quot;Full Name&quot;
	oSheet.Columns.insertByIndex(COL_FULLNAME, 1)
	
	&apos;// remove 4 columns at Full Address column
	oSheet.Columns.removeByIndex(COL_FULLADDR, 4)
	
	&apos;// insert 3 columns at Full Address column
	&apos;// Headings &quot;Full Address&quot;, &quot;Phone1&quot;, &quot;Phone2&quot;
	oSheet.Columns.insertByIndex(COL_FULLADDR, 3)

	&apos;// now that columns in place, InsertTerrHdr
	InsertRUNewHdr(&quot;Admin-Import formatted sheet&quot;)
	
	&apos;// set column headings
	sColHdgs(0) = &quot;Last Name&quot;
	sColHdgs(1) = &quot;First Name&quot;
	sColHdgs(2) = &quot;Full Name&quot;
	sColHdgs(3) = &quot;House Number&quot;
	sColHdgs(4) = &quot;Pre-directional&quot;
	sColHdgs(5) = &quot;Street&quot;
	sColHdgs(6) = &quot;Street Suffix&quot;
	sColHdgs(7) = &quot;Post-directional&quot;
	sColHdgs(8) = &quot;Apartment Number&quot;
	sColHdgs(9) = &quot;Full Address&quot;
	sColHdgs(10) = &quot;Phone1&quot;
	sColHdgs(11) = &quot;Phone2&quot;
	sColHdgs(12) = &quot;RefUSA Phone&quot;
	sColHdgs(13) = &quot;truepeople&quot;
	sColHdgs(14) = &quot;411&quot;
	sColHdgs(15) = &quot;whitepages&quot;
	sColHdgs(16) = &quot;DoNotCall&quot;
	sColHdgs(17) = &quot;RSO&quot;
	sColHdgs(18)= &quot;Foreign&quot;
	SetColHeadings(sColHdgs)
	
	&apos;// set column widths
	nColWidths(0) = A_WIDTH * ONE_INCH
	nColWidths(1) = B_WIDTH * ONE_INCH
	nColWidths(2) = C_WIDTH * ONE_INCH
	nColWidths(3) = D_WIDTH * ONE_INCH
	nColWidths(4) = E_WIDTH * ONE_INCH
	nColWidths(5) = F_WIDTH * ONE_INCH
	nColWidths(6) = G_WIDTH * ONE_INCH
	nColWidths(7) = H_WIDTH * ONE_INCH
	nColWidths(8) = I_WIDTH * ONE_INCH
	nColWidths(9) = J_WIDTH * ONE_INCH
	nColWidths(10) = K_WIDTH * ONE_INCH
	nColWidths(11) = L_WIDTH * ONE_INCH
	nColWidths(12) = M_WIDTH * ONE_INCH
	nColWidths(13) = N_WIDTH * ONE_INCH
	nColWidths(14) = O_WIDTH * ONE_INCH
	nColWidths(15) = P_WIDTH * ONE_INCH
	nColWidths(16) = Q_WIDTH * ONE_INCH
	nColWidths(17) = R_WIDTH * ONE_INCH
	nColWidths(18) = S_WIDTH * ONE_INCH
	SetColWidths(nColWidths)

	&apos;// select all active rows.
&apos;	SelectActiveRows()
	
	&apos;// kill AutoCalculate
	KillAutoRecalc()

	&apos;// Freeze header so stays when scrolling
	FreezeView()
	
	&apos;// Bold and center headings
	BoldHeadings()

	&apos;// select all active rows.
	SelectActiveRows()
	
	&apos;// concatenate addresses
	ConcatAddressM()
	
	&apos;// concatenate names
	ConcatFirstLastM()

	&apos;// select through column S (at column A in last row)
&apos;// 
		
	&apos;// restore user entry range selection.
	SetSelection(oRange)
		
	&apos;// finished
	msgbox(&quot;ImportRefUSA complete.&quot;)
	
NormalExit:
	exit sub
	
ErrorHandler:
	msgbox(&quot;ImportRefUSA - unprocessed error.&quot;)
	GoTo NormalExit
	
end sub		&apos;// end ImportRefUSA	10/25/20
&apos;/**/

&apos;// ImportRefUSA1.bas
&apos;//---------------------------------------------------------------
&apos;// ImportRefUSA1 -(old) Restructure ReferenceUSA imported sheet.
&apos;//		10/6/20.	wmk.	06:15
&apos;//---------------------------------------------------------------

public sub ImportRefUSA1()

&apos;//	Usage.	macro call or
&apos;//			call ImportRefUSA()
&apos;//
&apos;// Entry.	sheet selected with raw .csv imported data from ReferenceUSA
&apos;//			row index 0 contains headings
&apos;//
&apos;//	Exit.	sheet reorganized as per Notes below; resultant sheet is
&apos;//			in Admin-Import format
&apos;//Last Name, First Name, Full Name, House Number, Pre-directional, Street,
&apos;//Street Suffix, Post-directional, Apartment Number, Full Address, Phone1,
&apos;//Phone2, RefUSA Phone, truepeople, 411, whitepages, DoNotCall, RSO, Foreign
&apos;//
&apos;// Calls.	KillAutoRecalc, FreezeView, BoldHeadings, SetPhoneWidts
&apos;//			SetFullAddrWidth, SetColWidth, SelectActiveRows, SetSelection,
&apos;//			SortOnAddress, SetSearchWidths, ConcatAddressM, ConcatFirstLastM
&apos;//			InsertRUNewHdr
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	8/28/20.	wmk.	original code
&apos;//	8/28/20.	wmk.	added calls to KillAutoRecalc and FreezeView
&apos;// 8/30/20.	wmk.	added call to SetPhoneWidths; added header
&apos;//						&quot;RefUSA&quot; at colum COL_RUPHONE, ROW 3
&apos;//	9/1/20.		wmk.	added code to place column headings for
&apos;//						DoNotCall, RSO
&apos;// 9/2/20.		wmk.	Found Name column changed to Full Name; header
&apos;//						information updated to match MultiMail.db
&apos;//						field mapping sheet for Admin Import
&apos;//	9/3/20		wmk.	Merge A1-A3 for &lt;Area-CommonName&gt;, merge E1-G1
&apos;//						for &lt;OwnerParcel&gt;, merge E2-G2 for &lt;OwnerName1&gt;,
&apos;//						merge E3-G3 for Streets-Address(s); SortOnAddress
&apos;//						ConcatAddressM, ConcatFirstLastM calls added; 
&apos;// 					columns M-P widths set to 1.34&quot;
&apos;//	9/6/20.		wmk.	add support for &quot;RecordDate&quot; field in SplitProps
&apos;//						note RUImportToBridge is where the actual support
&apos;//						code will be placed
&apos;//	9/8/20.		wmk.	add support for &quot;Foreign&quot; field in SplitProps;
&apos;//						note RUIMportToBridge and RUImportToEdit is where
&apos;//						actual support code will be placed; range for
&apos;//						SortAddress now includes column &quot;S&quot;
&apos;// 9/16/20.	wmk.	change to sort on both street and full address
&apos;//						so records come out in street order
&apos;//	9/24/20.	wmk.	mod to call InsertTerrHdr to set up header rows;
&apos;//						constants moved ahead of code; perform all column
&apos;//						insertion and deletion prior to InsertTerrHdr;
&apos;//						use SetColHeadings to set column headings; use
&apos;//						SetColWidths to set column widths; SortAgain
&apos;//						substituted for SortRUImport
&apos;//	9/25/20.	wmk.	old abandoned code removed
&apos;//	10/6/20.	wmk.	mod to call InsertRUNewHdr to set basic territory
&apos;//						information in header. User can now define terr
&apos;//						so basic territory data can be query extracted
&apos;//						to sheet TerrxxxHdr
&apos;//
&apos;//	Notes. Territories/RefUSATest.csv import into sheet..
&apos;// MultiMail/SplitProps table fields.
&apos;//		9/7/20.
&apos;//0|OwningParcel|TEXT|1||0
&apos;//1|UnitAddress|TEXT|1||0
&apos;//2|Resident1|TEXT|0||0
&apos;//3|Resident2|TEXT|0||0
&apos;//4|Phone1|TEXT|0||0
&apos;//5|Phone2|TEXT|0||0
&apos;//6|RefUSA-Phone|TEXT|0||0
&apos;//7|SubTerritory|TEXT|0||0
&apos;//8|CongTerrID|TEXT|0||0
&apos;//9|DoNotCall|INTEGER|0|0|0
&apos;//10|RSO|INTEGER|0|0|0
&apos;//11|Foreign|INTEGER|0|0|0
&apos;//12|RecordDate|REAL|0|0|0
&apos;//13|DeletePending|INTEGER|0|0|0
&apos;//
&apos;//	Method. the following steps will be executed
&apos;//		turn off &quot;Autorecalculate&quot; Data property
&apos;//		insert 4 rows starting at row index 0
&apos;//		[Set View/Freeze Rows and Columns at column 0, row 5]
&apos;//		insert column at index 2 &quot;Found Name&quot;
&apos;//		set column header at index 2 &quot;Found Name&quot;
&apos;//		delete 4 columns at column index 9 (city, state, zip, county)
&apos;//		add 3 columns at column index 9 (Full Address, Phone1, Phone2)
&apos;//		insert 3 columns at column index 13 (truepeople, 411, whitepages)
&apos;//		write column headings in 2 cells row indexes 3,4 column indexes 13-15
&apos;//			&quot;search/truepeople&quot;, &quot;search/411&quot;, &quot;search/whitepages&quot;

&apos;//	constants.
const COL_FULLNAME=2		&apos;// found name
const COL_NUMBER=3			&apos;// house number
const COL_PREDIR=4			&apos;// street pre-direction
const COL_STREET=5			&apos;// street name
const COL_SUFFIX=6			&apos;// street suffix (e.g. Ave)
const COL_POSTDIR=7			&apos;// street post direction
const COL_UNIT=8			&apos;// unit/apt #
const COL_FULLADDR=9		&apos;// full concatenated address
const YELLOW=16776960		&apos;// decimal value of YELLOW color
const MDYY=30				&apos;// number format M/D/YYY
const LJUST=1		&apos;// left-justify HoriJustify				&apos;// mod052020
const CJUST=2		&apos;// center HoriJustify						&apos;// mod052020
const RJUST=3		&apos;// right-justify HoriJustify				&apos;// mod052320
const COL_AREA=0
const ROW_AREA=0
const COL_CITY=8
const COL_ZIP = 10
const COL_ICITY=1
const ROW_ICITY=2
const COL_IZIP=2
const ROW_DATE=1
const COL_DATE=2
const ROW_BASE=5
const COL_UNITS=0		&apos;// &quot;Units shown:&quot;
const ROW_UNITS=1
const COL_FUNITS=1		&apos;// &quot;=COUNTA(A6:A298)&quot;
&apos;// new header locations 9/2/20
const COL_SUBTERR=0		&apos;// &quot;SubTerritory&quot;
const ROW_SUBTERR=3
const COL_TERRID=2		&apos;// &quot;CongTerrID&quot;
const ROW_TERRID=3
const COL_PROPID=3		&apos;// &quot;Property ID&quot;
const ROW_PROPID=0
const ROW_OWNER=1		&apos;// &quot;Owner&quot;
const ROW_STRADDR=2		&apos;// &quot;Streets/Addrs&quot;
&apos;// end new header locations 9/2/20
const COL_SEARCH=13		&apos;//	search/truepeople
const COL_RUPHONE=12	&apos;// RefUSA Phone column
const COL_DONOTCALL=16		&apos;// do not call
const COL_RSO=17			&apos;// registered sex offender
const COL_FOREIGN=18		&apos;// foreign language

&apos;// column widths
const ONE_INCH=2540	&apos;// one inch in .001cm
const A_WIDTH=1.0	&apos;// Last Name
const B_WIDTH=1.0	&apos;// First Name
const C_WIDTH=1.75	&apos;// Full Name
const D_WIDTH=1.04	&apos;// House Number
const E_WIDTH=1.01	&apos;// Pre-directional
const F_WIDTH=1.0	&apos;// Street
const G_WIDTH=0.9	&apos;// Street Suffix
const H_WIDTH=1.1	&apos;// Post-directional
const I_WIDTH=1.30	&apos;// Apartment Number
const J_WIDTH=1.75	&apos;// Full Address
const K_WIDTH=1.0	&apos;// Phone1
const L_WIDTH=1.0	&apos;// Phone2
const M_WIDTH=1.1	&apos;// RefUSA Phone
const N_WIDTH=0.9	&apos;// truepeople
const O_WIDTH=0.9	&apos;// 411
const P_WIDTH=0.9	&apos;// whitepages
const Q_WIDTH=0.9	&apos;// DoNotCall
const R_WIDTH=0.9	&apos;// RSO
const S_WIDTH=0.9	&apos;// Foreign

&apos;//	local variables.
Dim oDoc As Object
Dim oSheet As Object
Dim NewColumn As Object
dim oSel as Object
dim iSheetIx as integer
dim oRange as Object
dim lThisRow as long		&apos;// current row selected on sheet
dim oMrgRange	As Object	&apos;// merge range

&apos;// processing variables.
dim oCell As Object			&apos;// transient cell data
dim sColHdgs(18)	As String	&apos;// column heading strings
dim nColWidths(18)	As Integer	&apos;// column widths

	&apos;// code.
	ON ERROR GoTo ErrorHandler
	oDoc = ThisComponent
	oSel = oDoc.getCurrentSelection()
	oRange = oSel.RangeAddress
	iSheetIx = oRange.Sheet
	oSheet = oDoc.Sheets(iSheetIx)

	&apos;// insert and delete columns before doing anything else
	&apos;// insert column at index 2 &quot;Full Name&quot;
	oSheet.Columns.insertByIndex(COL_FULLNAME, 1)

	&apos;// remove 4 columns at Full Address column
	oSheet.Columns.removeByIndex(COL_FULLADDR, 4)
	
	&apos;// insert 3 columns at Full Address column
	&apos;// Headings &quot;Full Address&quot;, &quot;Phone1&quot;, &quot;Phone2&quot;
	oSheet.Columns.insertByIndex(COL_FULLADDR, 3)

	&apos;// now that columns in place, InsertTerrHdr
	InsertRUNewHdr(&quot;Admin-Import formatted sheet&quot;)
	
	&apos;// set column headings
	sColHdgs(0) = &quot;Last Name&quot;
	sColHdgs(1) = &quot;First Name&quot;
	sColHdgs(2) = &quot;Full Name&quot;
	sColHdgs(3) = &quot;House Number&quot;
	sColHdgs(4) = &quot;Pre-directional&quot;
	sColHdgs(5) = &quot;Street&quot;
	sColHdgs(6) = &quot;Street Suffix&quot;
	sColHdgs(7) = &quot;Post-directional&quot;
	sColHdgs(8) = &quot;Apartment Number&quot;
	sColHdgs(9) = &quot;Full Address&quot;
	sColHdgs(10) = &quot;Phone1&quot;
	sColHdgs(11) = &quot;Phone2&quot;
	sColHdgs(12) = &quot;RefUSA Phone&quot;
	sColHdgs(13) = &quot;truepeople&quot;
	sColHdgs(14) = &quot;411&quot;
	sColHdgs(15) = &quot;whitepages&quot;
	sColHdgs(16) = &quot;DoNotCall&quot;
	sColHdgs(17) = &quot;RSO&quot;
	sColHdgs(18)= &quot;Foreign&quot;
	SetColHeadings(sColHdgs)
	
	&apos;// set column widths
	nColWidths(0) = A_WIDTH * ONE_INCH
	nColWidths(1) = B_WIDTH * ONE_INCH
	nColWidths(2) = C_WIDTH * ONE_INCH
	nColWidths(3) = D_WIDTH * ONE_INCH
	nColWidths(4) = E_WIDTH * ONE_INCH
	nColWidths(5) = F_WIDTH * ONE_INCH
	nColWidths(6) = G_WIDTH * ONE_INCH
	nColWidths(7) = H_WIDTH * ONE_INCH
	nColWidths(8) = I_WIDTH * ONE_INCH
	nColWidths(9) = J_WIDTH * ONE_INCH
	nColWidths(10) = K_WIDTH * ONE_INCH
	nColWidths(11) = L_WIDTH * ONE_INCH
	nColWidths(12) = M_WIDTH * ONE_INCH
	nColWidths(13) = N_WIDTH * ONE_INCH
	nColWidths(14) = O_WIDTH * ONE_INCH
	nColWidths(15) = P_WIDTH * ONE_INCH
	nColWidths(16) = Q_WIDTH * ONE_INCH
	nColWidths(17) = R_WIDTH * ONE_INCH
	nColWidths(18) = S_WIDTH * ONE_INCH
	SetColWidths(nColWidths)
	
	&apos;// kill AutoCalculate
	KillAutoRecalc()

	&apos;// Freeze header so stays when scrolling
	FreezeView()
	
	&apos;// Bold and center headings
	BoldHeadings()

	&apos;// select all active rows.
	SelectActiveRows()
	
	&apos;// concatenate addresses
	ConcatAddressM()
	
	&apos;// concatenate names
	ConcatFirstLastM()

	&apos;// select through column S (at column A in last row)
&apos;// 
dim oDocument	As Object
dim oDispatcher	As Object
dim nColumns	As Integer
	oDocument   = ThisComponent.CurrentController.Frame
	oDispatcher = createUnoService(&quot;com.sun.star.frame.DispatchHelper&quot;)
	nColumns = ASC(&quot;S&quot;) - ASC(&quot;A&quot;)
dim args2(0) as new com.sun.star.beans.PropertyValue
	args2(0).Name = &quot;By&quot;
	args2(0).Value = nColumns
oDispatcher.executeDispatch(oDocument, &quot;.uno:GoRightSel&quot;, &quot;&quot;, 0, args2())
&apos;	SortRUImport()
	SortAgain()
		
	&apos;// restore user entry range selection.
	SetSelection(oRange)
		
	&apos;// finished
	msgbox(&quot;ImportRefUSA complete.&quot;)
	
NormalExit:
	exit sub
	
ErrorHandler:
	msgbox(&quot;ImportRefUSA - unprocessed error.&quot;)
	GoTo NormalExit
	
end sub		&apos;// end ImportRefUSA	10/6/20
&apos;/**/

&apos;// InsertQTerrHdr.bas
&apos;//---------------------------------------------------------------
&apos;// InsertQTerrHdr - Insert 5-row territory sheet header.
&apos;//		10/13/20.	wmk.	21:30
&apos;//---------------------------------------------------------------

public sub InsertQTerrHdr(psTerrID As String, psTitle As String)

&apos;//	Usage.	macro call or
&apos;//			call InsertQTerrHdr( sTerrID, sTitle )
&apos;//
&apos;//		sTerrID - territory ID	
&apos;//		sTitle - sheet title to set in H1-I1
&apos;//
&apos;// Entry.	user has query.csv download sheet selected
&apos;//			sheet &apos;TerrHdr&apos; contains 2 rows of information from
&apos;//			TerrIDData.db (note sheet renamed by user from &apos;Ter.xxx.Hdr&apos;
&apos;// 	Row 1
&apos;//			  A			B			C			   D	E		F	    G
&apos;//			TerrID, AreaName, Street-Address(s), City, Zip, Location, Type
&apos;//		[Row 2]..[Row n]
&apos;//			  A		   B			C				 D			E
&apos;//			TerrID, SubTerr, Streets-Address(s), Homestead, Parcel-LIKE, 
&apos;//				    F		 G
&apos;//				Unit-LIKE, DBName
&apos;//		if 2nd row is empty, no subterritory information is present
&apos;//
&apos;//	Exit.	Territory sheet header inserted in 1st 4 rows with passed
&apos;//			title in H1-J1, and empty row in row 5 for headings to set
&apos;//
&apos;// Calls. InsertTerrHdr
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	9/30/20.	wmk.	original code; adapted from InsertTerrHdr
&apos;//	10/5/20.	wmk.	add TerrID to calling sequence; remove skip;
&apos;//						bug fix, was checking ROW_1 for subterritory,
&apos;//						changed to ROW_2
&apos;//	10/13/20.	wmk.	bug fix; script now has .headers ON, so only
&apos;//						insert 4 rows at top, and change to ROW_3 for
&apos;//						subterritory.
&apos;//	Notes.
&apos;// Method. obtain essential information from Terr.xxx.Hdr sheet
&apos;// where .xxx. is the territory ID string passed, if cannot find that
&apos;// sheet, just insert a blank row then call InsertTerrHdr
&apos;// Otherwise, duplicate InsertTerrHdr code, using information from
&apos;// Terr.xxx.Hdr sheet

&apos;//	constants.
const COL_PARCEL=0		&apos;// &quot;OwningParcel&quot; column index
const COL_A=0
const COL_B=1
const COL_C=2	
const COL_D=3
const COL_E=4
const COL_F=5
const COL_G=6			&apos;// column G index
const COL_H=7			&apos;// column H index
const COL_I=8			&apos;// column I index
const COL_J=9			&apos;// column J index
const COL_K=10			&apos;// column K index
const COL_L=11			&apos;// column L index 
const COL_M=12			&apos;// column M index (DoNotCall)
const COL_N=13			&apos;// column N index (RSO)
const COL_O=14			&apos;// column O index (Foreign)
const ROW_1=0
const ROW_2=1
const ROW_3=2
const ROW_4=3
const ROW_HEADING=4		&apos;// headings row index
const LJUST=1		&apos;// left-justify HoriJustify
const CJUST=2		&apos;// center HoriJustify		
const RJUST=3		&apos;// right-justify HoriJustify
const MDYY=30		&apos;// &apos;M/D/YY&apos; format value

const COL_AREA=0		&apos;// &quot;Area-CommonName&quot;	A1-D1
const ROW_AREA=0
const COL_CITY=8		
const COL_ZIP = 10
const COL_ICITY=1		&apos;// &lt;city&gt;			B3
const ROW_ICITY=2
const COL_IZIP=2		&apos;// &lt;zipcode&gt;		C3
const ROW_DATE=1
const COL_DATE=2		&apos;// &lt;date&gt; 			C2
const ROW_BASE=5
const COL_UNITS=0		&apos;// &quot;Units shown:&quot; 	A2
const ROW_UNITS=1
const COL_FUNITS=1		&apos;// &quot;=COUNTA(A6:A298)&quot; B2

&apos;// new header locations 9/2/20
const COL_SUBTERR=0		&apos;// &quot;SubTerritory&quot; 	A4
const ROW_SUBTERR=3
const COL_TERRID=2		&apos;// &quot;CongTerrID&quot;	B4
const ROW_TERRID=3
const COL_PROPID=3		&apos;// &quot;Property ID&quot;	D1
const ROW_PROPID=0
const ROW_OWNER=1		&apos;// &quot;Owner&quot;			D2
const ROW_STRADDR=2		&apos;// &quot;Streets/Addrs&quot;	D3
&apos;// end new header locations 9/2/20

&apos;// error codes
const ERR_UNK=0			&apos;// unknown
const ERR_HDRSHEET=1	&apos;// header sheet &apos;Terr.xxx.Hdr&apos; error

&apos;// local variables.
Dim oDoc As Object
Dim oSheet As Object
Dim NewColumn As Object
dim oSel as Object
dim iSheetIx as integer
dim oRange as Object
dim lThisRow as long		&apos;// current row selected on sheet
dim oMrgRange	As Object	&apos;// merge range

dim oHdrSheet	As Object	&apos;// sheet containing header information
dim oCell	As Object		&apos;// cell working on
dim sTitle	As String		&apos;// sheet title
dim sTerrID	As String		&apos;// territory ID
dim nErrCode	As Integer	&apos;// error code type 0 - unknown, 1 - sheet not found
dim sHdrShtName	As String	&apos;// header sheet name
dim iStatus	As Integer		&apos;// function return status
dim sAreaName	As String	&apos;// area-commonName
dim sCity 		As String	&apos;// city
dim	sZip		As String	&apos;// zip code
dim sSubTerr	As String	&apos;// subterritory
dim sPropID		As String	&apos;// property ID
dim sOwner		As String	&apos;// owner
dim sStreets	As String	&apos;// streets-address(s)

	&apos;// code.
	ON ERROR GOTO ErrorHandler
	nErrCode = ERR_UNK
	iStatus = 0
	oDoc = ThisComponent
	oSel = oDoc.getCurrentSelection()
	oRange = oSel.RangeAddress
	iSheetIx = oRange.Sheet
	oSheet = oDoc.Sheets(iSheetIx)

	&apos;// check passed TerrID and look for sheet by that name
	sTerrID = psTerrID
	nErrCode = ERR_HDRSHEET
	if len(sTerrID) = 0 then
		GoTo SimpleHeader
	endif

	sHdrShtName = &quot;Terr&quot; + sTerrID + &quot;Hdr&quot;
	sTitle = psTitle
	
	&apos;// see if sheet exists
	if NOT oDoc.Sheets.hasByName(sHdrShtName) then
		GoTo SimpleHeader
	endif
	
	nErrCode = ERR_UNK
	
	&apos;// get essential info from sHdrShtName, then process
	oHdrSheet = oDoc.Sheets.getByName(sHdrShtName)
&apos;dim sAreaName	As String	&apos;// area-commonName
&apos;dim sCity 		As String	&apos;// city
&apos;dim sZip		As String	&apos;// zip code
&apos;dim sSubTerr	As String	&apos;// subterritory
&apos;dim sPropID	As String	&apos;// property ID
&apos;dim sOwner		As String	&apos;// owner
&apos;dim sStreets	As String	&apos;// streets-address(s)
	&apos;// see if row 3 has subterritory information
	oCell = oHdrSheet.getCellByPosition(COL_A, ROW_3)
	if len(oCell.String) &gt; 0 then
		&apos;// get row 3 information, B subterr, C streets-address(s)
		oCell = oHdrSheet.getCellByPosition(COL_B, ROW_3)
		sSubTerr = oCell.String
		oCell = oHdrSheet.getCellByPosition(COL_C, ROW_3)
		sStreets = oCell.String
	else
		sSubTerr = &quot;&quot;
		&apos;// get streets information from row 2
		oCell = oHdrSheet.getCellByPosition(COL_C, ROW_2)
		sStreets = oCell.String
	endif	&apos;// end has subterritory information conditional

	&apos;// set remaining information from row 2 (territory)
	oCell = oHdrSheet.getCellByPosition(COL_A, ROW_2)
	sTerrID = oCell.String
	oCell = oHdrSheet.getCellByPosition(COL_B, ROW_2)
	sAreaName = oCell.String
	oCell = oHdrSheet.getCellByPosition(COL_D, ROW_2)
	sCity = oCell.String
	oCell = oHdrSheet.getCellByPosition(COL_E, ROW_2)
	sZip = oCell.String
	
	&apos;// insert 4 rows at top of sheet
	oSheet.Rows.insertByIndex(0, 4)	&apos;// insert header rows with heading

	&apos;// set sheet title
	oCell = oSheet.getCellByPosition(COL_H, ROW_1)
	oCell.String = psTitle
	MergeSheetType()
	
	&apos;// set &lt;Area-CommonName&gt;
	oCell = oSheet.getCellByPosition(COL_AREA, ROW_AREA)
	oCell.String = sAreaName
	MergeAreaCells()

	&apos;// Date to header
	oCell = oSheet.getCellByPosition(COL_DATE, ROW_DATE)
	oCell.setValue(Now())					&apos;// time stamp
	oCell.Text.NumberFormat = MDYY
	oCell.HoriJustify = CJUST
	
	&apos;// set &quot;Units Shown:&quot; info
	oCell = oSheet.getCellByPosition(COL_UNITS, ROW_UNITS)
	oCell.String = &quot;Units Shown:&quot;
	oCell.HoriJustify = RJUST
	SetHdrSumFormula(&quot;COUNTA($A$6:$A$1299)&quot;)
	
	&apos;// set &quot;City&quot; and set City, Zip
	oCell = oSheet.getCellByPosition(COL_A, ROW_3)
	oCell.String = &quot;City&quot;
	oCell.HoriJustify = RJUST
	oCell = oSheet.getCellByPosition(COL_ICITY, ROW_ICITY)
	oCell.String = sCity
	oCell.HoriJustify = CJUST
	oCell = oSheet.getCellByPosition(COL_IZIP, ROW_ICITY)
	oCell.String = sZip
	oCell.HoriJustify = CJUST
	
	&apos;// set &quot;SubTerr&quot; and &quot;CongTerrID&quot;
	oCell = oSheet.getCellByPosition(COL_SUBTERR, ROW_SUBTERR)
	oCell.String = &quot;SubTerritory&quot;
	oCell.HoriJustify = RJUST
	oCell = oSheet.getCellByPosition(COL_SUBTERR+1, ROW_SUBTERR)
	oCell.String = sSubTerr
	oCell.HoriJustify = CJUST
	oCell = oSheet.getCellByPosition(COL_TERRID, ROW_TERRID)
	oCell.String = &quot;CongTerrID&quot;
	oCell.HoriJustify = RJUST
	oCell = oSheet.getCellByPosition(COL_TERRID+1, ROW_TERRID)
	oCell.String = sTerrID
	oCell.HoriJustify = CJUST

	&apos;// set &quot;Property ID&quot;, &quot;Owner&quot;, and &quot;Streets/Addrs&quot; info
	oCell = oSheet.getCellByPosition(COL_PROPID, ROW_PROPID)
	oCell.String = &quot;Property ID&quot;
	oCell.HoriJustify = RJUST
	oCell = oSheet.getCellByPosition(COL_PROPID+1, ROW_PROPID)
	oCell.String = &quot;-&quot;
	oCell.HoriJustify = CJUST
	oCell = oSheet.getCellByPosition(COL_PROPID, ROW_OWNER)
	oCell.String = &quot;Owner&quot;
	oCell.HoriJustify = RJUST
	oCell = oSheet.getCellByPosition(COL_PROPID+1, ROW_OWNER)
	oCell.String = &quot;-&quot;
	oCell.HoriJustify = CJUST
	oCell = oSheet.getCellByPosition(COL_PROPID, ROW_STRADDR)
	oCell.String = &quot;Streets/Addrs&quot;
	oCell.HoriJustify = RJUST
	oCell = oSheet.getCellByPosition(COL_PROPID+1, ROW_STRADDR)
	oCell.String = sStreets
	oCell.HoriJustify = CJUST
	MergePropIDCells()
	MergeOwnerCells()
	MergeStreetsCells()

NormalExit:
	exit sub

SimpleHeader:
	&apos;// something wrong with header info sheet; just use InsertTerrHdr
	&apos;// insert 1 row, then call InsertTerrHdr
	InsertTerrHdr(sTitle)
	GoTo NormalExit:
	
ErrorHandler:
	select case nErrCode
	case ERR_HDRSHEET
		msgbox(&quot;InsertQTerrHdr - error in &apos;&quot; + sHdrShtName + &quot;&apos;&quot;)
	case else
		msgbox(&quot;InsertQTerrHdr - unprocessed error&quot;)
	end select
	
	GoTo NormalExit
	
end sub		&apos;// end InsertQTerrHdr	10/13/20
&apos;/**/


&apos;// InsertQBizHdr.bas
&apos;//---------------------------------------------------------------
&apos;// InsertQBizHdr - Insert 5-row territory sheet header.
&apos;//		9/26/21.	wmk.	19:27
&apos;//---------------------------------------------------------------

public sub InsertQBizHdr(psTerrID As String, psTitle As String)

&apos;//	Usage.	macro call or
&apos;//			call InsertQBizHdr( sTerrID, sTitle )
&apos;//
&apos;//		sTerrID - territory ID	
&apos;//		sTitle - sheet title to set in H1-I1
&apos;//
&apos;// Entry.	user has query.csv download sheet selected
&apos;//			sheet &apos;TerrHdr&apos; contains 2 rows of information from
&apos;//			TerrIDData.db (note sheet renamed by user from &apos;Ter.xxx.Hdr&apos;
&apos;// 	Row 1
&apos;//			  A			B			C			   D	E		F	    G
&apos;//			TerrID, AreaName, Street-Address(s), City, Zip, Location, Type
&apos;//		[Row 2]..[Row n]
&apos;//			  A		   B			C				 D			E
&apos;//			TerrID, SubTerr, Streets-Address(s), Homestead, Parcel-LIKE, 
&apos;//				    F		 G
&apos;//				Unit-LIKE, DBName
&apos;//		if 2nd row is empty, no subterritory information is present
&apos;//
&apos;//	Exit.	Territory sheet header inserted in 1st 4 rows with passed
&apos;//			title in H1-J1, and empty row in row 5 for headings to set
&apos;//
&apos;// Calls. InsertTerrHdr
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;// 9/25/21.	wmk.	original code; adapted from InsertQTerrHdr.
&apos;// 9/26/21.	wmk.	&apos;Property ID&apos; and &apos;Owner&apos; labels blanked; title
&apos;//						moved from column H to column E.
&apos;// Legacy mods.
&apos;//	9/30/20.	wmk.	original code; adapted from InsertTerrHdr
&apos;//	10/5/20.	wmk.	add TerrID to calling sequence; remove skip;
&apos;//						bug fix, was checking ROW_1 for subterritory,
&apos;//						changed to ROW_2
&apos;//	10/13/20.	wmk.	bug fix; script now has .headers ON, so only
&apos;//						insert 4 rows at top, and change to ROW_3 for
&apos;//						subterritory.
&apos;//	Notes.
&apos;// Method. obtain essential information from Terr.xxx.Hdr sheet
&apos;// where .xxx. is the territory ID string passed, if cannot find that
&apos;// sheet, just insert a blank row then call InsertTerrHdr
&apos;// Otherwise, duplicate InsertTerrHdr code, using information from
&apos;// Terr.xxx.Hdr sheet

&apos;//	constants.
const COL_PARCEL=0		&apos;// &quot;OwningParcel&quot; column index
const COL_A=0
const COL_B=1
const COL_C=2	
const COL_D=3
const COL_E=4
const COL_F=5
const COL_G=6			&apos;// column G index
const COL_H=7			&apos;// column H index
const COL_I=8			&apos;// column I index
const COL_J=9			&apos;// column J index
const COL_K=10			&apos;// column K index
const COL_L=11			&apos;// column L index 
const COL_M=12			&apos;// column M index (DoNotCall)
const COL_N=13			&apos;// column N index (RSO)
const COL_O=14			&apos;// column O index (Foreign)
const ROW_1=0
const ROW_2=1
const ROW_3=2
const ROW_4=3
const ROW_HEADING=4		&apos;// headings row index
const LJUST=1		&apos;// left-justify HoriJustify
const CJUST=2		&apos;// center HoriJustify		
const RJUST=3		&apos;// right-justify HoriJustify
const MDYY=30		&apos;// &apos;M/D/YY&apos; format value

const COL_AREA=0		&apos;// &quot;Area-CommonName&quot;	A1-D1
const ROW_AREA=0
const COL_CITY=8		
const COL_ZIP = 10
const COL_ICITY=1		&apos;// &lt;city&gt;			B3
const ROW_ICITY=2
const COL_IZIP=2		&apos;// &lt;zipcode&gt;		C3
const ROW_DATE=1
const COL_DATE=2		&apos;// &lt;date&gt; 			C2
const ROW_BASE=5
const COL_UNITS=0		&apos;// &quot;Units shown:&quot; 	A2
const ROW_UNITS=1
const COL_FUNITS=1		&apos;// &quot;=COUNTA(A6:A298)&quot; B2

&apos;// new header locations 9/2/20
const COL_SUBTERR=0		&apos;// &quot;SubTerritory&quot; 	A4
const ROW_SUBTERR=3
const COL_TERRID=2		&apos;// &quot;CongTerrID&quot;	B4
const ROW_TERRID=3
const COL_PROPID=3		&apos;// &quot;Property ID&quot;	D1
const ROW_PROPID=0
const ROW_OWNER=1		&apos;// &quot;Owner&quot;			D2
const ROW_STRADDR=2		&apos;// &quot;Streets/Addrs&quot;	D3
&apos;// end new header locations 9/2/20

&apos;// error codes
const ERR_UNK=0			&apos;// unknown
const ERR_HDRSHEET=1	&apos;// header sheet &apos;Terr.xxx.Hdr&apos; error

&apos;// local variables.
Dim oDoc As Object
Dim oSheet As Object
Dim NewColumn As Object
dim oSel as Object
dim iSheetIx as integer
dim oRange as Object
dim lThisRow as long		&apos;// current row selected on sheet
dim oMrgRange	As Object	&apos;// merge range

dim oHdrSheet	As Object	&apos;// sheet containing header information
dim oCell	As Object		&apos;// cell working on
dim sTitle	As String		&apos;// sheet title
dim sTerrID	As String		&apos;// territory ID
dim nErrCode	As Integer	&apos;// error code type 0 - unknown, 1 - sheet not found
dim sHdrShtName	As String	&apos;// header sheet name
dim iStatus	As Integer		&apos;// function return status
dim sAreaName	As String	&apos;// area-commonName
dim sCity 		As String	&apos;// city
dim	sZip		As String	&apos;// zip code
dim sSubTerr	As String	&apos;// subterritory
dim sPropID		As String	&apos;// property ID
dim sOwner		As String	&apos;// owner
dim sStreets	As String	&apos;// streets-address(s)

	&apos;// code.
	ON ERROR GOTO ErrorHandler
	nErrCode = ERR_UNK
	iStatus = 0
	oDoc = ThisComponent
	oSel = oDoc.getCurrentSelection()
	oRange = oSel.RangeAddress
	iSheetIx = oRange.Sheet
	oSheet = oDoc.Sheets(iSheetIx)

	&apos;// check passed TerrID and look for sheet by that name
	sTerrID = psTerrID
	nErrCode = ERR_HDRSHEET
	if len(sTerrID) = 0 then
		GoTo SimpleHeader
	endif

	sHdrShtName = &quot;Terr&quot; + sTerrID + &quot;Hdr&quot;
	sTitle = psTitle
	
	&apos;// see if sheet exists
	if NOT oDoc.Sheets.hasByName(sHdrShtName) then
		GoTo SimpleHeader
	endif
	
	nErrCode = ERR_UNK
	
	&apos;// get essential info from sHdrShtName, then process
	oHdrSheet = oDoc.Sheets.getByName(sHdrShtName)
&apos;dim sAreaName	As String	&apos;// area-commonName
&apos;dim sCity 		As String	&apos;// city
&apos;dim sZip		As String	&apos;// zip code
&apos;dim sSubTerr	As String	&apos;// subterritory
&apos;dim sPropID	As String	&apos;// property ID
&apos;dim sOwner		As String	&apos;// owner
&apos;dim sStreets	As String	&apos;// streets-address(s)
	&apos;// see if row 3 has subterritory information
	oCell = oHdrSheet.getCellByPosition(COL_A, ROW_3)
	if len(oCell.String) &gt; 0 then
		&apos;// get row 3 information, B subterr, C streets-address(s)
		oCell = oHdrSheet.getCellByPosition(COL_B, ROW_3)
		sSubTerr = oCell.String
		oCell = oHdrSheet.getCellByPosition(COL_C, ROW_3)
		sStreets = oCell.String
	else
		sSubTerr = &quot;&quot;
		&apos;// get streets information from row 2
		oCell = oHdrSheet.getCellByPosition(COL_C, ROW_2)
		sStreets = oCell.String
	endif	&apos;// end has subterritory information conditional

	&apos;// set remaining information from row 2 (territory)
	oCell = oHdrSheet.getCellByPosition(COL_A, ROW_2)
	sTerrID = oCell.String
	oCell = oHdrSheet.getCellByPosition(COL_B, ROW_2)
	sAreaName = oCell.String
	oCell = oHdrSheet.getCellByPosition(COL_D, ROW_2)
	sCity = oCell.String
	oCell = oHdrSheet.getCellByPosition(COL_E, ROW_2)
	sZip = oCell.String
	
	&apos;// insert 4 rows at top of sheet
	oSheet.Rows.insertByIndex(0, 4)	&apos;// insert header rows with heading

	&apos;// set sheet title
	oCell = oSheet.getCellByPosition(COL_E, ROW_1)
	oCell.String = psTitle
	MergeSheetType()
	
	&apos;// set &lt;Area-CommonName&gt;
	oCell = oSheet.getCellByPosition(COL_AREA, ROW_AREA)
	oCell.String = sAreaName
	MergeAreaCells()

	&apos;// Date to header
	oCell = oSheet.getCellByPosition(COL_DATE, ROW_DATE)
	oCell.setValue(Now())					&apos;// time stamp
	oCell.Text.NumberFormat = MDYY
	oCell.HoriJustify = CJUST
	
	&apos;// set &quot;Units Shown:&quot; info
	oCell = oSheet.getCellByPosition(COL_UNITS, ROW_UNITS)
	oCell.String = &quot;Units Shown:&quot;
	oCell.HoriJustify = RJUST
	SetHdrSumFormula(&quot;COUNTA($A$6:$A$1299)&quot;)
	
	&apos;// set &quot;City&quot; and set City, Zip
	oCell = oSheet.getCellByPosition(COL_A, ROW_3)
	oCell.String = &quot;City&quot;
	oCell.HoriJustify = RJUST
	oCell = oSheet.getCellByPosition(COL_ICITY, ROW_ICITY)
	oCell.String = sCity
	oCell.HoriJustify = CJUST
	oCell = oSheet.getCellByPosition(COL_IZIP, ROW_ICITY)
	oCell.String = sZip
	oCell.HoriJustify = CJUST
	
	&apos;// set &quot;SubTerr&quot; and &quot;CongTerrID&quot;
	oCell = oSheet.getCellByPosition(COL_SUBTERR, ROW_SUBTERR)
	oCell.String = &quot;SubTerritory&quot;
	oCell.HoriJustify = RJUST
	oCell = oSheet.getCellByPosition(COL_SUBTERR+1, ROW_SUBTERR)
	oCell.String = sSubTerr
	oCell.HoriJustify = CJUST
	oCell = oSheet.getCellByPosition(COL_TERRID, ROW_TERRID)
	oCell.String = &quot;CongTerrID&quot;
	oCell.HoriJustify = RJUST
	oCell = oSheet.getCellByPosition(COL_TERRID+1, ROW_TERRID)
	oCell.String = sTerrID
	oCell.HoriJustify = CJUST

	&apos;// set &quot;Property ID&quot;, &quot;Owner&quot;, and &quot;Streets/Addrs&quot; info
	oCell = oSheet.getCellByPosition(COL_PROPID, ROW_PROPID)
	oCell.String = &quot;&quot;
	oCell.HoriJustify = RJUST
	oCell = oSheet.getCellByPosition(COL_PROPID+1, ROW_PROPID)
	oCell.String = sTitle
	oCell.HoriJustify = CJUST
	oCell = oSheet.getCellByPosition(COL_PROPID, ROW_OWNER)
	oCell.String = &quot;&quot;
	oCell.HoriJustify = RJUST
	oCell = oSheet.getCellByPosition(COL_PROPID+1, ROW_OWNER)
	oCell.String = &quot;-&quot;
	oCell.HoriJustify = CJUST
	oCell = oSheet.getCellByPosition(COL_PROPID, ROW_STRADDR)
	oCell.String = &quot;Streets/Addrs&quot;
	oCell.HoriJustify = RJUST
	oCell = oSheet.getCellByPosition(COL_PROPID+1, ROW_STRADDR)
	oCell.String = sStreets
	oCell.HoriJustify = CJUST
	MergePropIDCells()
	MergeOwnerCells()
	MergeStreetsCells()

NormalExit:
	exit sub

SimpleHeader:
	&apos;// something wrong with header info sheet; just use InsertTerrHdr
	&apos;// insert 1 row, then call InsertTerrHdr
	InsertTerrHdr(sTitle)
	GoTo NormalExit:
	
ErrorHandler:
	select case nErrCode
	case ERR_HDRSHEET
		msgbox(&quot;InsertQBizHdr - error in &apos;&quot; + sHdrShtName + &quot;&apos;&quot;)
	case else
		msgbox(&quot;InsertQBizHdr - unprocessed error&quot;)
	end select
	
	GoTo NormalExit
	
end sub		&apos;// end InsertQBizHdr	9/26/21.	19:27
&apos;/**/

&apos;// InsertRUNewHdr.bas
&apos;//---------------------------------------------------------------
&apos;// InsertRUNewHdr - Insert 5-row territory sheet header.
&apos;//		10/18/20.	wmk.	19:00
&apos;//---------------------------------------------------------------

public sub InsertRUNewHdr(psTitle As String)

&apos;//	Usage.	macro call or
&apos;//			call InsertRUNewHdr(sTitle )
&apos;//	
&apos;//		sTitle - sheet title to set in H1-I1
&apos;//
&apos;// Entry.	user has RefUSA/Terrxxx.csv download sheet selected
&apos;//			row index 0 is column headings
&apos;//			sheet &apos;TerrxxxHdr&apos; contains 1 row of information from
&apos;//			TerrIDData.db. [if not present, call InsertTerrHdr]
&apos;// 	Row 1
&apos;//			  A			B			C			   D	E		F	    G
&apos;//			TerrID, AreaName, Street-Address(s), City, Zip, Location, Type
&apos;//		[Row 2]..[Row n]
&apos;//			  A		   B			C				 D			E
&apos;//			TerrID, SubTerr, Streets-Address(s), Homestead, Parcel-LIKE, 
&apos;//				    F		 G
&apos;//				Unit-LIKE, DBName
&apos;//		if 2nd row is empty, no subterritory information is present
&apos;//
&apos;//	Exit.	Territory sheet header inserted in 1st 4 rows with passed
&apos;//			title in H1-J1, and empty row in row 5 for headings to set
&apos;//
&apos;// Calls. InsertTerrHdr
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	9/30/20.	wmk.	original code; adapted from InsertTerrHdr
&apos;//	10/5/20.	wmk.	add TerrID to calling sequence; remove skip;
&apos;//						bug fix, was checking ROW_1 for subterritory,
&apos;//						changed to ROW_2
&apos;// 10/12/20.	wmk.	bug fix; RefUSA download data has a heading row,
&apos;//						so DO NOT insert 1 row prior to calling
&apos;//						InsertTerrHdr; document check for &quot;TerrNewHdr&quot;
&apos;//						sheet if user has presets...
&apos;// 10/16/20.	wmk.	change to check for TerrxxxHdr sheet where xxx
&apos;//						is TerrID (extracted from Title)
&apos;//	Notes.
&apos;// Method. obtain essential information from TerrNewHdr sheet;
&apos;// if cannot find that sheet, just insert a blank row then call
&apos;// InsertTerrHdr. If sheet found, get territory id from hdr sheet
&apos;// and call InsertQTerrHdr.

&apos;//	constants.
const COL_PARCEL=0		&apos;// &quot;OwningParcel&quot; column index
const COL_A=0
const COL_B=1
const COL_C=2	
const COL_D=3
const COL_E=4
const COL_F=5
const COL_G=6			&apos;// column G index
const COL_H=7			&apos;// column H index
const COL_I=8			&apos;// column I index
const COL_J=9			&apos;// column J index
const COL_K=10			&apos;// column K index
const COL_L=11			&apos;// column L index 
const COL_M=12			&apos;// column M index (DoNotCall)
const COL_N=13			&apos;// column N index (RSO)
const COL_O=14			&apos;// column O index (Foreign)
const ROW_1=0
const ROW_2=1
const ROW_3=2
const ROW_4=3
const ROW_HEADING=4		&apos;// headings row index
const LJUST=1		&apos;// left-justify HoriJustify
const CJUST=2		&apos;// center HoriJustify		
const RJUST=3		&apos;// right-justify HoriJustify
const MDYY=30		&apos;// &apos;M/D/YY&apos; format value

const COL_AREA=0		&apos;// &quot;Area-CommonName&quot;	A1-D1
const ROW_AREA=0
const COL_CITY=8		
const COL_ZIP = 10
const COL_ICITY=1		&apos;// &lt;city&gt;			B3
const ROW_ICITY=2
const COL_IZIP=2		&apos;// &lt;zipcode&gt;		C3
const ROW_DATE=1
const COL_DATE=2		&apos;// &lt;date&gt; 			C2
const ROW_BASE=5
const COL_UNITS=0		&apos;// &quot;Units shown:&quot; 	A2
const ROW_UNITS=1
const COL_FUNITS=1		&apos;// &quot;=COUNTA(A6:A298)&quot; B2

&apos;// new header locations 9/2/20
const COL_SUBTERR=0		&apos;// &quot;SubTerritory&quot; 	A4
const ROW_SUBTERR=3
const COL_TERRID=2		&apos;// &quot;CongTerrID&quot;	B4
const ROW_TERRID=3
const COL_PROPID=3		&apos;// &quot;Property ID&quot;	D1
const ROW_PROPID=0
const ROW_OWNER=1		&apos;// &quot;Owner&quot;			D2
const ROW_STRADDR=2		&apos;// &quot;Streets/Addrs&quot;	D3
&apos;// end new header locations 9/2/20

&apos;// error codes
const ERR_UNK=0			&apos;// unknown
const ERR_HDRSHEET=1	&apos;// header sheet &apos;Terr.xxx.Hdr&apos; error

&apos;// local variables.
Dim oDoc As Object
Dim oSheet As Object
Dim NewColumn As Object
dim oSel as Object
dim iSheetIx as integer
dim oRange as Object
dim lThisRow as long		&apos;// current row selected on sheet
dim oMrgRange	As Object	&apos;// merge range

dim oHdrSheet	As Object	&apos;// sheet containing header information
dim oCell	As Object		&apos;// cell working on
dim sTitle	As String		&apos;// sheet title
dim sTerrID	As String		&apos;// territory ID
dim nErrCode	As Integer	&apos;// error code type 0 - unknown, 1 - sheet not found
dim sHdrShtName	As String	&apos;// header sheet name
dim iStatus	As Integer		&apos;// function return status
dim sAreaName	As String	&apos;// area-commonName
dim sCity 		As String	&apos;// city
dim	sZip		As String	&apos;// zip code
dim sSubTerr	As String	&apos;// subterritory
dim sPropID		As String	&apos;// property ID
dim sOwner		As String	&apos;// owner
dim sStreets	As String	&apos;// streets-address(s)

	&apos;// code.
	ON ERROR GOTO ErrorHandler
	nErrCode = ERR_UNK
	iStatus = 0
	oDoc = ThisComponent
	oSel = oDoc.getCurrentSelection()
	oRange = oSel.RangeAddress
	iSheetIx = oRange.Sheet
	oSheet = oDoc.Sheets(iSheetIx)

&apos;	sHdrShtName = &quot;TerrNewHdr&quot;
	sTerrID = Mid(oDoc.Title,5,3)
	sHdrShtName = &quot;Terr&quot; + sTerrID + &quot;Hdr&quot;
	sTitle = psTitle
	
	&apos;// see if sheet exists
	if NOT oDoc.Sheets.hasByName(sHdrShtName) then
		GoTo SimpleHeader
	endif
	
	nErrCode = ERR_UNK
	
	&apos;// get essential info from sHdrShtName, then process
	oHdrSheet = oDoc.Sheets.getByName(sHdrShtName)

	&apos;// get territory id from first row
	oCell = oHdrSheet.getCellByPosition(COL_A, ROW_2)
	sTerrID = oCell.String

	&apos;// no subterritory on new territory, set streets
	sSubTerr = &quot;&quot;
	&apos;// get streets information from row 1
	oCell = oHdrSheet.getCellByPosition(COL_C, ROW_2)
	sStreets = oCell.String

	&apos;// set remaining information from row 1 (territory)
	oCell = oHdrSheet.getCellByPosition(COL_A, ROW_2)
	sTerrID = oCell.String
	oCell = oHdrSheet.getCellByPosition(COL_B, ROW_2)
	sAreaName = oCell.String
	oCell = oHdrSheet.getCellByPosition(COL_D, ROW_2)
	sCity = oCell.String
	oCell = oHdrSheet.getCellByPosition(COL_E, ROW_2)
	sZip = oCell.String
	
	&apos;// insert 4 rows at top of sheet
	oSheet.Rows.insertByIndex(0, 4)	&apos;// insert header rows

	&apos;// set sheet title
	oCell = oSheet.getCellByPosition(COL_H, ROW_1)
	oCell.String = psTitle
	MergeSheetType()
	
	&apos;// set &lt;Area-CommonName&gt;
	oCell = oSheet.getCellByPosition(COL_AREA, ROW_AREA)
	oCell.String = sAreaName
	MergeAreaCells()

	&apos;// Date to header
	oCell = oSheet.getCellByPosition(COL_DATE, ROW_DATE)
	oCell.setValue(Now())					&apos;// time stamp
	oCell.Text.NumberFormat = MDYY
	oCell.HoriJustify = CJUST
	
	&apos;// set &quot;Units Shown:&quot; info
	oCell = oSheet.getCellByPosition(COL_UNITS, ROW_UNITS)
	oCell.String = &quot;Units Shown:&quot;
	oCell.HoriJustify = RJUST
	SetHdrSumFormula(&quot;COUNTA($A$6:$A$1299)&quot;)
	
	&apos;// set &quot;City&quot; and set City, Zip
	oCell = oSheet.getCellByPosition(COL_A, ROW_3)
	oCell.String = &quot;City&quot;
	oCell.HoriJustify = RJUST
	oCell = oSheet.getCellByPosition(COL_ICITY, ROW_ICITY)
	oCell.String = sCity
	oCell.HoriJustify = CJUST
	oCell = oSheet.getCellByPosition(COL_IZIP, ROW_ICITY)
	oCell.String = sZip
	oCell.HoriJustify = CJUST
	
	&apos;// set &quot;SubTerr&quot; and &quot;CongTerrID&quot;
	oCell = oSheet.getCellByPosition(COL_SUBTERR, ROW_SUBTERR)
	oCell.String = &quot;SubTerritory&quot;
	oCell.HoriJustify = RJUST
	oCell = oSheet.getCellByPosition(COL_SUBTERR+1, ROW_SUBTERR)
	oCell.String = sSubTerr
	oCell.HoriJustify = CJUST
	oCell = oSheet.getCellByPosition(COL_TERRID, ROW_TERRID)
	oCell.String = &quot;CongTerrID&quot;
	oCell.HoriJustify = RJUST
	oCell = oSheet.getCellByPosition(COL_TERRID+1, ROW_TERRID)
	oCell.String = sTerrID
	oCell.HoriJustify = CJUST

	&apos;// set &quot;Property ID&quot;, &quot;Owner&quot;, and &quot;Streets/Addrs&quot; info
	oCell = oSheet.getCellByPosition(COL_PROPID, ROW_PROPID)
	oCell.String = &quot;Property ID&quot;
	oCell.HoriJustify = RJUST
	oCell = oSheet.getCellByPosition(COL_PROPID+1, ROW_PROPID)
	oCell.String = &quot;-&quot;
	oCell.HoriJustify = CJUST
	oCell = oSheet.getCellByPosition(COL_PROPID, ROW_OWNER)
	oCell.String = &quot;Owner&quot;
	oCell.HoriJustify = RJUST
	oCell = oSheet.getCellByPosition(COL_PROPID+1, ROW_OWNER)
	oCell.String = &quot;-&quot;
	oCell.HoriJustify = CJUST
	oCell = oSheet.getCellByPosition(COL_PROPID, ROW_STRADDR)
	oCell.String = &quot;Streets/Addrs&quot;
	oCell.HoriJustify = RJUST
	oCell = oSheet.getCellByPosition(COL_PROPID+1, ROW_STRADDR)
	oCell.String = sStreets
	oCell.HoriJustify = CJUST
	MergePropIDCells()
	MergeOwnerCells()
	MergeStreetsCells()
	
NormalExit:
	exit sub

SimpleHeader:
	&apos;// something wrong with header info sheet; just use InsertTerrHdr
	&apos;// insert 1 row, then call InsertTerrHdr
&apos;	oSheet.Rows.insertByIndex(0, 1)	&apos;// insert 1 row
	InsertTerrHdr(sTitle)
	GoTo NormalExit:
	
ErrorHandler:
	select case nErrCode
	case ERR_HDRSHEET
		msgbox(&quot;InsertRUNewHdr - error in &apos;&quot; + sHdrShtName + &quot;&apos;&quot;)
	case else
		msgbox(&quot;InsertRUNewHdr - unprocessed error&quot;)
	end select
	
	GoTo NormalExit
	
end sub		&apos;// end InsertRUNewHdr	10/18/20
&apos;/**/

&apos;// InsertTerrHdr.bas
&apos;//---------------------------------------------------------------
&apos;// InsertTerrHdr - Insert 4-row territory sheet header.
&apos;//		9/24/20.	wmk.	23:15
&apos;//---------------------------------------------------------------

public sub InsertTerrHdr(psTitle As String)

&apos;//	Usage.	macro call or
&apos;//			call InsertTerrHdr( sTitle )
&apos;//
&apos;//			sTitle - sheet title to set in H1-I1
&apos;//
&apos;// Entry.	user has .csv download sheet selected with column names
&apos;//			in 1st row
&apos;//
&apos;//	Exit.	Territory sheet header inserted in 1st 4 rows with passed
&apos;//			title in H1-J1
&apos;//
&apos;// Calls.
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	9/21/20.	wmk.	original code
&apos;//	9/24/20.	wmk.	documentation updated; sheet title in H1-I1; add
&apos;//						date setting code
&apos;//
&apos;//	Notes.

&apos;//	constants.
const COL_PARCEL=0		&apos;// &quot;OwningParcel&quot; column index
const COL_A=0
const COL_B=1
const COL_C=2	
const COL_D=3
const COL_E=4
const COL_F=5
const COL_G=6			&apos;// column G index
const COL_H=7			&apos;// column H index
const COL_I=8			&apos;// column I index
const COL_J=9			&apos;// column J index
const COL_K=10			&apos;// column K index
const COL_L=11			&apos;// column L index 
const COL_M=12			&apos;// column M index (DoNotCall)
const COL_N=13			&apos;// column N index (RSO)
const COL_O=14			&apos;// column O index (Foreign)
const ROW_1=0
const ROW_2=1
const ROW_3=2
const ROW_4=3
const ROW_HEADING=4		&apos;// headings row index
const LJUST=1		&apos;// left-justify HoriJustify
const CJUST=2		&apos;// center HoriJustify		
const RJUST=3		&apos;// right-justify HoriJustify
const MDYY=30		&apos;// &apos;M/D/YY&apos; format value

const COL_AREA=0		&apos;// &quot;Area-CommonName&quot;	A1-D1
const ROW_AREA=0
const COL_CITY=8		
const COL_ZIP = 10
const COL_ICITY=1		&apos;// &lt;city&gt;			B3
const ROW_ICITY=2
const COL_IZIP=2		&apos;// &lt;zipcode&gt;		C3
const ROW_DATE=1
const COL_DATE=2		&apos;// &lt;date&gt; 			C2
const ROW_BASE=5
const COL_UNITS=0		&apos;// &quot;Units shown:&quot; 	A2
const ROW_UNITS=1
const COL_FUNITS=1		&apos;// &quot;=COUNTA(A6:A298)&quot; B2

&apos;// new header locations 9/2/20
const COL_SUBTERR=0		&apos;// &quot;SubTerritory&quot; 	A4
const ROW_SUBTERR=3
const COL_TERRID=2		&apos;// &quot;CongTerrID&quot;	B4
const ROW_TERRID=3
const COL_PROPID=3		&apos;// &quot;Property ID&quot;	D1
const ROW_PROPID=0
const ROW_OWNER=1		&apos;// &quot;Owner&quot;			D2
const ROW_STRADDR=2		&apos;// &quot;Streets/Addrs&quot;	D3
&apos;// end new header locations 9/2/20

&apos;// local variables.
Dim oDoc As Object
Dim oSheet As Object
Dim NewColumn As Object
dim oSel as Object
dim iSheetIx as integer
dim oRange as Object
dim lThisRow as long		&apos;// current row selected on sheet
dim oMrgRange	As Object	&apos;// merge range

dim oCell	As Object		&apos;// cell working on
dim sTitle	As String		&apos;// sheet title

	&apos;// code.
	ON ERROR GOTO ErrorHandler
	oDoc = ThisComponent
	oSel = oDoc.getCurrentSelection()
	oRange = oSel.RangeAddress
	iSheetIx = oRange.Sheet
	oSheet = oDoc.Sheets(iSheetIx)

	&apos;// insert 4 rows at top of sheet
	oSheet.Rows.insertByIndex(0, 4)	&apos;// insert new category 1 row

	&apos;// set sheet title
	oCell = oSheet.getCellByPosition(COL_H, ROW_1)
	oCell.String = psTitle
	MergeSheetType()
	
	&apos;// set &lt;Area-CommonName&gt;
	oCell = oSheet.getCellByPosition(COL_AREA, ROW_AREA)
	oCell.String = &quot;&lt;Area - CommonName&gt;&quot;
	MergeAreaCells()

	&apos;// Date to header
	oCell = oSheet.getCellByPosition(COL_DATE, ROW_DATE)
	oCell.setValue(Now())					&apos;// time stamp
	oCell.Text.NumberFormat = MDYY
	oCell.HoriJustify = CJUST
	
	&apos;// set &quot;Units Shown:&quot; info
	oCell = oSheet.getCellByPosition(COL_UNITS, ROW_UNITS)
	oCell.String = &quot;Units Shown:&quot;
	oCell.HoriJustify = RJUST
	SetHdrSumFormula(&quot;COUNTA($A$6:$A$1299)&quot;)
	
	&apos;// set &quot;City&quot; and prompt for city, zip
	oCell = oSheet.getCellByPosition(COL_A, ROW_3)
	oCell.String = &quot;City&quot;
	oCell.HoriJustify = RJUST
	oCell = oSheet.getCellByPosition(COL_ICITY, ROW_ICITY)
	oCell.String = &quot;&lt;city&gt;&quot;
	oCell.HoriJustify = CJUST
	oCell = oSheet.getCellByPosition(COL_IZIP, ROW_ICITY)
	oCell.String = &quot;&lt;zip code&gt;&quot;
	oCell.HoriJustify = CJUST
	
	&apos;// set &quot;SubTerr&quot; and &quot;CongTerrID&quot;
	oCell = oSheet.getCellByPosition(COL_SUBTERR, ROW_SUBTERR)
	oCell.String = &quot;SubTerritory&quot;
	oCell.HoriJustify = RJUST
	oCell = oSheet.getCellByPosition(COL_TERRID, ROW_TERRID)
	oCell.String = &quot;CongTerrID&quot;
	oCell.HoriJustify = RJUST

	&apos;// set &quot;Property ID&quot;, &quot;Owner&quot;, and &quot;Streets/Addrs&quot; info
	oCell = oSheet.getCellByPosition(COL_PROPID, ROW_PROPID)
	oCell.String = &quot;Property ID&quot;
	oCell.HoriJustify = RJUST
	oCell = oSheet.getCellByPosition(COL_PROPID+1, ROW_PROPID)
	oCell.String = &quot;-&quot;
	oCell.HoriJustify = CJUST
	oCell = oSheet.getCellByPosition(COL_PROPID, ROW_OWNER)
	oCell.String = &quot;Owner&quot;
	oCell.HoriJustify = RJUST
	oCell = oSheet.getCellByPosition(COL_PROPID+1, ROW_OWNER)
	oCell.String = &quot;-&quot;
	oCell.HoriJustify = CJUST
	oCell = oSheet.getCellByPosition(COL_PROPID, ROW_STRADDR)
	oCell.String = &quot;Streets/Addrs&quot;
	oCell.HoriJustify = RJUST
	oCell = oSheet.getCellByPosition(COL_PROPID+1, ROW_STRADDR)
	oCell.String = &quot;&lt;streets/addresses&gt;&quot;
	oCell.HoriJustify = CJUST
	MergePropIDCells()
	MergeOwnerCells()
	MergeStreetsCells()

NormalExit:
	exit sub
	
ErrorHandler:
	msgbox(&quot;InsertTerrHdr - unprocessed error&quot;)
	GoTo NormalExit
	
end sub		&apos;// end InsertTerrHdr	9/24/20
&apos;/**/

&apos;// KillAutoRecalc.bas
&apos;//---------------------------------------------------------------
&apos;// KillAutoRecalc - Turn off autorecalc.
&apos;//		8/28/20.	wmk.
&apos;//---------------------------------------------------------------

public sub KillAutoRecalc ()

&apos;//	Usage.	macro call or
&apos;//			call KillAutoRecalc( &lt;parameters&gt; )
&apos;//
&apos;//		&lt;parameters description&gt;
&apos;//
&apos;// Entry.	user has open spreadhseet
&apos;//
&apos;//	Exit.	AutoCalc turned off
&apos;//
&apos;// Calls.
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	8/28/20.		wmk.	original code
&apos;//
&apos;//	Notes. Autocalc is turned off to avoid hanging LibreCalc when
&apos;//	moving through large amounts of records that have many calculated
&apos;// fields (e.g. territory with 4 hyperlinks per record and thousands
&apos;// of records.
&apos;//

&apos;//	constants.

&apos;//	local variables.
dim document   as object
dim dispatcher as object

	&apos;// code.
	document   = ThisComponent.CurrentController.Frame
	dispatcher = createUnoService(&quot;com.sun.star.frame.DispatchHelper&quot;)

	&apos;// set arguments for AutomaticCalculation property control
	dim args1(0) as new com.sun.star.beans.PropertyValue
	args1(0).Name = &quot;AutomaticCalculation&quot;
	args1(0).Value = false

	dispatcher.executeDispatch(document, &quot;.uno:AutomaticCalculation&quot;, _
								&quot;&quot;, 0, args1())


end sub		&apos;// end KillAutoRecalc		8/28/20
&apos;/**/

&apos;// LoadTerrHdr.bas
&apos;//------------------------------------------------------------------------
&apos;// LoadTerrHdr - Load territory header sheet preparing for terr generation.
&apos;//		2/11/21.	wmk.	23:55
&apos;//------------------------------------------------------------------------

public sub LoadTerrHdr()

&apos;//	Usage.	macro call or
&apos;//			call LoadTerrHdr()
&apos;//
&apos;//		&lt;parameters description&gt;
&apos;//
&apos;// Entry.	ThisComponent.URL = &quot;file://&lt;filepath to this Doc&gt;
&apos;//			filename assumed to be &quot;QTerrxxx.ods&quot;
&apos;//
&apos;//	Exit.	Sheet TerrxxxHdr loaded and moved to last sheet
&apos;//
&apos;// Calls.	DkLimeTab, ProtectSheet, SaveQcsvODS
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	2/11/21.		wmk.	original code
&apos;//
&apos;//	Notes. Sheet QTerrxxx contains the data from the query that gets
&apos;// the territory records from PolyTerri and MultiMail (QGetTerr). The
&apos;// initial file will be a .csv file. This module will check to see if
&apos;// the file name is .csv; if not it will do a &quot;SaveAs&quot; to save it as
&apos;// a .odf file before proceeding.
&apos;// This module will look in the folder for the current file for file
&apos;// TerrxxxHdr.ods; if not found, it will look for file TerrxxxHdr.csv
&apos;// and load that file, then Copy the TerrxxxHdr sheet to the end of
&apos;// the file the user is working on. The file path should be
&apos;// ../Terrxxx/TerrData/Working-Files.
&apos;//

&apos;//	constants.

&apos;//	local variables.
dim document   as object
dim dispatcher as object
dim sDocURL		As String	&apos;// document URL
dim nURLlen		As Integer	&apos;// URL length
dim sURLBase	As String	&apos;// base of new URL
dim sNewURL		As String	&apos;// new full URL for file save
dim sFileBase	As String	&apos;// current filename sans leading Q
dim sHdrFile	As String	&apos;// extrapolated header filename TerrxxxHdr.

	&apos;// code.
	ON ERROR GOTO ErrorHandler
	sDocURL = ThisComponent.getURL()
	&apos;// expected URL = ../TerrData/Working-Files/QTerrxxx.csv
	nURLlen = len(sDocURL)
	sURLBase = left(sDocURL, nURLLen-12)	&apos;// up to last &apos;/&apos;
	sFileBase = right(sDocURL,11)	&apos;// Terrxxx.csv
	sHdrFile = left(sFileBase,7) + &quot;Hdr&quot; + right(sFileBase,4)
	
	&apos;// set tab color to green and protect sheet.
	DkLimeTab()
	ProtectSheet()		&apos;// protect sheet
dim oDoc as Object
oDoc = ThisComponent	   
    SaveQcsvODS(oDoc)		&apos;// unconditional save
    
	&apos;// if file not .ods, then SaveAS .ods.
	if strcomp(right(sFileBase,3),&quot;ods&quot;) &lt;&gt; 0 then
	   &apos;// save file as .ods
	   SaveQcsvODS(oDoc)
	endif
	
	
	&apos;// load header sheet at end.
	

	sNewURL = sURLBase + &quot;_Bridge.ods&quot;
	
NormalExit:
	exit sub
	
ErrorHandler:
	msgbox(&quot;LoadTerrHdr - unprocessed error&quot;)
	GoTo NormalExit
	
end sub		&apos;// end LoadTerrHdr		1/11/21. 23:55
&apos;/**/

&apos;// MergHelpArea.bas
&apos;//----------------------------------------------------------------------
&apos;// MergeHelpArea - Merge D2 - H3 cells in Territory.
&apos;//		2/19/21.	wmk.	19:00
&apos;//----------------------------------------------------------------------

public sub MergeHelpArea()

&apos;//	Usage.	macro call or
&apos;//			call MergeHelpArea()
&apos;//
&apos;// Entry.	user has territory sheet selected
&apos;//
&apos;//	Exit.	Sheet row cells cleared and merged (D2:H3)
&apos;//
&apos;// Calls.
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	2/14/21.	wmk.	original code.
&apos;// 2/19/21.	wmk.	changed area to D2:H3
&apos;//
&apos;//	Notes.

&apos;//	constants.

&apos;//	local variables.
dim oDocument   as object
dim oDispatcher as object

	&apos;// code.
	ON ERROR GOTO ErrorHandler
	oDocument   = ThisComponent.CurrentController.Frame
	oDispatcher = createUnoService(&quot;com.sun.star.frame.DispatchHelper&quot;)

	&apos;// select range A4:I4
	dim args1(0) as new com.sun.star.beans.PropertyValue
	args1(0).Name = &quot;ToPoint&quot;
	args1(0).Value = &quot;$D$2:$H$3&quot;

	oDispatcher.executeDispatch(oDocument, &quot;.uno:GoToCell&quot;, &quot;&quot;, 0, args1())
	
	dim Array(0) as new com.sun.star.beans.PropertyValue
	oDispatcher.executeDispatch(oDocument, &quot;.uno:ToggleMergeCells&quot;, &quot;&quot;, 0, Array())

NormalExit:
	exit sub
	
ErrorHandler:
	msgbox(&quot;MergeHelpArea - unprocessed error.&quot;)
	
end sub		&apos;// end MergeHelpArea		2/19/21.	19:15
&apos;/**/

&apos;// MergeNCenter.bas
&apos;//---------------------------------------------------------------
&apos;// MergeNCenter - &lt;sub description&gt;.
&apos;//		9/3/20.	wmk.
&apos;//---------------------------------------------------------------

public sub MergeNCenter

&apos;//	Usage.	macro call or
&apos;//			call Merge/NCenter()
&apos;//
&apos;// Entry.	user has selected area to toggle Merge/Center
&apos;//
&apos;//	Exit.	selected cells merged or unmerged
&apos;//
&apos;// Calls.
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	9/3/20.		wmk.	original code
&apos;//
&apos;//	Notes.
&apos;//

&apos;//	constants.

&apos;//	local variables.
rem ----------------------------------------------------------------------
rem define variables
dim oDocument   as object
dim oDispatcher as object
rem ----------------------------------------------------------------------

	&apos;// code.
	ON ERROR GOTO ErrorHandler
	rem get access to the document
	oDocument   = ThisComponent.CurrentController.Frame
	oDispatcher = createUnoService(&quot;com.sun.star.frame.DispatchHelper&quot;)

	rem ----------------------------------------------------------------------
	oDispatcher.executeDispatch(oDocument, &quot;.uno:ToggleMergeCells&quot;, &quot;&quot;, 0, Array())

NormalExit:
	exit sub
	
ErrorHandler:
	msgBox(&quot;MergeNCenter - unprocessed error.&quot;)
	GoTo NormalExit

end sub		&apos;// end MergeNCenter	9/3/20
&apos;/**/

&apos;// MergeAreaCells.bas
&apos;//---------------------------------------------------------------
&apos;// MergeAreaCells - Merge Area cells in Territory sheet header.
&apos;//		9/18/20.	wmk.	22:30
&apos;//---------------------------------------------------------------

public sub MergeAreaCells()

&apos;//	Usage.	macro call or
&apos;//			call MergeAreaCells()
&apos;//
&apos;// Entry.	user has territory sheet selectd
&apos;//
&apos;//	Exit.	Area name cells merged (A1:C1)
&apos;//
&apos;// Calls.
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	9/11/20.		wmk.	original code; generated by Record Macro
&apos;//
&apos;//	Notes.

&apos;//	constants.

&apos;//	local variables.
dim oDocument   as object
dim oDispatcher as object

	&apos;// code.
	ON ERROR GOTO ErrorHandler
	oDocument   = ThisComponent.CurrentController.Frame
	oDispatcher = createUnoService(&quot;com.sun.star.frame.DispatchHelper&quot;)

	&apos;// select range A1:C1
	dim args1(0) as new com.sun.star.beans.PropertyValue
	args1(0).Name = &quot;ToPoint&quot;
	args1(0).Value = &quot;$A$1:$C$1&quot;

	oDispatcher.executeDispatch(oDocument, &quot;.uno:GoToCell&quot;, &quot;&quot;, 0, args1())

	oDispatcher.executeDispatch(oDocument, &quot;.uno:ToggleMergeCells&quot;, &quot;&quot;, 0, Array())


NormalExit:
	exit sub
	
ErrorHandler:
	msgbox(&quot;MergeAreaCells - unprocessed error.&quot;)
	
end sub		&apos;// end MergeAreaCells
&apos;/**/

&apos;// MergeOwnerCells.bas
&apos;//---------------------------------------------------------------
&apos;// MergeOwnerCells - Merge Owner cells in Territory sheet header.
&apos;//		9/11/20.	wmk.	06:30
&apos;//---------------------------------------------------------------

public sub MergeOwnerCells()

&apos;//	Usage.	macro call or
&apos;//			call MergeOwnerCells()
&apos;//
&apos;// Entry.	user has territory sheet selectd
&apos;//
&apos;//	Exit.	Owner name cells merged (E2:G2)
&apos;//
&apos;// Calls.
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	9/11/20.		wmk.	original code; generated by Record Macro
&apos;//
&apos;//	Notes.

&apos;//	constants.

&apos;//	local variables.
dim oDocument   as object
dim oDispatcher as object

	&apos;// code.
	ON ERROR GOTO ErrorHandler
	oDocument   = ThisComponent.CurrentController.Frame
	oDispatcher = createUnoService(&quot;com.sun.star.frame.DispatchHelper&quot;)

	&apos;// select range E2:G2
	dim args1(0) as new com.sun.star.beans.PropertyValue
	args1(0).Name = &quot;ToPoint&quot;
	args1(0).Value = &quot;$E$2:$G$2&quot;

	oDispatcher.executeDispatch(oDocument, &quot;.uno:GoToCell&quot;, &quot;&quot;, 0, args1())

	oDispatcher.executeDispatch(oDocument, &quot;.uno:ToggleMergeCells&quot;, &quot;&quot;, 0, Array())


NormalExit:
	exit sub
	
ErrorHandler:
	msgbox(&quot;MergeOwnerCells - unprocessed error.&quot;)
	
end sub		&apos;// end MergeOwnerCells
&apos;/**/

&apos;// MergePropIDCells.bas
&apos;//---------------------------------------------------------------
&apos;// MergePropIDCells - Merge PropID cells in Territory sheet header.
&apos;//		9/19/20.	wmk.	06:30
&apos;//---------------------------------------------------------------

public sub MergePropIDCells()

&apos;//	Usage.	macro call or
&apos;//			call MergePropIDCells()
&apos;//
&apos;// Entry.	user has any sheet selected
&apos;//
&apos;//	Exit.	PropID name cells merged (E2:G2)
&apos;//			PropID NumberFormat set to &quot;0000000000&quot;
&apos;//
&apos;// Calls.
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	9/11/20.	wmk.	original code; generated by Record Macro
&apos;//	9/19/20.	wmk.	set ID cell format to TEN_ZEROS
&apos;//
&apos;//	Notes.

&apos;//	constants.
const TEN_ZEROS=121			&apos;// 10 0&apos;s number format
const COL_E=4
const ROW_1=0

&apos;//	local variables.
dim oDocument   as object
dim oDispatcher as object
dim oDoc	As Object	&apos;// ThisComponent
dim oSel	As Object	&apos;// current cell selection on entry
dim oSheet	As Object	&apos;// current sheet
dim oRange	As Object	&apos;// RangeAddress selected
dim iSheetIx	As Integer	&apos;// sheet index this sheet
dim oCols	As Object	&apos;// .Columns array this sheet
dim oCell	As Object	&apos;// cell selected

	&apos;// code.
	ON ERROR GOTO ErrorHandler
	oDoc = ThisComponent
	oSel = oDoc.getCurrentSelection()
	oRange = oSel.RangeAddress
	iSheetIx = oRange.Sheet
	oSheet = oDoc.Sheets(iSheetIx)
&apos;	oCols = oSheet.Columns
&apos;	oCols(COL_A).setPropertyValue(&quot;NumberFormat&quot;, TEN_ZEROS)
	oCell = oSheet.getCellByPosition(COL_E, ROW_1)
	oCell.NumberFormat = TEN_ZEROS
	
	oDocument   = ThisComponent.CurrentController.Frame
	oDispatcher = createUnoService(&quot;com.sun.star.frame.DispatchHelper&quot;)

	&apos;// select range E1:G1
	dim args1(0) as new com.sun.star.beans.PropertyValue
	args1(0).Name = &quot;ToPoint&quot;
	args1(0).Value = &quot;$E$1:$G$1&quot;

	oDispatcher.executeDispatch(oDocument, &quot;.uno:GoToCell&quot;, &quot;&quot;, 0, args1())

	oDispatcher.executeDispatch(oDocument, &quot;.uno:ToggleMergeCells&quot;, &quot;&quot;, 0, Array())



NormalExit:
	exit sub
	
ErrorHandler:
	msgbox(&quot;MergePropIDCells - unprocessed error.&quot;)
	
end sub		&apos;// end MergePropIDCells	9/19/20
&apos;/**/

&apos;// MergeRow4.bas
&apos;//----------------------------------------------------------------------
&apos;// MergeRow4 - Merge row 4 cells in Territory.
&apos;//		2/14/21.	wmk.	18:00
&apos;//----------------------------------------------------------------------

public sub MergeRow4()

&apos;//	Usage.	macro call or
&apos;//			call MergeRow4()
&apos;//
&apos;// Entry.	user has territory sheet selectd
&apos;//
&apos;//	Exit.	Sheet row cells cleared and merged (A4:I4)
&apos;//
&apos;// Calls.
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	2/14/21.	wmk.	original code.
&apos;//
&apos;//	Notes.

&apos;//	constants.

&apos;//	local variables.
dim oDocument   as object
dim oDispatcher as object

	&apos;// code.
	ON ERROR GOTO ErrorHandler
	oDocument   = ThisComponent.CurrentController.Frame
	oDispatcher = createUnoService(&quot;com.sun.star.frame.DispatchHelper&quot;)

	&apos;// select range A4:I4
	dim args1(0) as new com.sun.star.beans.PropertyValue
	args1(0).Name = &quot;ToPoint&quot;
	args1(0).Value = &quot;$A$4:$I$4&quot;

	oDispatcher.executeDispatch(oDocument, &quot;.uno:GoToCell&quot;, &quot;&quot;, 0, args1())
	
	oDispatcher.executeDispatch(oDocument, &quot;.uno:ToggleMergeCells&quot;, &quot;&quot;, 0, Array())

NormalExit:
	exit sub
	
ErrorHandler:
	msgbox(&quot;MergeRow4 - unprocessed error.&quot;)
	
end sub		&apos;// end Merge row 4		2/14/21
&apos;/**/

&apos;// MergeSheetType.bas
&apos;//----------------------------------------------------------------------
&apos;// MergeSheetType - Merge Sheet type cells in Territory sheet header.
&apos;//		9/24/20.	wmk.	21:45
&apos;//----------------------------------------------------------------------

public sub MergeSheetType()

&apos;//	Usage.	macro call or
&apos;//			call MergeSheetType()
&apos;//
&apos;// Entry.	user has territory sheet selectd
&apos;//
&apos;//	Exit.	Sheet type cells merged (H1:I1)
&apos;//
&apos;// Calls.
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	9/12/20.	wmk.	original code
&apos;//	9/24/20.	wmk.	mod to only use H1-I1 so page fits in landscape
&apos;//						when printing PubTerr formatted sheet
&apos;//
&apos;//	Notes.

&apos;//	constants.

&apos;//	local variables.
dim oDocument   as object
dim oDispatcher as object

	&apos;// code.
	ON ERROR GOTO ErrorHandler
	oDocument   = ThisComponent.CurrentController.Frame
	oDispatcher = createUnoService(&quot;com.sun.star.frame.DispatchHelper&quot;)

	&apos;// select range H1:I1
	dim args1(0) as new com.sun.star.beans.PropertyValue
	args1(0).Name = &quot;ToPoint&quot;
	args1(0).Value = &quot;$H$1:$I$1&quot;

	oDispatcher.executeDispatch(oDocument, &quot;.uno:GoToCell&quot;, &quot;&quot;, 0, args1())

	oDispatcher.executeDispatch(oDocument, &quot;.uno:ToggleMergeCells&quot;, &quot;&quot;, 0, Array())


NormalExit:
	exit sub
	
ErrorHandler:
	msgbox(&quot;MergeSheetType - unprocessed error.&quot;)
	
end sub		&apos;// end MergeSheetType		9/24/20
&apos;/**/


&apos;// MergeSheetType2.bas
&apos;//----------------------------------------------------------------------
&apos;// MergeSheetType2 - Merge Sheet type cells E1-I1 Territory sheet header.
&apos;//		2/14/21.	wmk.	20:00
&apos;//----------------------------------------------------------------------

public sub MergeSheetType2()

&apos;//	Usage.	macro call or
&apos;//			call MergeSheetType()
&apos;//
&apos;// Entry.	user has territory sheet selectd
&apos;//
&apos;//	Exit.	Sheet type cells merged (H1:I1)
&apos;//
&apos;// Calls.
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	9/12/20.	wmk.	original code
&apos;//	9/24/20.	wmk.	mod to only use H1-I1 so page fits in landscape
&apos;//						when printing PubTerr formatted sheet
&apos;//
&apos;//	Notes.

&apos;//	constants.

&apos;//	local variables.
dim oDocument   as object
dim oDispatcher as object

	&apos;// code.
	ON ERROR GOTO ErrorHandler
	oDocument   = ThisComponent.CurrentController.Frame
	oDispatcher = createUnoService(&quot;com.sun.star.frame.DispatchHelper&quot;)

	&apos;// select range H1:I1
	dim args1(0) as new com.sun.star.beans.PropertyValue
	args1(0).Name = &quot;ToPoint&quot;
	args1(0).Value = &quot;$H$1:$I$1&quot;

	oDispatcher.executeDispatch(oDocument, &quot;.uno:GoToCell&quot;, &quot;&quot;, 0, args1())

	oDispatcher.executeDispatch(oDocument, &quot;.uno:ToggleMergeCells&quot;, &quot;&quot;, 0, Array())


NormalExit:
	exit sub
	
ErrorHandler:
	msgbox(&quot;MergeSheetType2 - unprocessed error.&quot;)
	
end sub		&apos;// end MergeSheetType2		2/14/21
&apos;/**/

&apos;// MergeStreetsCells.bas
&apos;//---------------------------------------------------------------
&apos;// MergeStreetsCells - Merge Owner cells in Territory sheet header.
&apos;//		9/12/20.	wmk.	23:15
&apos;//---------------------------------------------------------------

public sub MergeStreetsCells()

&apos;//	Usage.	macro call or
&apos;//			call MergeStreetsCells()
&apos;//
&apos;// Entry.	user has territory sheet selectd
&apos;//
&apos;//	Exit.	Streets/Addrs cells merged (E3:G3)
&apos;//
&apos;// Calls.
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	9/11/20.		wmk.	original code; generated by Record Macro
&apos;//
&apos;//	Notes.

&apos;//	constants.

&apos;//	local variables.
dim oDocument   as object
dim oDispatcher as object

	&apos;// code.
	ON ERROR GOTO ErrorHandler
	oDocument   = ThisComponent.CurrentController.Frame
	oDispatcher = createUnoService(&quot;com.sun.star.frame.DispatchHelper&quot;)

	&apos;// select range E3:G3
	dim args1(0) as new com.sun.star.beans.PropertyValue
	args1(0).Name = &quot;ToPoint&quot;
	args1(0).Value = &quot;$E$3:$G$3&quot;

	oDispatcher.executeDispatch(oDocument, &quot;.uno:GoToCell&quot;, &quot;&quot;, 0, args1())

	oDispatcher.executeDispatch(oDocument, &quot;.uno:ToggleMergeCells&quot;, &quot;&quot;, 0, Array())


NormalExit:
	exit sub
	
ErrorHandler:
	msgbox(&quot;MergeStreetsCells - unprocessed error.&quot;)
	
end sub		&apos;// end MergeStreetsCells
&apos;/**/


&apos;// MoveToDocSheet.bas - Jump over to different sheet by sheet name.
&apos;//---------------------------------------------------------------
&apos;// MoveToDocSheet - Jump over to different sheet by sheet name.
&apos;//		7/11/21.	wmk.	09:03
&apos;//---------------------------------------------------------------

public sub MoveToDocSheet(poDocument AS Object, psSheetName As String)

&apos;//	Usage.	macro call or
&apos;//			call MoveToDocSheet( oDocument,sSheetName )
&apos;//
&apos;//		oDocument = document object containing sheet
&apos;//		sSheetName = name of sheet to move to
&apos;//
&apos;// Entry.	user focused on some sheet in workbook
&apos;//
&apos;//	Exit.	user focus moved to sSheetName in workbook, if exists
&apos;//
&apos;// Calls.	uno Dispatcher.
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	7/9/21.		wmk.	original code; cloned from macro recording.
&apos;// 7/11/21.	wmk.	sheet not found message corrected.
&apos;//
&apos;//	Notes. &lt;Insert notes here&gt;
&apos;//

&apos;//	constants.

&apos;// local variables.

dim oDoc		As Object		&apos;// ThisComponent
dim oSheets		As Object		&apos;// Sheets() array
dim iSheetIx	As Integer		&apos;// desired sheet index
dim iUnoSheet	As Integer		&apos;// uno sheet number
dim bSheetExists	As Boolean	&apos;// sheet exists flag
dim oSheet		As Object		&apos;// this sheet

	&apos;// code.
	ON ERROR GOTO ErrorHandler
&apos;	oDoc = ThisComponent
	oDoc = poDocument

if 1 = 0 then
 msgbox(&quot;in MoveToDocSheet.. document URL = &quot; &amp; CHR(13) &amp; CHR(10)_ 
  &amp; oDoc.getURL() )
endif

	oSheets = oDoc.Sheets()
	bSheetExists = oSheets.hasByName(psSheetName)
&apos;XRay oSheets
	if bSheetExists then
		oSheet = oSheets.getByName(psSheetName)
		iSheetIx = oSheet.RangeAddress.Sheet

if not true then
	msgbox(&quot;Index of target sheet is &quot; + iSheetIx)
	goto NormalExit
endif
		iUnoSheet = iSheetIx + 1	&apos;// add 1 for uno indexing

	else		&apos;// sheet not found
		msgbox(&quot;In MoveToDocSheet: &quot; + psSheetName + &quot; - sheet not found!&quot;)
		goto ErrorHandler
	endif

	&apos;// use uno - macro-generated code to jump to desired sheet.

rem ----------------------------------------------------------------------
rem define variables
dim document   as object
dim dispatcher as object
rem ----------------------------------------------------------------------
rem get access to the document
&apos;document   = ThisComponent.CurrentController.Frame
document = oDoc.CurrentController.Frame
dispatcher = createUnoService(&quot;com.sun.star.frame.DispatchHelper&quot;)

rem ----------------------------------------------------------------------
dim args1(0) as new com.sun.star.beans.PropertyValue

args1(0).Name = &quot;Nr&quot;
&apos;//args1(0).Value = 4			&apos;// PubTerr sheet index
args1(0).Value = iUnoSheet		&apos;// jump to desired sheet
dispatcher.executeDispatch(document, &quot;.uno:JumpToTable&quot;, &quot;&quot;, 0, args1())

if 1 = 1 then
dim oDocument	As Object
dim oDispatcher	As Object
&apos; now jump to A6 to &quot;get into&quot; sheet...
	oDocument   = ThisComponent.CurrentController.Frame
	oDispatcher = createUnoService(&quot;com.sun.star.frame.DispatchHelper&quot;)

	&apos;// move to cell $A$1
dim args2(0) as new com.sun.star.beans.PropertyValue
	args2(0).Name = &quot;ToPoint&quot;
	args2(0).Value = &quot;$A$1&quot;

	oDispatcher.executeDispatch(oDocument, &quot;.uno:GoToCell&quot;, &quot;&quot;, 0, args2())
endif

NormalExit:
	exit sub

ErrorHandler:
	ON ERROR GOTO
	msgbox(&quot;In MoveToDocSheet - unprocessed error.&quot;)
	GOTO NormalExit

end sub		&apos;// MoveToDocSheet		7/11/21.	09:03


&apos;// MoveToSheet.bas - Jump over to different sheet by sheet name.
&apos;//---------------------------------------------------------------
&apos;// MoveToSheet - Jump over to different sheet by sheet name.
&apos;//		3/16/21.	wmk.	13:38
&apos;//---------------------------------------------------------------

public sub MoveToSheet(psSheetName As String)

&apos;//	Usage.	macro call or
&apos;//			call MoveToSheet( sSheetName )
&apos;//
&apos;//		sSheetName = name of sheet to move to
&apos;//
&apos;// Entry.	user focused on some sheet in workbook
&apos;//
&apos;//	Exit.	user focus moved to sSheetName in workbook, if exists
&apos;//
&apos;// Calls.	uno Dispatcher.
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	3/16/21.		wmk.	original code; cloned from macro recording
&apos;//
&apos;//	Notes. &lt;Insert notes here&gt;
&apos;//

&apos;//	constants.

&apos;// local variables.

dim oDoc		As Object		&apos;// ThisComponent
dim oSheets		As Object		&apos;// Sheets() array
dim iSheetIx	As Integer		&apos;// desired sheet index
dim iUnoSheet	As Integer		&apos;// uno sheet number
dim bSheetExists	As Boolean	&apos;// sheet exists flag
dim oSheet		As Object		&apos;// this sheet

	&apos;// code.
	ON ERROR GOTO ErrorHandler
	oDoc = ThisComponent
	oSheets = oDoc.Sheets()
	bSheetExists = oSheets.hasByName(psSheetName)
&apos;XRay oSheets
	if bSheetExists then
		oSheet = oSheets.getByName(psSheetName)
		iSheetIx = oSheet.RangeAddress.Sheet

if not true then
	msgbox(&quot;Index of target sheet is &quot; + iSheetIx)
	goto NormalExit
endif
		iUnoSheet = iSheetIx + 1	&apos;// add 1 for uno indexing

	else		&apos;// sheet not found
		msgbox(&quot;In MoveToSheet: &quot; + psSheetName + &quot; - sheet not found!&quot;)
		goto ErrorHandler
	endif

	&apos;// use uno - macro-generated code to jump to desired sheet.

rem ----------------------------------------------------------------------
rem define variables
dim document   as object
dim dispatcher as object
rem ----------------------------------------------------------------------
rem get access to the document
document   = ThisComponent.CurrentController.Frame
dispatcher = createUnoService(&quot;com.sun.star.frame.DispatchHelper&quot;)

rem ----------------------------------------------------------------------
dim args1(0) as new com.sun.star.beans.PropertyValue
args1(0).Name = &quot;Nr&quot;
&apos;//args1(0).Value = 4			&apos;// PubTerr sheet index
args1(0).Value = iUnoSheet		&apos;// jump to desired sheet
dispatcher.executeDispatch(document, &quot;.uno:JumpToTable&quot;, &quot;&quot;, 0, args1())

NormalExit:
	exit sub

ErrorHandler:
	msgbox(&quot;In MoveToSheet - unprocessed error.&quot;)
	GOTO NormalExit

end sub		&apos;// MoveToSheet		3/16/21.	13:38
&apos;/**/

&apos;// ParseAddress.bas - Parse address into multiple fields.
&apos;//---------------------------------------------------------------
&apos;// ParseAddress - Parse address into multiple fields.
&apos;//		2/19/21.	wmk.	13:34
&apos;//---------------------------------------------------------------

public sub ParseAddress( psAddress AS String, psSeps As String, _
				psTokens() AS String )

&apos;//	Usage.	macro call or
&apos;//			call ParseAddress( sAddress, sSeps, sTokens() )
&apos;//
&apos;//		sAddress = address string to parse
&apos;//		sSeps = string of legal separators, if empty, comma will be used
&apos;//		sTokens = (returned) array of tokens extracted from sAddress
&apos;//
&apos;// Entry.	
&apos;//
&apos;//	Exit.	sTokens contains parsed fields from sAddress
&apos;//			UBound(sTokens) will allow the caller to get token count
&apos;//
&apos;// Calls. Crack.
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	2/16/21.	wmk.	original code
&apos;// 2/19/21.	wmk.	bug fixes to satisfy OPTION EXPLICIT
&apos;//
&apos;//	Notes. Addresses are all over the show, whether dealing with search
&apos;// engines or downloads. This little guy parses any address field
&apos;// into an array.
&apos;//	Compensates for bug in Crack where source string not being reduced.

&apos;//	constants.

&apos;//	local variables.
dim sAddress	As String		&apos;// copy of passed address
dim sArray()	AS String
dim sSepFnd		AS String		&apos;// separator found
dim sToken		AS String		&apos;// token extracted
dim sSource		AS String		&apos;// source string remaining
dim nTokens		AS Integer		&apos;// token count
dim bContinue	AS Boolean		&apos;// loop control flag
dim sSepList	As String		&apos;// local separator list

	&apos;// code.
	ON ERROR GOTO ErrorHandler
	sAddress = psAddress
	sSepList = psSeps
	sSepFnd = &quot;&quot;
	sToken = &quot;&quot;
	redim psTokens()
	nTokens = 0
	if len(sSepList) = 0 then
		sSepList = &quot; &quot;			&apos;// default to space
	endif
	
	if len(sAddress) = 0 then
		GoTo NormalExit
	endif
	
	bContinue = len(sAddress) &gt; 0
	Do While bContinue
		Crack(sAddress, sSepList, sToken, sSepFnd)
&apos;		if len(sAddress) &gt; len(sToken) then
&apos;		   sAddress = Right(sAddress,len(sAddress)-len(sToken)-1)
&apos;		else
&apos;		   sAddress =&quot;&quot;
&apos;		endif
		if len(sToken) = 0 then	&apos;// flush multiple seps
		   GoTo NextToken
		endif
		bContinue = len(sAddress) &gt; 0
		redim preserve psTokens(nTokens)
		psTokens(nTokens) = sToken
		nTokens = nTokens + 1 
NextToken:		
	Loop
	
NormalExit:
	exit sub
	
ErrorHandler:
	msgbox(&quot;ParseAddress - unprocessed error&quot;)
	GoTo NormalExit
	
end sub		&apos;// end ParseAddress	2/19/21.	13:34
&apos;/**/

&apos;// ParseSitus.bas
&apos;//---------------------------------------------------------------
&apos;// ParseSitus - Parse Situs :into number, street, unit fields.
&apos;//		9/16/20.	wmk.	8:00
&apos;//---------------------------------------------------------------

public sub ParseSitus( psSitus As String, psNumber As String, _
                   psStreet As String, psUnit As String )

&apos;//	Usage.	macro call or
&apos;//			call ParseSitus( sSitus, sNumber, sStreet, sUnit )
&apos;//
&apos;//		sSitus = full property address number, street, [unit]
&apos;//		sNumber = [returned] house/bldg number
&apos;//		sStreet = [returned] street name and suffix
&apos;//		sUnit = [returned] [unit/lot/apt number]
&apos;//
&apos;// Entry.	sSitus is blank/tab separated fields
&apos;//
&apos;//	Exit.	sNumber = extracted house/bldg number
&apos;//			sStreet = extracted street name [with suffix]
&apos;//			sUnit = unit/lot/apt number or &quot;&quot;
&apos;//
&apos;// Calls.	Crack
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	8/9/20.		wmk.	original code
&apos;//	8/10/20.	wmk.	modified to use Crack to break strings
&apos;// 8/13/20.	wmk.	msgbox debugs deactivated
&apos;//	8/16/20.	wmk.	bDone, bStreetDone explicitly declared; bug fix where
&apos;//						N INDIES CIR being parsed as N INDIESCIR
&apos;//	8/18/20.	wmk.	mod to split street direction off number
&apos;//						(e.g. 700N Tamiami Tr)
&apos;// 8/26/20.	wmk.	bug fix where empty string is actually found
&apos;//						by InStr in source string at position 1
&apos;//	9/15/20.	wmk.	day-1 bug fixes where street direction prefix
&apos;//						returned as street, and street returned with unit
&apos;//						and parsing ended with juxtaposed blanks;
&apos;//						modified to return direction prefix as suffix
&apos;//						on street to match RefUSA street formatting
&apos;//	Notes.

&apos;//	constants.

&apos;//	local variables.
dim bDone	As Boolean	&apos;// done parsing flag
dim bStreetDone	As Boolean	&apos;// street done flag
dim sBlank	As String	&apos;// blank
dim sTab	As String	&apos;// tab
dim sSitus	As String	&apos;// trimmed situs
dim nSitusLen	As Integer	&apos;// situs length
dim iSep	As Integer	&apos;// blank position
dim jSep	As Integer	&apos;// tab position
dim nExtLen	As Integer	&apos;// extracted substring len
dim bMore	As Integer	&apos;// more street remaining flag
dim sSeps	As String	&apos;// situs separators
dim sFullStreet	As String	&apos;// full street
dim sSepFnd	As String	&apos;// separator found
dim sNumber	As String	&apos;// house number
dim sStreet	As String	&apos;// street name
dim sUnit	As String	&apos;// unit #
Dim iPos	As Integer	&apos;// separator position
dim sPostDir	As String	&apos;// post direction
dim bBlanksFlushed	As Boolean	&apos;// blanks flushed flag

	&apos;// code.
	ON ERROR GOTO ErrorHandler
	sTab = CHR(9)
	sBlank = &quot; &quot;
	sSeps= sBlank + sTab
	sSitus = Trim(psSitus)
	nSitusLen = len(sSitus)
	
	&apos;// Extract number.
	&apos;// Parse to first blank or tab.
	&apos;// Also include N S E W as SCPA includes as part of number field.	&apos;// mod081820
	sSeps= &quot;NSEW&quot; + sBlank + sTab										&apos;// mod081820
	call Crack(sSitus, sSeps, sNumber, sSepFnd)
	bDone = (len(sSepFnd) = 0)

if true then
 GoTo Skip1
endif
&apos;//-------------------------------------------------------------------------------	
	&apos;// if separator in set &quot;NSEW&quot;, re-insert back into sSitus at front	&apos;// mod081820
	iPos = InStr(&quot;NSEW&quot;,sSepFnd)										&apos;// mod082620
	if iPos  &gt; 0 then													&apos;// mod082620
		sSitus = sSepFnd + sSitus										&apos;// mod081820
	endif	&apos;// end number contains direction conditional				&apos;// mod081820
&apos;//--------------------------------------------------------------------------------
Skip1:

	&apos;// if separator in set &quot;NSEW&quot;, save it and append to Street		&apos;// mod091620
	iPos = InStr(&quot;NSEW&quot;,sSepFnd)										&apos;// mod091620
	if iPos  &gt; 0 then													&apos;// mod091620
		sPostDir = sSepFnd												&apos;// mod091620
	endif	&apos;// end number contains direction conditional				&apos;// mod091620
	
&apos;// flush multiple blanks between number and street name
	bBlanksFlushed = false
	sSeps= sBlank + sTab	&apos;// limit further seps to blank and tab		&apos;// mod081820
	sFullStreet = &quot;&quot;		&apos;// clear street accumulator
	do while (NOT bBlanksFlushed)
		Crack(sSitus, sSeps, sStreet, sSepFnd)
		bBlanksFlushed = (len(sStreet) &gt; 0)
		bDone = (len(sSepFnd) = 0)
		if bDone then		&apos;// if only number, bail out
			GoTo AllDone
		endif
 	loop

	sFullStreet = sFullStreet + &quot; &quot; + sStreet

&apos;msgbox(&quot;ParseSitus - sNumber = &quot; + sNumber + CHR(13) + CHR(10) _
&apos;	      + &quot; remaining Situs = &quot; + sSitus)

	&apos;// Extract street name.
	sSeps= sBlank + sTab	&apos;// limit further seps to blank and tab		&apos;// mod081820
	bStreetDone = bDone
 	do while (NOT bStreetDone)
 		call Crack(sSitus, sSeps, sStreet, sSepFnd)
 		sFullStreet = sFullStreet + &quot; &quot; + sStreet
 		bStreetDone = (StrComp(sSepFnd, CHR(9)) = 0) _
 		            OR (Len(sSepFnd) = 0)	&apos;// done if tab or no separator
if false then
  GoTo Skip2
endif
&apos;//-----------------------------------------------------------------------------
 		if (NOT bStreetDone) then
 			call Crack(sSitus, sSeps, sStreet, sSepFnd)
 			bStreetDone = (len(sStreet) = 0)	&apos;// done if 2 separators juxt
 			if bStreetDone then
 				exit do
 			else
 				sFullStreet = sFullStreet + &quot; &quot; + sStreet
 			endif
 		endif	&apos;// end not TAB conditional
 &apos;//---------------------------------------------------------------------------
 Skip2:
 
 NextSep:
 	loop	&apos;// end street not done conditional

AllDone: 
 	sFullStreet = trim(sFullStreet)
 	
 	&apos;// append pre-direction as post-direction
 	if len(sPostDir) &gt; 0 then
 	   sFullStreet = sFullStreet + &quot; &quot; + sPostDir
 	endif
 	
 	sUnit = sSitus	&apos;// unit is whatever is left
	
&apos;msgbox(&quot;ParseSitus - sFullStreet = &apos;&quot; + sFullStreet + +&quot;&apos;&quot;+CHR(13) + CHR(10) _
&apos;          + &quot;sUnit = &apos;&quot; + sUnit + &quot;&apos;&quot; + CHR(13)+CHR(10) _
&apos;	      + &quot; remaining Situs = &apos;&quot; + sSitus + &quot;&apos;&quot;)

	&apos;// set returned values.
	psNumber = sNumber
	psStreet = sFullStreet
	psUnit = sUnit
	
NormalExit:
	exit sub
	
ErrorHandler:
	&apos;// clear all returned strings
	psNumber = &quot;&quot;
	psStreet = &quot;&quot;
	psUnit = &quot;&quot;
	msgBox(&quot;ParseSitus - unprocessed error.&quot;)
	GoTo NormalExit
	
end sub		&apos;// end ParseSitus	9/16/20
&apos;/**/

&apos;// ParseUnit.bas - Parse bridge table unit field.
&apos;//---------------------------------------------------------------
&apos;// ParseUnit - Parse bridge table unit field.
&apos;//		2/9/21.	wmk.
&apos;//---------------------------------------------------------------

public sub ParseUnit( psUnitStr As String, psSCUnit As String,_
			psBldUnit As String, psBldg As String, psBldNum As String )

&apos;//	Usage.	macro call or
&apos;//			call ParseUnit(sUnitStr, sSCUnit, sBldUnit, sBldg, sBldNum)
&apos;//
&apos;//		sUnitStr = full unit string, likely from SC data
&apos;//					&lt;unit-string&gt; ::= NULL | &lt;unit-spec&gt;
&apos;//					&lt;unit-spec&gt; ::= &lt;unit&gt; | &lt;unit&gt; &lt;unit-suffx&gt;
&apos;//					&lt;unit&gt; ::= &lt;n&gt;[&lt;n&gt;*] | &lt;a&gt; | &lt;a&gt;-&lt;n&gt;[&lt;n&gt;*]
&apos;//						| &lt;n&gt;[&lt;n&gt;*]/&lt;a&gt;[&lt;a&gt;*]
&apos;//					&lt;unit-sufx&gt; ::= &lt;bldg&gt; | BLD &lt;bldg&gt;
&apos;//
&apos;// Entry,
&apos;//
&apos;//	Exit.	sSCUnit = SC unit extracted from &lt;exit conditions&gt;
&apos;//
&apos;// Calls. Crack
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;// 2/9/21.		wmk.	original code
&apos;//
&apos;// Method. Crack up to 3 fields, space-separated
&apos;//			Crack field1 for &quot;/&quot;
&apos;//				if present, cracked portion is SCUnit, remaining is BldUnit
&apos;//				otherwise is SCUnit and BldUnit is empty
&apos;//			sBldg is returned (field2) &quot;BLD&quot; or similar string
&apos;//			sBldNum is returned (field3)
&apos;//
&apos;//	Notes. For all UnitStr fields, space is the only recognized delimiter.
&apos;// The SC data has NO STANDARDS, so this is at best guesswork. ParseUnit
&apos;// will parse at most 3 fields, assuming the first to be the unit and
&apos;// any subsequent fields &quot;BLD&quot; or &quot;BLDG&quot; followed by a building designator.
&apos;//

&apos;//	constants.

&apos;//	local variables.
&apos;psUnitStr - passed full unit string
&apos;psSCUnit - [returned] SC unit from string nnn/a
&apos;psBldUnit - [returned] building physical unit from string nnn/a
&apos;psBldg - [returned] &quot;BLD&quot; or &quot;BLDG&quot; or &quot;&quot;
&apos;psBldNum - [returned] building number field
dim sUnitStr	As String	&apos;// copy of passed full unit string for parsing
dim sSCUnit		As String	&apos;// returned SC unit
dim sBldUnit	As String	&apos;// returned physical unit
dim sBldg		AS String	&apos;// returned BLD or similar string
dim sBldNum		As String	&apos;// returned building number field

	&apos;// code.
	ON ERROR GOTO ErrorHandler

	&apos;// initialize returned string vars.
	sScUnit = &quot;&quot;
	sBldUnit = &quot;&quot;
	sBldg = &quot;&quot;
	sBldNum = &quot;&quot;
	sUnitStr = trim(psUnitStr)
	if len(sUnitStr) = 0 then
	   goto NormalExit
	endif

dim sField1		As String	&apos;// 1st cracked field
dim sField2		As String	&apos;// 2nd cracked field
dim sField3		As String	&apos;// 3rd cracked field
dim sSep		As String	&apos;// Crack found separator
	
	&apos;// Crack up to 3 fields on space.
	sUnitStr = trim(psUnitStr)
	sField1 = &quot;&quot;
	sField2 = &quot;&quot;
	sField3 = &quot;&quot;
	Crack(sUnitStr, &quot; &quot;, sField1, sSep)
	if len(sSep) &gt; 0 then
	   Crack(sUnitStr, &quot; &quot;, sField2, sSep)
	   sField3 = sUnitStr
	endif
	
	Crack(sField1, &quot;/&quot;, sSCUnit, sSep)
	sBldUnit = sField1
	
NormalExit:
&apos;psSCUnit - [returned] SC unit from string nnn/a
&apos;psBldUnit - [returned] building physical unit from string nnn/a
&apos;psBldg - [returned] &quot;BLD&quot; or &quot;BLDG&quot; or &quot;&quot;
&apos;psBldNum - [returned] building number field
	psSCUnit = sSCUnit
	psBldUnit = sBldUnit
	psBldg = sBldg
	psBldNum = sBldNum
	exit sub
	
ErrorHandler:
	msgbox(&quot;ParseUnit - unprocessed error&quot;)
	GoTo NormalExit
	
end sub		&apos;// end ParseUnit	2/9/21.
&apos;/**/

&apos;// PickACell.bas
&apos;//---------------------------------------------------------------
&apos;// PickACell - Select any cell to bring sheet into focus.
&apos;//		10/12/20.	wmk.	21:45
&apos;//---------------------------------------------------------------

public sub PickACell()

&apos;//	Usage.	macro call or
&apos;//			call PickACell()
&apos;//
&apos;// Entry.	user in a spreadsheet with data in column &quot;A&quot;, starting
&apos;//			in cell $A$6
&apos;//
&apos;//	Exit.	cell $A$6 selected just to anchor Frame objects
&apos;//
&apos;// Calls.
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	10/12/20.	wmk.	original code

&apos;// local variables.
dim oDocument   as object
dim oDispatcher as object

&apos;//	code.
	ON ERROR GOTO ErrorHandler

	oDocument   = ThisComponent.CurrentController.Frame
	oDispatcher = createUnoService(&quot;com.sun.star.frame.DispatchHelper&quot;)

	&apos;// move to cell $A$6
dim args1(0) as new com.sun.star.beans.PropertyValue
	args1(0).Name = &quot;ToPoint&quot;
	args1(0).Value = &quot;$A$6&quot;

	oDispatcher.executeDispatch(oDocument, &quot;.uno:GoToCell&quot;, &quot;&quot;, 0, args1())


NormalExit:
	exit sub

ErrorHandler:
	msgbox(&quot;PickACell - unprocessed error&quot;)
	GoTo NormalExit
	
end sub		&apos;// end PickACell	10/11/20
&apos;/**/

&apos;// ProtectSheet.bas
&apos;//---------------------------------------------------------------
&apos;// ProtectSheet - Protect current sheet from input.
&apos;//		10/12/20.	wmk.
&apos;//---------------------------------------------------------------

public sub ProtectSheet()

&apos;//	Usage.	macro call or
&apos;//			call ProtectSheet()
&apos;//
&apos;// Entry.	user has sheet selected
&apos;//
&apos;//	Exit.	sheet &quot;protected&quot; from input/changes
&apos;//
&apos;// Calls.
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	10/12/20.		wmk.	original code; from macro recording
&apos;//
&apos;//	Notes.

&apos;//	constants.

&apos;//	local variables.
rem ----------------------------------------------------------------------
rem define variables
dim document   as object
dim dispatcher as object

	&apos;// code.
	ON ERROR GOTO ErrorHandler
rem ----------------------------------------------------------------------
rem get access to the document
document   = ThisComponent.CurrentController.Frame
dispatcher = createUnoService(&quot;com.sun.star.frame.DispatchHelper&quot;)

rem ----------------------------------------------------------------------
dim args1(0) as new com.sun.star.beans.PropertyValue
args1(0).Name = &quot;Protect&quot;
args1(0).Value = true

dispatcher.executeDispatch(document, &quot;.uno:Protect&quot;, &quot;&quot;, 0, args1())
	
NormalExit:
	exit sub
	
ErrorHandler:
	msgbox(&quot;ProtectSheet - unprocessed error&quot;)
	GoTo NormalExit
	
end sub		&apos;// end ProtectSheet		10/12/20
&apos;/**/

&apos;// WrapLong.bas - subroutine and function header template.
&apos;//---------------------------------------------------------------
&apos;// WrapLong - &lt;sub description&gt;.
&apos;//		1/1/21.	wmk.
&apos;//---------------------------------------------------------------

public sub WrapLong()

&apos;//	Usage.	macro call or
&apos;//			call WrapLong( &lt;parameters&gt; )
&apos;//
&apos;//		&lt;parameters description&gt;
&apos;//
&apos;// Entry.	&lt;entry conditions&gt;
&apos;//
&apos;//	Exit.	&lt;exit conditions&gt;
&apos;//
&apos;// Calls.
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	1/1/21.		wmk.	original code
&apos;//
&apos;//	Notes. &lt;Insert notes here&gt;
&apos;//

&apos;//	constants.

&apos;//	local variables.
rem ----------------------------------------------------------------------
rem define variables
dim document   as object
dim dispatcher as object

	&apos;// code.
	ON ERROR GOTO ErrorHandler

rem ----------------------------------------------------------------------
rem get access to the document
document   = ThisComponent.CurrentController.Frame
dispatcher = createUnoService(&quot;com.sun.star.frame.DispatchHelper&quot;)

rem ----------------------------------------------------------------------
dispatcher.executeDispatch(document, &quot;.uno:CommonAlignTop&quot;, &quot;&quot;, 0, Array())

rem ----------------------------------------------------------------------
dim args2(0) as new com.sun.star.beans.PropertyValue
args2(0).Name = &quot;WrapText&quot;
args2(0).Value = true

dispatcher.executeDispatch(document, &quot;.uno:WrapText&quot;, &quot;&quot;, 0, args2())

	
NormalExit:
	exit sub
	
ErrorHandler:
	msgbox(&quot;WrapLong - unprocessed error&quot;)
	GoTo NormalExit
	
end sub		&apos;// end WrapLong
&apos;/**/

&apos;// WriteHTML.bas - write HTML file with generated phone query.
&apos;//---------------------------------------------------------------
&apos;// WriteHTML - Write phone query to HTML file.
&apos;//		8/10/20.	wmk. 21:00
&apos;//---------------------------------------------------------------

public sub WriteHTML(psFilename As String, psURL As String)

&apos;//	Usage.	call WriteHTML( sFilename, sURL )
&apos;//
&apos;//		sFileName = filename to write [.html suffix will be added]
&apos;//		sURL = generated URL to write in HTML
&apos;//
&apos;// Entry.	&lt;entry conditions&gt;
&apos;//
&apos;// Exit. The following lines are written to the file &lt;sFileName&gt;.html
&apos;//    &lt;!DOCTYPE html&gt; 
&apos;//    &lt;html&gt; 
&apos;//    &lt;head&gt; 
&apos;//    	&lt;title&gt;Phone Query&lt;/title&gt; 
&apos;//    	&lt;meta http-equiv=&quot;refresh&quot;
&apos;//   content=&quot;0;url=https://www.truepeoplesearch.com/details?streetaddress=500%20The Esplanade%20307&amp;citystatezip=Venice%2C%20FL&amp;rid=0x0&quot; /&gt;
&apos;//    &lt;/head&gt; 
&apos;//    &lt;body&gt; 
&apos;//    &lt;/body&gt; 
&apos;//    &lt;/html&gt; 
&apos;//
&apos;// Calls.
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	8/9/20.		wmk.	original code
&apos;//	8/10/20.	wmk.	calling sequence modified to accept
&apos;//						filename and url parameters
&apos;//
&apos;//	Notes. The path that the file is written to is cast as
&apos;// an internally known path. Eventually, this should be
&apos;// contained in either an environment variable or public
&apos;// constant in a shared header. See the initial sPath assignment
&apos;//	statement below.
&apos;// See function sGenPhoneURL for documentation on the URL passed
&apos;// in to be written to the .html file.

&apos;//	constants.

&apos;//	local variables.
dim sFileSpec	As String	&apos;// filespec
dim sFile		As String	&apos;// file
dim sURL		As String	&apos;// URL to write
dim sPath		As String	&apos;// file path
dim iHandle		As Integer	&apos;// file handle
	&apos;// code.
	ON ERROR GOTO ErrorHandler
	sPath = &quot;/media/ubuntu/Windows/Users/Bill/Documents/Cong-Files/Territories/Queries-HTML/&quot;
&apos;	sFile = &quot;FirstPhone.html&quot;
	sFile = psFilename
	sURL = psURL
	sFileSpec = sPath + sFile + &quot;.html&quot;
	iHandle = Freefile		&apos;// get free file handle
	Open sFileSpec For Output As #iHandle
	
	&apos;// write HTML statements to file.
	Print #iHandle &quot;&lt;!DOCTYPE html&gt;&quot;
	Print #iHandle &quot;&lt;html&gt;&quot;
	Print #iHandle &quot;&lt;head&gt;&quot;
	Print #iHandle &quot;&lt;title&gt;Phone Query&lt;/title&gt;&quot;
	Print #iHandle &quot;&lt;meta http-equiv=&quot;&quot;refresh&quot;&quot;&quot;
&apos;	Print #iHandle &quot;content=&quot;&quot;0;url=https://www.truepeoplesearch.com/details?streetaddress=500%20The Esplanade%20307&amp;citystatezip=Venice%2C%20FL&amp;rid=0x0&quot;&quot; /&gt;&quot;
    sPageLink = &quot;content=&quot;&quot;0;url=&quot; + sURL + &quot;&quot;&quot;&quot;
    Print #iHandle sPageLink
	Print #iHandle &quot;&lt;/head&gt;&quot;
	Print #iHandle &quot;&lt;body&gt;&quot;
	Print #iHandle &quot;&lt;/body&gt;&quot;
	Print #iHandle &quot;&lt;/html&gt;&quot;
	Close #iHandle
msgBox(&quot; WriteHTML complete. - File = &apos;&quot; + sFile + &quot;&apos;&quot;)
  
NormalExit:
  exit Sub
  
ErrorHandler:
  msgBox(&quot; WriteHTML - Unprocessed error.&quot;)
  GoTo NormalExit
  
end sub		&apos;// end WriteHTML   8/10/20.
&apos;/**/

&apos;// YellowTab.bas
&apos;//---------------------------------------------------------------
&apos;// YellowTab - Change current worksheet tab color to Yello.
&apos;//		10/12/20.	wmk.
&apos;//---------------------------------------------------------------

public sub YellowTab()

&apos;//	Usage.	macro call or
&apos;//			call YellowTab()
&apos;//
&apos;// Entry.	user has worksheet selected
&apos;//
&apos;//	Exit.	worksheet tab color changed to YELLOW
&apos;//
&apos;// Calls.
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	7/2/20.		wmk.	original code; cloned from macro recording
&apos;//
&apos;//	Notes.
&apos;//

&apos;//	constants.
const YELLOW=16776960			&apos;// YELLOW color value

&apos;//	local variables.
rem ----------------------------------------------------------------------
rem define variables
dim document   as object
dim dispatcher as object

	&apos;// code.
	ON ERROR GOTO ErrorHandler
rem ----------------------------------------------------------------------
rem get access to the document
document   = ThisComponent.CurrentController.Frame
dispatcher = createUnoService(&quot;com.sun.star.frame.DispatchHelper&quot;)

rem ----------------------------------------------------------------------
dim args1(0) as new com.sun.star.beans.PropertyValue
args1(0).Name = &quot;TabBgColor&quot;
args1(0).Value = YELLOW

dispatcher.executeDispatch(document, &quot;.uno:SetTabBgColor&quot;, &quot;&quot;, 0, args1())
	
NormalExit:
	exit sub
	
ErrorHandler:
	msgbox(&quot;YellowTab - unprocessed error&quot;)
	GoTo NormalExit
	
end sub		&apos;// end YellowTab	10/12/20
&apos;/**/

&apos;// EditToBridge.bas
&apos;//--------------------------------------------------------------------------
&apos;// EditToBridge - Convert Admin-Edit spreadsheet to Admin-Bridge sheet.
&apos;//		9/30/20.	wmk.	13:30
&apos;//--------------------------------------------------------------------------

public sub EditToBridge()

&apos;//	Usage.	macro call or
&apos;//			call EditToBridge()
&apos;//
&apos;// Entry.	user in Admin-Edit format spreadsheet
&apos;//	OwningParcel  UnitAddress  Resident1 Resident2 Phone1 Phone2 RUPhone
&apos;//			A			B			C		D		  E		 F		G	
&apos;//  
&apos;//	truepeople	411		whitepages
&apos;//		H		 I		   J
&apos;//
&apos;//	SubTerr CongTerr DoNotCall RSO Foreign  RecordDate SitusAddress
&apos;//		K		L		   M     N    O			P			  Q		
&apos;//  PropUse	DelPending
&apos;//		R  			S
&apos;//
&apos;//	Exit.	sheet columns and header modified to match Admin-Bridge spec
&apos;//			for updating MultiMail.db/SplitProps table
&apos;//	OwningParcel  UnitAddress  Resident1 Resident2 Phone1 Phone2 RUPhone
&apos;//			A			B			C		D		  E		 F		G	
&apos;//  SubTerr CongTerr DoNotCall RSO Foreign  RecordDate SitusAddress
&apos;//		H		I		   J     K     L		M			  N		
&apos;//  PropUse	DelPending
&apos;//		O  			P
&apos;//
&apos;//
&apos;// Calls.	SetTerrWidths, BoldHeadings
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	9/30/20.		wmk.	original code; adapted from RUEditToBridge
&apos;// 				this differs from RUEditToBridge, in that it is not
&apos;//					necessary to insert a column (A) for OwningParcel
&apos;//					since it is already present.
&apos;//
&apos;//	Notes. This sub/utility is run on the Admin-Edit sheet coming back from
&apos;// a territory administrator after being updated with changes. This sheet
&apos;// is morphed into an Admin-Bridge sheet that is then used to produce a
&apos;// .csv &quot;&lt;ST&gt;Update.csv&quot; where &lt;ST&gt; is the SubTerritory name (e.g. ANDROS).
&apos;//.. 9/30/20 this may change.. That .csv will then be used
&apos;// to create a &lt;ST&gt;Update.db containing 1 table &quot;PropsUpdt&quot;. That .db
&apos;// and table will be used with SQL and a SELECT..UNION..SELECT that will
&apos;// form the union of any new records and the entire MultiMail/SplitProps
&apos;// records. (CREATE TEMP TABLE &lt;table-name&gt; AS SELECT..UNION..SELECT)
&apos;//
&apos;// MultiMail/SplitProps table fields.
&apos;//		9/7/20.
&apos;//0|OwningParcel|TEXT|1||0
&apos;//1|UnitAddress|TEXT|1||0
&apos;//2|Resident1|TEXT|0||0
&apos;//3|Resident2|TEXT|0||0
&apos;//4|Phone1|TEXT|0||0
&apos;//5|Phone2|TEXT|0||0
&apos;//6|RefUSA-Phone|TEXT|0||0
&apos;//7|SubTerritory|TEXT|0||0
&apos;//8|CongTerrID|TEXT|0||0
&apos;//9|DoNotCall|INTEGER|0|0|0
&apos;//10|RSO|INTEGER|0|0|0
&apos;//11|Foreign|INTEGER|0|0|0
&apos;//12|RecordDate|REAL|0|0|0
&apos;//13|X-Pending|INTEGER|0|0|0
&apos;//	Method. code EditToBridge to take edit spreadsheet and move upward
&apos;// to Bridge format:
&apos;// Insert column 0 “OwningParcel”,
&apos;// rename “search/truepeople column H to “SubTerritory”,
&apos;// rename column I to CongTerrID,
&apos;// delete column J moving DoNotCall and RSO over 1 left;
&apos;// fill column 0 with OwningParcel from header;
&apos;// fill SubTerritory and CongTerrID with fields from header


&apos;//	constants.
const COL_PARCEL=0		&apos;// &quot;OwningParcel&quot; column index
const COL_A=0
const COL_B=1
const COL_C=2	
const COL_D=3
const COL_E=4
const COL_G=6			&apos;// column G index
const COL_H=7			&apos;// column H index
const COL_I=8			&apos;// column I index
const COL_J=9			&apos;// column J index
const COL_K=10			&apos;// column K index (DoNotCall)
const COL_L=11			&apos;// column L index (RSO)
const COL_M=12			&apos;// column M index (Foreign)
const COL_N=13			&apos;// column N index (RecordDate)
const COL_O=14			&apos;// column O index (X-Pending)
const ROW_1=0
const ROW_2=1
const ROW_3=2
const ROW_4=3
const ROW_HEADING=4		&apos;// headings row index
const LJUST=1		&apos;// left-justify HoriJustify				&apos;// mod052020
const CJUST=2		&apos;// center HoriJustify						&apos;// mod052020
const RJUST=3		&apos;// right-justify HoriJustify				&apos;// mod052320
const MDYY=30		&apos;// &apos;M/D/YY&apos; format value

&apos;//	local variables.
Dim oDoc As Object
Dim oSheet As Object
Dim NewColumn As Object
dim oSel as Object
dim iSheetIx as integer
dim oRange as Object
dim lThisRow as long		&apos;// current row selected on sheet
dim oMrgRange	As Object	&apos;// merge range

dim oCell	As Object		&apos;// cell working on
dim i		As Integer		&apos;// loop index
dim sPropID	As String		&apos;// property ID
dim sSubTerr	As String	&apos;// subterritory
dim sCongTerr	As String	&apos;// cong terr ID
dim lRowCount	As Long		&apos;// row count of addresses
dim dDate		As Double	&apos;// date value

	&apos;// code.
	ON ERROR GoTo ErrorHandler
	oDoc = ThisComponent
	oSel = oDoc.getCurrentSelection()
	oRange = oSel.RangeAddress
	iSheetIx = oRange.Sheet
	oSheet = oDoc.Sheets(iSheetIx)
	
	&apos;// delete columns H-J
	oSheet.Columns.removeByIndex(COL_H,3)

if true then
  GoTo Skip3
endif
	&apos;// delete columns H, I, search columns 
	oSheet.Columns.removeByIndex(COL_H,2)
	
	&apos;// insert 2 columns at H for SubTerritory and CongTerr ID
	oSheet.Columns.insertByIndex(COL_H,2)
Skip3:

if true then
  GoTo Skip2
endif	
	&apos;// insert 1 column at A for OwningParcel
	oSheet.Columns.insertByIndex(COL_PARCEL,1)
Skip2:

	&apos;// set sheet type field and headings
	oCell = oSheet.getCellByPosition(COL_H, ROW_1)
	oCell.String = &quot;Admin-Bridge formatted sheet&quot;

	SetBridgeHeadings()
	
if true then
	GoTo NewCode
endif

	&apos;// insert column at index 0 for &quot;OwningParcel&quot;
	oSheet.Columns.insertByIndex(COL_PARCEL,1)
	
	&apos;// delete column J (search whitepages, index 9)
	oSheet.Columns.removeByIndex(COL_J,1)

	&apos;// remove columns I, J and replace with 2 new columns
	oSheet.Columns.removeByIndex(COL_I,2)
	oSheet.Columns.insertByIndex(COL_I,2)

	&apos;// set sheet type field and headings
	oCell = oSheet.getByPosition(COL_H, ROW_1)
	oCell.String = &quot;Admin-Bridge formatted sheet&quot;
	oCell = oSheet.getCellByPosition(COL_J, ROW_4)
	oCell.String = &quot;&quot;
	SetBridgeHeadings()

NewCode:	
if true then
	GoTo Skip1
endif

	&apos;// correct column headings
	&apos;// set OwningParcel heading
	oCell = oSheet.getCellByPosition(COL_PARCEL, ROW_HEADING)
	oCell.String = &quot;OwningParcel&quot;
	oCell.HoriJustify = CJUST

	&apos;// set SubTerritory heading
	oCell = oSheet.getCellByPosition(COL_I, ROW_HEADING)
	oCell.String = &quot;SubTerritory&quot;
	oCell.HoriJustify = CJUST
	
	&apos;// set CongTerrID heading
	oCell = oSheet.getCellByPosition(COL_I+1, ROW_HEADING)
	oCell.String = &quot;CongTerrID&quot;
	oCell.HoriJustify = CJUST
&apos;	SetColWidth(COL_I, 0.9)
&apos;	SetColWidth(COL_J, 0.9)
	SetTerrWidths()		&apos;// also RecordDate

	&apos;// set DoNotCall heading (K)
	
	&apos;// set RSO heading (L)
	
	&apos;// set Foreign heading (M)
	oCell = oSheet.getCellByPosition(COL_M, ROW_HEADING)
	oCell.String = &quot;Foreign&quot;
	oCell.HoriJustify = CJUST
	
	
	&apos;// set RecordDate heading
	oCell = oSheet.getCellByPosition(COL_N, ROW_HEADING)
	oCell.String = &quot;RecordDate&quot;
	oCell.HoriJustify = CJUST

	&apos;// set X-Pending heading.
	oCell = oSheet.getCellByPosition(COL_O, ROW_HEADING)
	oCell.String = &quot;X-Pending&quot;
	oCell.HoriJustify = CJUST
Skip1:
	
	&apos;// Insure all headings Bold.
	BoldHeadings()

if true then
  GoTo Skip5
endif	
	&apos;// move B1 through G3 to A1
	oMrgRange = oRange
	oMrgRange.StartColumn = COL_B
	oMrgRange.EndColumn = COL_G
	oMrgRange.StartRow = ROW_1
	oMrgRange.EndRow = ROW_3
dim oTarget as new com.sun.star.table.CellAddress
	oTarget.Sheet = oRange.Sheet
	oTarget.Column = COL_A
	oTarget.Row = ROW_1
	oSheet.moveRange(oTarget,oMrgRange)

	&apos;// move B4 through E4 to A4
	oMrgRange.StartColumn = COL_B
	oMrgRange.EndColumn = COL_E
	oMrgRange.StartRow = ROW_4
	oMrgRange.EndRow = ROW_4
	oTarget.Column = COL_A
	oTarget.Row = ROW_4
	oSheet.moveRange(oTarget,oMrgRange)
Skip5:
	
	&apos;// right-justify A2-A4
	oCell = oSheet.getCellByPosition(COL_A, ROW_2)
	oCell.HoriJustify = RJUST
	oCell = oSheet.getCellByPosition(COL_A, ROW_3)
	oCell.HoriJustify = RJUST
	oCell = oSheet.getCellByPosition(COL_A, ROW_4)
	oCell.HoriJustify = RJUST

	&apos;// set row count for following loop(s)
	oCell =	oSheet.getCellByPosition(COL_B, ROW_2)
	lRowCount = oCell.Value
	
if true then
  GoTo Skip4
endif
	&apos;// fill column A with property id from E1
	&apos;// B2.Value = row count
	oCell =	oSheet.getCellByPosition(COL_E, ROW_1)
	sPropID = oCell.String
	oCell =	oSheet.getCellByPosition(COL_B, ROW_2)
	lRowCount = oCell.Value
	lThisRow = ROW_HEADING
	for i = 0 to lRowCount-1
		lThisRow = lThisRow + 1
		oCell =	oSheet.getCellByPosition(COL_A, lThisRow)
		oCell.String = sPropID
	next i	

	&apos;// fill column I with SubTerritory from B4
	oCell =	oSheet.getCellByPosition(COL_B, ROW_4)
	sSubTerr = oCell.String
	lThisRow = ROW_HEADING
	for i = 0 to lRowCount-1
		lThisRow = lThisRow + 1
		oCell =	oSheet.getCellByPosition(COL_I, lThisRow)
		oCell.String = sSubTerr
	next i	
	
	&apos;// fill column J with CongTerrID from D4
	oCell =	oSheet.getCellByPosition(COL_D, ROW_4)
	sCongTerr = oCell.String
	lThisRow = ROW_HEADING
	for i = 0 to lRowCount-1
		lThisRow = lThisRow + 1
		oCell =	oSheet.getCellByPosition(COL_J, lThisRow)
		oCell.String = sCongTerr
	next i	
Skip4:

	&apos;// fill column M with RecordDate from C2
	oCell =	oSheet.getCellByPosition(COL_C, ROW_2)
	dDate = oCell.Value
	lThisRow = ROW_HEADING
	for i = 0 to lRowCount-1
		lThisRow = lThisRow + 1
		oCell =	oSheet.getCellByPosition(COL_M, lThisRow)
		oCell.setValue(dDate)
		oCell.NumberFormat = MDYY
		oCell.HoriJustify = CJUST
	next i	
	
NormalExit:
	exit sub
	
ErrorHandler:
	msgBox(&quot;EditToBridge - unprocessed error.&quot;)
	GoTo NormalExit
end sub		&apos;// end EditToBridge		9/30/20
&apos;/**/


&apos;// EditToSearch.bas
&apos;//---------------------------------------------------------------
&apos;// EditToSearch - Convert Admin-Edit to Pub-Search sheet.
&apos;//		2/6/31.		wmk.	15:00
&apos;//---------------------------------------------------------------

public sub EditToSearch()

&apos;//	Usage.	macro call or
&apos;//			call EditToSearch()
&apos;//
&apos;// Entry.	user selection is Admin-Edit formatted sheet
&apos;//	OwningParcel  UnitAddress  Resident1 Resident2 Phone1 Phone2 RUPhone
&apos;//			A			B			C		D		  E		 F		G	
&apos;// truepeople     411     whitepages SubTerr CongTerr DoNotCall RSO Foreign  RecordDate
&apos;//		H			I			J		 K		  L			M	   N    O       P
&apos;//
&apos;//
&apos;//	Exit.	produces a &quot;Pub-Search&quot; formatted sheet with the following fields:
&apos;//        A    	B      C       D      E     F    		G		   H		I
&apos;//		Address  Name1  Name2   Phone1  Phone2 RU/Phone	 DoNotCall	Foreign	Personal/Notes
&apos;//[source] B      C	  D		   E	  F	        G          M       O		-
&apos;//
&apos;// Calls.	BoldHeadings, ForceRecalc, SetTerrWidths,
&apos;//			SetSelection, MergeOwnerCells, MergeStreetsCells,
&apos;//			MergeSheetType
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	2/6/21.		wmk.	original code
&apos;//
&apos;// Admin-Edit sheet fields.
&apos;//		9/7/20. (lines preceded by #s are SplitTable fields)
&apos;//								source-column	target-column
&apos;//0|OwningParcel|TEXT|1||0			A				-
&apos;//1|UnitAddress|TEXT|1||0			B				D
&apos;//2|Resident1|TEXT|0||0			C				B
&apos;//3|Resident2|TEXT|0||0			D				C
&apos;//4|Phone1|TEXT|0||0				E				D
&apos;//5|Phone2|TEXT|0||0				F				E
&apos;//6|RefUSA-Phone|TEXT|0||0			G				F
&apos;//7|truepeople hyperlink			H				-
&apos;//8|411 hyperlink					I				-
&apos;//9|whitepages hyperlink			J				-
&apos;//10|SubTerritory|TEXT|0||0		K				-
&apos;//11|CongTerrID|TEXT|0||0			L				-
&apos;//12|DoNotCall|INTEGER|0|0|0		M				G
&apos;//13|RSO|INTEGER|0|0|0				N				-
&apos;//14|Foreign|INTEGER|0|0|0			O				H
&apos;//15|RecordDate|REAL|0|0|0			P
&apos;//16|X-Pending|INTEGER|0|0|0		R
&apos;//
&apos;// Method.
&apos;//		remove columns K-R

&apos;//	constants.
const COL_NAME1=1		&apos;// column B is Name1 column
const COL_A=0
const COL_B=1
const COL_C=2	
const COL_D=3
const COL_E=4
const COL_F=5
const COL_G=6			&apos;// column G index
const COL_H=7			&apos;// column H index
const COL_I=8			&apos;// column I index
const COL_J=9			&apos;// column J index
const COL_K=10			&apos;// column K index
const COL_L=11			&apos;// column L index 
const COL_M=12			&apos;// column M index (DoNotCall)
const COL_N=13			&apos;// column N index (RSO)
const COL_O=14			&apos;// column O index (Foreign)
const ROW_1=0
const ROW_2=1
const ROW_3=2
const ROW_4=3
const ROW_HEADING=4		&apos;// headings row index
const LJUST=1		&apos;// left-justify HoriJustify				&apos;// mod052020
const CJUST=2		&apos;// center HoriJustify						&apos;// mod052020
const RJUST=3		&apos;// right-justify HoriJustify				&apos;// mod052320
const MDYY=30		&apos;// &apos;M/D/YY&apos; format value
const INCH = 2540	&apos;// millimeters in 1 inch
const ONEP75 = INCH*1.75
const PT35 = INCH*.35
const ONEP35 = INCH*1.35

&apos;//	local variables.
Dim oDoc As Object
Dim oSheet As Object
Dim NewColumn As Object
dim oSel as Object
dim iSheetIx as integer
dim oRange as Object
dim lThisRow as long		&apos;// current row selected on sheet
dim oMrgRange	As Object	&apos;// merge range

dim oCell	As Object		&apos;// cell working on
dim oCell2	As Object		&apos;// cell related cell to oCell
dim i		As Integer		&apos;// loop index
dim sPropID	As String		&apos;// property ID
dim sSubTerr	As String	&apos;// subterritory
dim sCongTerr	As String	&apos;// cong terr ID
dim lRowCount	As Long		&apos;// row count of addresses
dim dDate		As Double	&apos;// date value
dim sCityStZip	As String	&apos;// concatenated City, State, Zip
dim sNotes		As String	&apos;// notes field
dim	nCols		As Integer	&apos;// column count to remove
dim sFormula	As String	&apos;// COUNTA formula from B2
dim bForeign	As Boolean
dim bDoNotCall	As Boolean

dim nSearchColWidths(8) AS Integer

	&apos;// code.
	ON ERROR GoTo ErrorHandler
	oDoc = ThisComponent
	oSel = oDoc.getCurrentSelection()
	oRange = oSel.RangeAddress
	iSheetIx = oRange.Sheet
	oSheet = oDoc.Sheets(iSheetIx)
	oCell =	oSheet.getCellByPosition(COL_B, ROW_2)
	lRowCount = oCell.Value

&apos;//	Remove column A after moving header.
&apos;//		Move header A1-H4 to B1
	oCell = oSheet.getCellByPosition(COL_B, ROW_2)
	sFormula = oCell.getFormula()					&apos;// save B2 formula
	oMrgRange = oRange
	oMrgRange.StartColumn = COL_A
	oMrgRange.EndColumn = COL_H
	oMrgRange.StartRow = ROW_1
	oMrgRange.EndRow = ROW_4
dim oTarget as new com.sun.star.table.CellAddress
	oTarget.Sheet = oRange.Sheet
	oTarget.Column = COL_B
	oTarget.Row = ROW_1
	oSheet.moveRange(oTarget,oMrgRange)

&apos;//		Remove column A, then restore formula in B2
	oSheet.Columns.removeByIndex(COL_A, 1) 
	oCell = oSheet.getCellByPosition(COL_B, ROW_2)
	oCell.setFormula(sFormula)


&apos;//		Remove column J - Q.
	oSheet.Columns.removeByIndex(COL_J, 9) 

&apos;//		Center &quot;H&quot; column E, and Unit column B.

	oSheet.Columns(COL_B).HoriJustify = CJUST
	oSheet.Columns(COL_E).HoriJustify = CJUST

&apos;//	set up column widths array.	
	nSearchColWidths(0) = 1.75*INCH
	nSearchColWidths(1) = 1.0*INCH
	nSearchColWidths(2) = 1.75*INCH
	nSearchColWidths(3) = 1.0*INCH
	nSearchColWidths(4) = 0.35*INCH
	nSearchColWidths(5) = 1.0*INCH
	nSearchColWidths(6) = 1.35*INCH
	nSearchColWidths(7) = 1.35*INCH
	nSearchColWidths(8) = 1.35*INCH
	SetColWidths(nSearchColWidths())

&apos;//		Change A heading to &quot;Address&quot;
&apos;//		col B heading to &quot;Unit&quot;
&apos;//		col C heading to &quot;Name&quot;
	oCell = oSheet.getCellByPosition(COL_A, ROW_HEADING)
	oCell.String = &quot;Address&quot;
	oCell.HoriJustify = CJUST
	oCell = oSheet.getCellByPosition(COL_B, ROW_HEADING)
	oCell.String = &quot;Unit&quot;
	oCell.HoriJustify = CJUST
	oCell = oSheet.getCellByPosition(COL_C, ROW_HEADING)
	oCell.String = &quot;Name&quot;
	oCell.HoriJustify = CJUST
	oCell = oSheet.getCellByPosition(COL_G, ROW_HEADING-1)
	oCell.String = &quot;search&quot;
	oCell.HoriJustify = CJUST

	
&apos;//		set H1 = &quot;Pub-Search formatted sheet&quot;
	&apos;// merge H1-J1 SheetType
	MergeSheetType()
	
	oCell = oSheet.getCellByPosition(COL_H, ROW_1)
	oCell.String = &quot;Pub-Search formatted sheet&quot;
	oCell.HoriJustify = CJUST

	SetGridLand()
	oCell = oSheet.getCellByPosition(COL_D, ROW_4)
	sTerrID = trim(oCell.String)
	sSheetName = &quot;Terr&quot; + sTerrID + &quot;_Search&quot;
	RenameSheet(sSheetName)
	SaveQSearchTerr()			&apos;// save workbook as SearchTerr


if true then GOTO NormalExit

	oCell = oSheet.getCellByPosition(COL_F, ROW_HEADING-1)
	oCell.String = &quot;RefUSA&quot;
	oCell.HoriJustify = CJUST

&apos;//		set I column heading to &quot;Personal/Notes&quot;
	oCell = oSheet.getCellByPosition(COL_I, ROW_HEADING-1)
	oCell.String = &quot;Personal&quot;
	oCell.HoriJustify = CJUST
	oCell = oSheet.getCellByPosition(COL_I, ROW_HEADING)
	oCell.String = &quot;Notes&quot;
	oCell.HoriJustify = CJUST
	SetColWidth(COL_I, 2.0)
	
	&apos;// set column widths
	SetTerrWidths()

	&apos;// merge owner name cells back together
	MergeOwnerCells()
	
	&apos;// merge Streets/Addrs cells back together
&apos;	MergeStreetsCells()

	&apos;// for all rows, check DoNotCall/Foriegn and change Resident1 name to &quot;DO NOT CALL&quot;
	lThisRow = ROW_HEADING
	for i = 0 to lRowCount-1
		lThisRow = lThisRow + 1
		oCell = oSheet.getCellByPosition(COL_F, lThisRow)
		oCell2 = oSheet.getCellByPosition(COL_G, lThisRow)
		bForeign = (len(trim(oCell2.String)) &gt; 0)
		bDoNotCall = (len(trim(oCell.String)) &gt; 0)
		if bForeign then
			oCell = oSheet.getCellByPosition(COL_NAME1, lThisRow)
			oCell.String = &quot;Foreign Language - Do not call&quot;
dim oCols As Object
			oCols = oSheet.Columns
			oCols(COL_NAME1).setPropertyValue(&quot;Width&quot;, 2540*2)
		elseif bDoNotCall then
			oCell = oSheet.getCellByPosition(COL_NAME1, lThisRow)
			oCell.String = &quot;DO NOT CALL&quot;
		endif
		
	next i
	
	&apos;// force recalculation
	ForceRecalc()
	
	&apos;// restore selection to entry place
	SetSelection(oRange)
	
NormalExit:
	exit sub

ErrorHandler:
	msgbox(&quot;EditToSearch - unprocessed error.&quot;)
	GoTo NormalExit
	
end sub		&apos;// end EditToSearch		2/6/21
&apos;/**/


&apos;// EditToSearch3.bas
&apos;//---------------------------------------------------------------
&apos;// EditToSearch3 - Convert Admin-Edit to Pub-Search sheet.
&apos;//		7/13/21.		wmk.	12:56
&apos;//---------------------------------------------------------------

public sub EditToSearch3()

&apos;//	Usage.	macro call or
&apos;//			call EditToSearc3()
&apos;//
&apos;// Entry.	user selection is Admin-Edit formatted sheet
&apos;//	OwningParcel  UnitAddress Unit Resident1 Phone1 H  RUPhone
&apos;//			A			B		C		D	    E	F     G	
&apos;// truepeople     411     whitepages SubTerr CongTerr DoNotCall RSO Foreign  RecordDate
&apos;//		H			I			J		 K		  L			M	   N    O       P
&apos;//	SitusAddress PropUse  DelPending
&apos;//		Q			R		  S
&apos;//
&apos;//	Exit.	focus on QTerrxxx.ods.Terrxxx_Searchnn worksheet.
&apos;//
&apos;//	produces a &quot;Pub-Search&quot; formatted sheet with the following fields:
&apos;//  A      B    	C      C       D      E     	F    		G		 H	  I	  J	
&apos;//	 H    Address  Unit   Name   Phone1  RefUSA fastpeople	truepeople	411	 DNC  FL
&apos;//  F	     B      C	  D		   E	  F	                       			  M   O
&apos;//
&apos;//	Personal/Notes
&apos;//
&apos;// Calls.	BoldHeadings, ForceRecalc, SetTerrWidths,
&apos;//			SetSelection, MergeOwnerCells, MergeStreetsCells,
&apos;//			MergeSheetType, SetHdrSumFormula4
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	2/6/21.		wmk.	original code
&apos;// 2/15/21.	wmk.	mod to move column H to A; change to simplify
&apos;// 					header with same code as BridgeToTerr.
&apos;// 2/27/21.	wmk.	bug fixes sTerrID, sSheet, sCity not explcitly
&apos;//						declared; dim oCols inside loop moved outside;
&apos;//						name change to EditToSearch3 for version clarity
&apos;//						SetHdrSumFormula3 to fix Record Count in B2;
&apos;//						documentation updated; columns widths array
&apos;//						expanded to 10 to include DNC and FL columns.
&apos;// 3/3/21.		wmk.	bug fix; &quot;search&quot; lingering over column I; change
&apos;//						to call SetHdrSumFormula4
&apos;//	3/14/21.	wmk.	verify sheet is type Edit before proceeding.
&apos;// 7/13/21.	wmk.	non-error msgboxes commented to facilitate batch
&apos;//						processing.
&apos;//
&apos;// Admin-Edit sheet fields.
&apos;//		9/7/20. (lines preceded by #s are SplitTable fields)
&apos;//								source-column	target-column
&apos;//0|OwningParcel|TEXT|1||0			A				-
&apos;//1|UnitAddress|TEXT|1||0			B				D
&apos;//2|Resident1|TEXT|0||0			C				B
&apos;//3|Resident2|TEXT|0||0			D				C
&apos;//4|Phone1|TEXT|0||0				E				D
&apos;//5|Phone2|TEXT|0||0				F				E
&apos;//6|RefUSA-Phone|TEXT|0||0			G				F
&apos;//7|truepeople hyperlink			H				-
&apos;//8|411 hyperlink					I				-
&apos;//9|whitepages hyperlink			J				-
&apos;//10|SubTerritory|TEXT|0||0		K				-
&apos;//11|CongTerrID|TEXT|0||0			L				-
&apos;//12|DoNotCall|INTEGER|0|0|0		M				G
&apos;//13|RSO|INTEGER|0|0|0				N				-
&apos;//14|Foreign|INTEGER|0|0|0			O				H
&apos;//15|RecordDate|REAL|0|0|0			P
&apos;//16|X-Pending|INTEGER|0|0|0		R
&apos;//
&apos;// Method.
&apos;//		remove columns K-R

&apos;//	constants.
const COL_NAME1=3		&apos;// column D is Name1 column
const COL_A=0			&apos;// H
const COL_B=1			&apos;// Address
const COL_C=2			&apos;// Unit
const COL_D=3			&apos;// Name
const COL_E=4
const COL_F=5
const COL_G=6			&apos;// column G index
const COL_H=7			&apos;// column H index
const COL_I=8			&apos;// column I index
const COL_J=9			&apos;// column J index
const COL_K=10			&apos;// column K index
const COL_L=11			&apos;// column L index 
const COL_M=12			&apos;// column M index (DoNotCall)
const COL_N=13			&apos;// column N index (RSO)
const COL_O=14			&apos;// column O index (Foreign)
const ROW_1=0
const ROW_2=1
const ROW_3=2
const ROW_4=3
const ROW_HEADING=4		&apos;// headings row index
const LJUST=1		&apos;// left-justify HoriJustify				&apos;// mod052020
const CJUST=2		&apos;// center HoriJustify						&apos;// mod052020
const RJUST=3		&apos;// right-justify HoriJustify				&apos;// mod052320
const MDYY=30		&apos;// &apos;M/D/YY&apos; format value
const INCH = 2540	&apos;// millimeters in 1 inch
const ONEP75 = INCH*1.75
const PT35 = INCH*.35
const ONEP35 = INCH*1.35

&apos;//	local variables.
Dim oDoc As Object
Dim oSheet As Object
Dim NewColumn As Object
dim oSel as Object
dim iSheetIx as integer
dim oRange as Object
dim lThisRow as long		&apos;// current row selected on sheet
dim oMrgRange	As Object	&apos;// merge range

dim oCell	As Object		&apos;// cell working on
dim oCell2	As Object		&apos;// cell related cell to oCell
dim i		As Integer		&apos;// loop index
dim sPropID	As String		&apos;// property ID
dim sSubTerr	As String	&apos;// subterritory
dim sCongTerr	As String	&apos;// cong terr ID
dim lRowCount	As Long		&apos;// row count of addresses
dim dDate		As Double	&apos;// date value
dim sCityStZip	As String	&apos;// concatenated City, State, Zip
dim sNotes		As String	&apos;// notes field
dim	nCols		As Integer	&apos;// column count to remove
dim sFormula	As String	&apos;// COUNTA formula from B2
dim bForeign	As Boolean
dim bDoNotCall	As Boolean
dim sTerrID		As String	&apos;// territory ID
dim sSheetName	As String	&apos;// new sheet name
dim sCity		As String	&apos;// city

dim nSearchColWidths(10) AS Integer

	&apos;// code.
	ON ERROR GoTo ErrorHandler
	oDoc = ThisComponent
	oSel = oDoc.getCurrentSelection()
	oRange = oSel.RangeAddress
	iSheetIx = oRange.Sheet
	oSheet = oDoc.Sheets(iSheetIx)
	
	&apos;// verify that is Edit sheet before proceeding.
dim sCurrName		As String	&apos;// sheet current name
dim bIsEdit			As Boolean	&apos;// is Edit sheet flag
	sCurrName = oSheet.getName()
	bIsEdit = InStr(sCurrName, &quot;Edit&quot;) &gt; 0
	
	if bIsEdit then
&apos;		msgbox(&quot;Sheet is type Edit... proceeding&quot;)
	else
		msgbox(&quot;Sheet not recogonized as Edit.. no conversion&quot;)
		GoTo NormalExit
	endif

	oCell =	oSheet.getCellByPosition(COL_B, ROW_2)
	lRowCount = oCell.Value

if true then
	GoTo Skip1
endif
&apos;//	Remove column A after moving header.
&apos;//		Move header A1-H4 to B1
	oCell = oSheet.getCellByPosition(COL_B, ROW_2)
	sFormula = oCell.getFormula()					&apos;// save B2 formula
	oMrgRange = oRange
	oMrgRange.StartColumn = COL_A
	oMrgRange.EndColumn = COL_H
	oMrgRange.StartRow = ROW_1
	oMrgRange.EndRow = ROW_4
dim oTarget as new com.sun.star.table.CellAddress
	oTarget.Sheet = oRange.Sheet
	oTarget.Column = COL_B
	oTarget.Row = ROW_1
	oSheet.moveRange(oTarget,oMrgRange)

&apos;//		Remove column A, then restore formula in B2
	oSheet.Columns.removeByIndex(COL_A, 1) 
	oCell = oSheet.getCellByPosition(COL_B, ROW_2)
	oCell.setFormula(sFormula)
	
Skip1:
	&apos;// Rename column A &quot;H&quot;.
	oCell = oSheet.getCellByPosition(COL_A, ROW_HEADING)
	oCell.String = &quot;H&quot;
	
	&apos;// copy all information from column F to column A.
	&apos;// all information from column G to column F.
	lThisRow = ROW_HEADING
	for i = 0 to lRowCount
		lThisRow = lThisRow + 1
		oCell = oSheet.getCellByPosition(COL_F, lThisRow)
		oCell2 = oSheet.getCellByPosition(COL_A, LThisRow)
		oCell2.String = oCell.String
		oCell2 = oSheet.getCellByPosition(COL_G, lThisRow)
		oCell.String = oCell2.String
	next i

	&apos;// set G search prompt to &apos;fastpeople&apos;.
	oCell = oSheet.getCellByPosition(COL_G, ROW_HEADING)
	oCell.String = &quot;fastpeople&quot;
	
&apos;//		Remove column J - L.
	oSheet.Columns.removeByIndex(COL_J, 3)
	
	&apos;// now remove column K (RSO).
	oSheet.Columns.removeByIndex(COL_K, 1)
	
	&apos;// now remove columns L - P.
	oSheet.Columns.removeByIndex(COL_L,4)
	 

&apos;//		Center &quot;H&quot; column A, and Unit column C.

	oSheet.Columns(COL_C).HoriJustify = CJUST
	oSheet.Columns(COL_A).HoriJustify = CJUST

&apos;//	set up column widths array.
	nSearchColWidths(0) = 0.35*INCH
	nSearchColWidths(1) = 1.75*INCH
	nSearchColWidths(2) = 1.0*INCH
	nSearchColWidths(3) = 1.75*INCH
	nSearchColWidths(4) = 1.0*INCH
&apos;	nSearchColWidths(4) = 0.35*INCH
	nSearchColWidths(5) = 1.0*INCH
	nSearchColWidths(6) = 1.35*INCH
	nSearchColWidths(7) = 1.35*INCH
	nSearchColWidths(8) = 1.35*INCH
	nSearchColWidths(9) = 0.35*INCH
	nSearchColWidths(10) = 0.35*INCH
	SetColWidths(nSearchColWidths())

&apos;//		Change B heading to &quot;Address&quot;
&apos;//		col C heading to &quot;Unit&quot;
&apos;//		col D heading to &quot;Name&quot;
	oCell = oSheet.getCellByPosition(COL_B, ROW_HEADING)
	oCell.String = &quot;Address&quot;
	oCell.HoriJustify = CJUST
	oCell = oSheet.getCellByPosition(COL_C, ROW_HEADING)
	oCell.String = &quot;Unit&quot;
	oCell.HoriJustify = CJUST
	oCell = oSheet.getCellByPosition(COL_D, ROW_HEADING)
	oCell.String = &quot;Name&quot;
	oCell.HoriJustify = CJUST
	oCell = oSheet.getCellByPosition(COL_G, ROW_HEADING-1)
	oCell.String = &quot;search&quot;
	oCell.HoriJustify = CJUST

	
&apos;//		set H1 = &quot;Pub-Search formatted sheet&quot;
	&apos;// merge H1-J1 SheetType
	MergeSheetType()
	
	oCell = oSheet.getCellByPosition(COL_H, ROW_1)
	oCell.String = &quot;Pub-Search formatted sheet&quot;
	oCell.HoriJustify = CJUST

	oCell = oSheet.getCellByPosition(COL_D, ROW_4)
	sTerrID = trim(oCell.String)
	sSheetName = &quot;Terr&quot; + sTerrID + &quot;_Search&quot;
	RenameSheet(sSheetName)
&apos;	SaveQSearchTerr()			&apos;// save workbook as SearchTerr



	oCell = oSheet.getCellByPosition(COL_F, ROW_HEADING)
	oCell.String = &quot;RefUSA&quot;
	oCell.HoriJustify = CJUST

&apos;//		set J column heading to &quot;DNC&quot;, K heading to &quot;FL&quot;
	oCell = oSheet.getCellByPosition(COL_J, ROW_HEADING)
	oCell.String = &quot;DNC&quot;
	oCell.HoriJustify = CJUST
	SetColWidth(COL_J, 0.35)
	oCell = oSheet.getCellByPosition(COL_K, ROW_HEADING)
	oCell.String = &quot;FL&quot;
	oCell.HoriJustify = CJUST
	SetColWidth(COL_K, 0.35)
if true then GoTo CheckDNC
	
	&apos;// set column widths
	SetTerrWidths()

	&apos;// merge owner name cells back together
	MergeOwnerCells()
	
	&apos;// merge Streets/Addrs cells back together
&apos;	MergeStreetsCells()

CheckDNC:
	&apos;// for all rows, check DoNotCall/Foriegn and change Resident1 name to &quot;DO NOT CALL&quot;
dim oCols As Object
	lThisRow = ROW_HEADING
	for i = 0 to lRowCount-1
		lThisRow = lThisRow + 1
		oCell = oSheet.getCellByPosition(COL_J, lThisRow)
		oCell2 = oSheet.getCellByPosition(COL_K, lThisRow)
		bForeign = (len(trim(oCell2.String)) &gt; 0)
		bDoNotCall = (len(trim(oCell.String)) &gt; 0)
		if bForeign then
			oCell = oSheet.getCellByPosition(COL_NAME1, lThisRow)
			oCell.String = &quot;Foreign Language - Do not call&quot;
			oCols = oSheet.Columns
			oCols(COL_NAME1).setPropertyValue(&quot;Width&quot;, 2540*2)
		elseif bDoNotCall then
			oCell = oSheet.getCellByPosition(COL_NAME1, lThisRow)
			oCell.String = &quot;DO NOT CALL&quot;
		endif
		
	next i

if false then
   GoTo Cleanup
endif
	&apos;// tidy up header information
	oCell = oSheet.getCellByPosition(COL_A, 1)
	oCell.String = &quot;&quot;
	SetHdrSumFormula4()		&apos;//  this has to be the COUNTA($B formula
	
	&apos;// merge City and State at B3.
	oCell = oSheet.getCellByPosition(COL_A, 2)
	oCell.String = &quot;&quot;
	oCell = oSheet.getCellByPosition(COL_B, 2)
	sCity = oCell.String
	oCell.String = &quot;City: &quot; &amp; sCity	

    &apos;// merge Territory/Subterritory at D1.
    oCell = oSheet.getCellByPosition(COL_D, 3)
    sCongTerr = oCell.String
    oCell = oSheet.getCellByPosition(COL_B, 3)
    sSubTerr =trim( oCell.String)
    oCell = oSheet.getCellByPosition(COL_D, 0)
    oCell.String = &quot;Territory: &quot; &amp; sCongTerr
    oCell.HoriJustify = LJUST
    if len(sSubTerr) &gt; 0 then
    	oCell.String = oCell.String &amp; &quot;/&quot; &amp; sSubTerr
    endif
    
    &apos;// empty A4-I4 and merge for blank row.
    &apos;// clear A4, C4, D4.
    oCell = oSheet.getCellByPosition(COL_A,ROW_4)
	oCell.String = &quot;&quot;
    oCell = oSheet.getCellByPosition(COL_C,ROW_4)
	oCell.String = &quot;&quot;
    oCell = oSheet.getCellByPosition(COL_D,ROW_4)
	oCell.String = &quot;&quot;
	
dim document   as object
dim dispatcher as object
document   = ThisComponent.CurrentController.Frame
dispatcher = createUnoService(&quot;com.sun.star.frame.DispatchHelper&quot;)
	&apos;// select range A4:I4
	dim args1(0) as new com.sun.star.beans.PropertyValue
	args1(0).Name = &quot;ToPoint&quot;
	args1(0).Value = &quot;$A$4:$I$4&quot;
dim Array(0)  as new com.sun.star.beans.PropertyValue

	dispatcher.executeDispatch(document, &quot;.uno:GoToCell&quot;, &quot;&quot;, 0, args1())
    dispatcher.executeDispatch(document, &quot;.uno:ClearContents&quot;, &quot;&quot;, 0, Array())

    MergeRow4()

	&apos;// select range A4:I4
	dim args2(0) as new com.sun.star.beans.PropertyValue
	args2(0).Name = &quot;ToPoint&quot;
	args2(0).Value = &quot;$D$2:$I$3&quot;
	dispatcher.executeDispatch(document, &quot;.uno:GoToCell&quot;, &quot;&quot;, 0, args2())
    dispatcher.executeDispatch(document, &quot;.uno:ClearContents&quot;, &quot;&quot;, 0, Array())

	MergeHelpArea()		&apos;// there are merged cells, split them
	MergeHelpArea()		&apos;// now merge the cells
	oCell = oSheet.getCellByPosition(COL_D,ROW_2)
	oCell.String = &quot;H = homestead     DNC = do not call     FL = foreign language&quot; _
	   + CHR(13) + CHR(10) + &quot;ALL CAPS = SC county data     Mixed Case = RefUSA data&quot;

	&apos;// clear sheet type area.
	dim args3(0) as new com.sun.star.beans.PropertyValue
	args3(0).Name = &quot;ToPoint&quot;
	args3(0).Value = &quot;$E$1:$G$1&quot;
	dispatcher.executeDispatch(document, &quot;.uno:GoToCell&quot;, &quot;&quot;, 0, args3())
    dispatcher.executeDispatch(document, &quot;.uno:ClearContents&quot;, &quot;&quot;, 0, Array())
	dispatcher.executeDispatch(document, &quot;.uno:ToggleMergeCells&quot;, &quot;&quot;, 0, Array())
    
	args3(0).Name = &quot;ToPoint&quot;
	args3(0).Value = &quot;$H$1:$I$1&quot;
	dispatcher.executeDispatch(document, &quot;.uno:GoToCell&quot;, &quot;&quot;, 0, args3())
    dispatcher.executeDispatch(document, &quot;.uno:ClearContents&quot;, &quot;&quot;, 0, Array())
	dispatcher.executeDispatch(document, &quot;.uno:ToggleMergeCells&quot;, &quot;&quot;, 0, Array())

	args3(0).Name = &quot;ToPoint&quot;
	args3(0).Value = &quot;$E$1:$I$1&quot;
	dispatcher.executeDispatch(document, &quot;.uno:GoToCell&quot;, &quot;&quot;, 0, args3())
	dispatcher.executeDispatch(document, &quot;.uno:ToggleMergeCells&quot;, &quot;&quot;, 0, Array())
	dim args18(0) as new com.sun.star.beans.PropertyValue
	args18(0).Name = &quot;Bold&quot;
	args18(0).Value = true
	dispatcher.executeDispatch(document, &quot;.uno:Bold&quot;, &quot;&quot;, 0, args18())

	oCell = oSheet.getCellByPosition(COL_E, ROW_1)
	oCell.String = &quot;PubSearch&quot;
	
	args18(0).Name = &quot;Bold&quot;
	args18(0).Value = true
	dispatcher.executeDispatch(document, &quot;.uno:Bold&quot;, &quot;&quot;, 0, args18())

&apos;	args(0).Name = &quot;ToPoint&quot;
&apos;	args(0).Value = &quot;$D$1:$D$1&quot;
	dispatcher.executeDispatch(document, &quot;.uno:GoToCell&quot;, &quot;&quot;, 0, args3())
	args18(0).Name = &quot;Bold&quot;
	args18(0).Value = true
	dispatcher.executeDispatch(document, &quot;.uno:Bold&quot;, &quot;&quot;, 0, args18())
	
	&apos;// clear I4 of &quot;search&quot; again...
	oCell = oSheet.getCellByPosition(COL_I, ROW_HEADING-1)
	oCell.String = &quot;&quot;
	
	&apos;// generate hyperlinks.
	GenFLinkM()
&apos;	SetGridLand()

	&apos;// save QTerrxxx.ods.
dim args19()
	dispatcher.executeDispatch(document, &quot;.uno:Save&quot;, &quot;&quot;, 0, args19())
	

Cleanup:		
	&apos;// force recalculation
	ForceRecalc()
	
	&apos;// restore selection to entry place
	SetSelection(oRange)
	&apos;// save QTerrxxx.ods.
dim args20()
	dispatcher.executeDispatch(document, &quot;.uno:Save&quot;, &quot;&quot;, 0, args20())
	
NormalExit:
	exit sub

ErrorHandler:
	msgbox(&quot;EditToSearch3 - unprocessed error.&quot;)
	GoTo NormalExit
	
end sub		&apos;// end EditToSearch3		7/13/21.	12:56
&apos;/**/

&apos;// EditToSearch31.bas
&apos;//---------------------------------------------------------------
&apos;// EditToSearch31 - Convert Admin-Edit to Pub-Search sheet.
&apos;//		3/3/31.		wmk.	23:15
&apos;//---------------------------------------------------------------

public sub EditToSearch31()

&apos;//	Usage.	macro call or
&apos;//			call EditToSearc3()
&apos;//
&apos;// Entry.	user selection is Admin-Edit formatted sheet
&apos;//	OwningParcel  UnitAddress Unit Resident1 Phone1 H  RUPhone
&apos;//			A			B		C		D	    E	F     G	
&apos;// truepeople     411     whitepages SubTerr CongTerr DoNotCall RSO Foreign  RecordDate
&apos;//		H			I			J		 K		  L			M	   N    O       P
&apos;//	SitusAddress PropUse  DelPending
&apos;//		Q			R		  S
&apos;//
&apos;//	Exit.	produces a &quot;Pub-Search&quot; formatted sheet with the following fields:
&apos;//  A      B    	C      C       D      E     	F    		G		 H	  I	  J	
&apos;//	 H    Address  Unit   Name   Phone1  RefUSA fastpeople	truepeople	411	 DNC  FL
&apos;//  F	     B      C	  D		   E	  F	                       			  M   O
&apos;//
&apos;//	Personal/Notes
&apos;//
&apos;// Calls.	BoldHeadings, ForceRecalc, SetTerrWidths,
&apos;//			SetSelection, MergeOwnerCells, MergeStreetsCells,
&apos;//			MergeSheetType, SetHdrSumFormula4
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	2/6/21.		wmk.	original code
&apos;// 2/15/21.	wmk.	mod to move column H to A; change to simplify
&apos;// 					header with same code as BridgeToTerr.
&apos;// 2/27/21.	wmk.	bug fixes sTerrID, sSheet, sCity not explcitly
&apos;//						declared; dim oCols inside loop moved outside;
&apos;//						name change to EditToSearch3 for version clarity
&apos;//						SetHdrSumFormula3 to fix Record Count in B2;
&apos;//						documentation updated; columns widths array
&apos;//						expanded to 10 to include DNC and FL columns.
&apos;// 3/3/21.		wmk.	bug fix; &quot;search&quot; lingering over column I; change
&apos;//						to call SetHdrSumFormula4
&apos;//
&apos;// Admin-Edit sheet fields.
&apos;//		9/7/20. (lines preceded by #s are SplitTable fields)
&apos;//								source-column	target-column
&apos;//0|OwningParcel|TEXT|1||0			A				-
&apos;//1|UnitAddress|TEXT|1||0			B				D
&apos;//2|Resident1|TEXT|0||0			C				B
&apos;//3|Resident2|TEXT|0||0			D				C
&apos;//4|Phone1|TEXT|0||0				E				D
&apos;//5|Phone2|TEXT|0||0				F				E
&apos;//6|RefUSA-Phone|TEXT|0||0			G				F
&apos;//7|truepeople hyperlink			H				-
&apos;//8|411 hyperlink					I				-
&apos;//9|whitepages hyperlink			J				-
&apos;//10|SubTerritory|TEXT|0||0		K				-
&apos;//11|CongTerrID|TEXT|0||0			L				-
&apos;//12|DoNotCall|INTEGER|0|0|0		M				G
&apos;//13|RSO|INTEGER|0|0|0				N				-
&apos;//14|Foreign|INTEGER|0|0|0			O				H
&apos;//15|RecordDate|REAL|0|0|0			P
&apos;//16|X-Pending|INTEGER|0|0|0		R
&apos;//
&apos;// Method.
&apos;//		remove columns K-R

&apos;//	constants.
const COL_NAME1=3		&apos;// column D is Name1 column
const COL_A=0			&apos;// H
const COL_B=1			&apos;// Address
const COL_C=2			&apos;// Unit
const COL_D=3			&apos;// Name
const COL_E=4
const COL_F=5
const COL_G=6			&apos;// column G index
const COL_H=7			&apos;// column H index
const COL_I=8			&apos;// column I index
const COL_J=9			&apos;// column J index
const COL_K=10			&apos;// column K index
const COL_L=11			&apos;// column L index 
const COL_M=12			&apos;// column M index (DoNotCall)
const COL_N=13			&apos;// column N index (RSO)
const COL_O=14			&apos;// column O index (Foreign)
const ROW_1=0
const ROW_2=1
const ROW_3=2
const ROW_4=3
const ROW_HEADING=4		&apos;// headings row index
const LJUST=1		&apos;// left-justify HoriJustify				&apos;// mod052020
const CJUST=2		&apos;// center HoriJustify						&apos;// mod052020
const RJUST=3		&apos;// right-justify HoriJustify				&apos;// mod052320
const MDYY=30		&apos;// &apos;M/D/YY&apos; format value
const INCH = 2540	&apos;// millimeters in 1 inch
const ONEP75 = INCH*1.75
const PT35 = INCH*.35
const ONEP35 = INCH*1.35

&apos;//	local variables.
Dim oDoc As Object
Dim oSheet As Object
Dim NewColumn As Object
dim oSel as Object
dim iSheetIx as integer
dim oRange as Object
dim lThisRow as long		&apos;// current row selected on sheet
dim oMrgRange	As Object	&apos;// merge range

dim oCell	As Object		&apos;// cell working on
dim oCell2	As Object		&apos;// cell related cell to oCell
dim i		As Integer		&apos;// loop index
dim sPropID	As String		&apos;// property ID
dim sSubTerr	As String	&apos;// subterritory
dim sCongTerr	As String	&apos;// cong terr ID
dim lRowCount	As Long		&apos;// row count of addresses
dim dDate		As Double	&apos;// date value
dim sCityStZip	As String	&apos;// concatenated City, State, Zip
dim sNotes		As String	&apos;// notes field
dim	nCols		As Integer	&apos;// column count to remove
dim sFormula	As String	&apos;// COUNTA formula from B2
dim bForeign	As Boolean
dim bDoNotCall	As Boolean
dim sTerrID		As String	&apos;// territory ID
dim sSheetName	As String	&apos;// new sheet name
dim sCity		As String	&apos;// city

dim nSearchColWidths(10) AS Integer

	&apos;// code.
	ON ERROR GoTo ErrorHandler
	oDoc = ThisComponent
	oSel = oDoc.getCurrentSelection()
	oRange = oSel.RangeAddress
	iSheetIx = oRange.Sheet
	oSheet = oDoc.Sheets(iSheetIx)
	oCell =	oSheet.getCellByPosition(COL_B, ROW_2)
	lRowCount = oCell.Value

if true then
	GoTo Skip1
endif
&apos;//	Remove column A after moving header.
&apos;//		Move header A1-H4 to B1
	oCell = oSheet.getCellByPosition(COL_B, ROW_2)
	sFormula = oCell.getFormula()					&apos;// save B2 formula
	oMrgRange = oRange
	oMrgRange.StartColumn = COL_A
	oMrgRange.EndColumn = COL_H
	oMrgRange.StartRow = ROW_1
	oMrgRange.EndRow = ROW_4
dim oTarget as new com.sun.star.table.CellAddress
	oTarget.Sheet = oRange.Sheet
	oTarget.Column = COL_B
	oTarget.Row = ROW_1
	oSheet.moveRange(oTarget,oMrgRange)

&apos;//		Remove column A, then restore formula in B2
	oSheet.Columns.removeByIndex(COL_A, 1) 
	oCell = oSheet.getCellByPosition(COL_B, ROW_2)
	oCell.setFormula(sFormula)
	
Skip1:
	&apos;// Rename column A &quot;H&quot;.
	oCell = oSheet.getCellByPosition(COL_A, ROW_HEADING)
	oCell.String = &quot;H&quot;
	
	&apos;// copy all information from column F to column A.
	&apos;// all information from column G to column F.
	lThisRow = ROW_HEADING
	for i = 0 to lRowCount
		lThisRow = lThisRow + 1
		oCell = oSheet.getCellByPosition(COL_F, lThisRow)
		oCell2 = oSheet.getCellByPosition(COL_A, LThisRow)
		oCell2.String = oCell.String
		oCell2 = oSheet.getCellByPosition(COL_G, lThisRow)
		oCell.String = oCell2.String
	next i

	&apos;// set G search prompt to &apos;fastpeople&apos;.
	oCell = oSheet.getCellByPosition(COL_G, ROW_HEADING)
	oCell.String = &quot;fastpeople&quot;
	
&apos;//		Remove column J - L.
	oSheet.Columns.removeByIndex(COL_J, 3)
	
	&apos;// now remove column K (RSO).
	oSheet.Columns.removeByIndex(COL_K, 1)
	
	&apos;// now remove columns L - P.
	oSheet.Columns.removeByIndex(COL_L,4)
	 

&apos;//		Center &quot;H&quot; column A, and Unit column C.

	oSheet.Columns(COL_C).HoriJustify = CJUST
	oSheet.Columns(COL_A).HoriJustify = CJUST

&apos;//	set up column widths array.
	nSearchColWidths(0) = 0.35*INCH
	nSearchColWidths(1) = 1.75*INCH
	nSearchColWidths(2) = 1.0*INCH
	nSearchColWidths(3) = 1.75*INCH
	nSearchColWidths(4) = 1.0*INCH
&apos;	nSearchColWidths(4) = 0.35*INCH
	nSearchColWidths(5) = 1.0*INCH
	nSearchColWidths(6) = 1.35*INCH
	nSearchColWidths(7) = 1.35*INCH
	nSearchColWidths(8) = 1.35*INCH
	nSearchColWidths(9) = 0.35*INCH
	nSearchColWidths(10) = 0.35*INCH
	SetColWidths(nSearchColWidths())

&apos;//		Change B heading to &quot;Address&quot;
&apos;//		col C heading to &quot;Unit&quot;
&apos;//		col D heading to &quot;Name&quot;
	oCell = oSheet.getCellByPosition(COL_B, ROW_HEADING)
	oCell.String = &quot;Address&quot;
	oCell.HoriJustify = CJUST
	oCell = oSheet.getCellByPosition(COL_C, ROW_HEADING)
	oCell.String = &quot;Unit&quot;
	oCell.HoriJustify = CJUST
	oCell = oSheet.getCellByPosition(COL_D, ROW_HEADING)
	oCell.String = &quot;Name&quot;
	oCell.HoriJustify = CJUST
	oCell = oSheet.getCellByPosition(COL_G, ROW_HEADING-1)
	oCell.String = &quot;search&quot;
	oCell.HoriJustify = CJUST

	
&apos;//		set H1 = &quot;Pub-Search formatted sheet&quot;
	&apos;// merge H1-J1 SheetType
	MergeSheetType()
	
	oCell = oSheet.getCellByPosition(COL_H, ROW_1)
	oCell.String = &quot;Pub-Search formatted sheet&quot;
	oCell.HoriJustify = CJUST

	oCell = oSheet.getCellByPosition(COL_D, ROW_4)
	sTerrID = trim(oCell.String)
	sSheetName = &quot;Terr&quot; + sTerrID + &quot;_Search&quot;
	RenameSheet(sSheetName)
&apos;	SaveQSearchTerr()			&apos;// save workbook as SearchTerr



	oCell = oSheet.getCellByPosition(COL_F, ROW_HEADING)
	oCell.String = &quot;RefUSA&quot;
	oCell.HoriJustify = CJUST

&apos;//		set J column heading to &quot;DNC&quot;, K heading to &quot;FL&quot;
	oCell = oSheet.getCellByPosition(COL_J, ROW_HEADING)
	oCell.String = &quot;DNC&quot;
	oCell.HoriJustify = CJUST
	SetColWidth(COL_J, 0.35)
	oCell = oSheet.getCellByPosition(COL_K, ROW_HEADING)
	oCell.String = &quot;FL&quot;
	oCell.HoriJustify = CJUST
	SetColWidth(COL_K, 0.35)
if true then GoTo CheckDNC
	
	&apos;// set column widths
	SetTerrWidths()

	&apos;// merge owner name cells back together
	MergeOwnerCells()
	
	&apos;// merge Streets/Addrs cells back together
&apos;	MergeStreetsCells()

CheckDNC:
	&apos;// for all rows, check DoNotCall/Foriegn and change Resident1 name to &quot;DO NOT CALL&quot;
dim oCols As Object
	lThisRow = ROW_HEADING
	for i = 0 to lRowCount-1
		lThisRow = lThisRow + 1
		oCell = oSheet.getCellByPosition(COL_J, lThisRow)
		oCell2 = oSheet.getCellByPosition(COL_K, lThisRow)
		bForeign = (len(trim(oCell2.String)) &gt; 0)
		bDoNotCall = (len(trim(oCell.String)) &gt; 0)
		if bForeign then
			oCell = oSheet.getCellByPosition(COL_NAME1, lThisRow)
			oCell.String = &quot;Foreign Language - Do not call&quot;
			oCols = oSheet.Columns
			oCols(COL_NAME1).setPropertyValue(&quot;Width&quot;, 2540*2)
		elseif bDoNotCall then
			oCell = oSheet.getCellByPosition(COL_NAME1, lThisRow)
			oCell.String = &quot;DO NOT CALL&quot;
		endif
		
	next i

if false then
   GoTo Cleanup
endif
	&apos;// tidy up header information
	oCell = oSheet.getCellByPosition(COL_A, 1)
	oCell.String = &quot;&quot;
	SetHdrSumFormula4()		&apos;//  this has to be the COUNTA($B formula
	
	&apos;// merge City and State at B3.
	oCell = oSheet.getCellByPosition(COL_A, 2)
	oCell.String = &quot;&quot;
	oCell = oSheet.getCellByPosition(COL_B, 2)
	sCity = oCell.String
	oCell.String = &quot;City: &quot; &amp; sCity	

    &apos;// merge Territory/Subterritory at D1.
    oCell = oSheet.getCellByPosition(COL_D, 3)
    sCongTerr = oCell.String
    oCell = oSheet.getCellByPosition(COL_B, 3)
    sSubTerr =trim( oCell.String)
    oCell = oSheet.getCellByPosition(COL_D, 0)
    oCell.String = &quot;Territory: &quot; &amp; sCongTerr
    oCell.HoriJustify = LJUST
    if len(sSubTerr) &gt; 0 then
    	oCell.String = oCell.String &amp; &quot;/&quot; &amp; sSubTerr
    endif
    
    &apos;// empty A4-I4 and merge for blank row.
    &apos;// clear A4, C4, D4.
    oCell = oSheet.getCellByPosition(COL_A,ROW_4)
	oCell.String = &quot;&quot;
    oCell = oSheet.getCellByPosition(COL_C,ROW_4)
	oCell.String = &quot;&quot;
    oCell = oSheet.getCellByPosition(COL_D,ROW_4)
	oCell.String = &quot;&quot;
	
dim document   as object
dim dispatcher as object
document   = ThisComponent.CurrentController.Frame
dispatcher = createUnoService(&quot;com.sun.star.frame.DispatchHelper&quot;)
	&apos;// select range A4:I4
	dim args1(0) as new com.sun.star.beans.PropertyValue
	args1(0).Name = &quot;ToPoint&quot;
	args1(0).Value = &quot;$A$4:$I$4&quot;
dim Array(0)  as new com.sun.star.beans.PropertyValue

	dispatcher.executeDispatch(document, &quot;.uno:GoToCell&quot;, &quot;&quot;, 0, args1())
    dispatcher.executeDispatch(document, &quot;.uno:ClearContents&quot;, &quot;&quot;, 0, Array())

    MergeRow4()

	&apos;// select range A4:I4
	dim args2(0) as new com.sun.star.beans.PropertyValue
	args2(0).Name = &quot;ToPoint&quot;
	args2(0).Value = &quot;$D$2:$I$3&quot;
	dispatcher.executeDispatch(document, &quot;.uno:GoToCell&quot;, &quot;&quot;, 0, args2())
    dispatcher.executeDispatch(document, &quot;.uno:ClearContents&quot;, &quot;&quot;, 0, Array())

	MergeHelpArea()		&apos;// there are merged cells, split them
	MergeHelpArea()		&apos;// now merge the cells
	oCell = oSheet.getCellByPosition(COL_D,ROW_2)
	oCell.String = &quot;H = homestead     DNC = do not call     FL = foreign language&quot; _
	   + CHR(13) + CHR(10) + &quot;ALL CAPS = SC county data     Mixed Case = RefUSA data&quot;

	&apos;// clear sheet type area.
	dim args3(0) as new com.sun.star.beans.PropertyValue
	args3(0).Name = &quot;ToPoint&quot;
	args3(0).Value = &quot;$E$1:$G$1&quot;
	dispatcher.executeDispatch(document, &quot;.uno:GoToCell&quot;, &quot;&quot;, 0, args3())
    dispatcher.executeDispatch(document, &quot;.uno:ClearContents&quot;, &quot;&quot;, 0, Array())
	dispatcher.executeDispatch(document, &quot;.uno:ToggleMergeCells&quot;, &quot;&quot;, 0, Array())
    
	args3(0).Name = &quot;ToPoint&quot;
	args3(0).Value = &quot;$H$1:$I$1&quot;
	dispatcher.executeDispatch(document, &quot;.uno:GoToCell&quot;, &quot;&quot;, 0, args3())
    dispatcher.executeDispatch(document, &quot;.uno:ClearContents&quot;, &quot;&quot;, 0, Array())
	dispatcher.executeDispatch(document, &quot;.uno:ToggleMergeCells&quot;, &quot;&quot;, 0, Array())

	args3(0).Name = &quot;ToPoint&quot;
	args3(0).Value = &quot;$E$1:$I$1&quot;
	dispatcher.executeDispatch(document, &quot;.uno:GoToCell&quot;, &quot;&quot;, 0, args3())
	dispatcher.executeDispatch(document, &quot;.uno:ToggleMergeCells&quot;, &quot;&quot;, 0, Array())
	dim args18(0) as new com.sun.star.beans.PropertyValue
	args18(0).Name = &quot;Bold&quot;
	args18(0).Value = true
	dispatcher.executeDispatch(document, &quot;.uno:Bold&quot;, &quot;&quot;, 0, args18())

	oCell = oSheet.getCellByPosition(COL_E, ROW_1)
	oCell.String = &quot;PubSearch&quot;
	
	args18(0).Name = &quot;Bold&quot;
	args18(0).Value = true
	dispatcher.executeDispatch(document, &quot;.uno:Bold&quot;, &quot;&quot;, 0, args18())

	args3(0).Name = &quot;ToPoint&quot;
	args3(0).Value = &quot;$D$1:$D$1&quot;
	dispatcher.executeDispatch(document, &quot;.uno:GoToCell&quot;, &quot;&quot;, 0, args3())
	args18(0).Name = &quot;Bold&quot;
	args18(0).Value = true
	dispatcher.executeDispatch(document, &quot;.uno:Bold&quot;, &quot;&quot;, 0, args18())
	
	&apos;// clear I4 of &quot;search&quot; again...
	oCell = oSheet.getCellByPosition(COL_I, ROW_HEADING-1)
	oCell.String = &quot;&quot;
	
	&apos;// generate hyperlinks.
	GenFLinkM()
	SetGridLand()

Cleanup:		
	&apos;// force recalculation
	ForceRecalc()
	
	&apos;// restore selection to entry place
	SetSelection(oRange)
	
NormalExit:
	exit sub

ErrorHandler:
	msgbox(&quot;EditToSearch3 - unprocessed error.&quot;)
	GoTo NormalExit
	
end sub		&apos;// end EditToSearch31		3/3/21.	23:15
&apos;/**/


&apos;// EditToTerr.bas
&apos;//---------------------------------------------------------------
&apos;// EditToTerr - Convert Admin-Edit to Pub-Territory sheet.
&apos;//		9/13/20.		wmk.	01:05
&apos;//---------------------------------------------------------------

public sub EditToTerr()

&apos;//	Usage.	macro call or
&apos;//			call EditToTerr()
&apos;//
&apos;// Entry.	user selection is Admin-Edit formatted sheet
&apos;//
&apos;//	Exit.	produces a &quot;Pub-Territory&quot; formatted sheet with the following fields:
&apos;//        A    	B      C       D      E     F    		G		   H		I
&apos;//		Address  Name1  Name2   Phone1  Phone2 RU/Phone	 DoNotCall	Foreign	Personal/Notes
&apos;//[source] B      C	  D		   E	  F	        G          M       O		-
&apos;//
&apos;// Calls.	BoldHeadings, ForceRecalc, SetTerrWidths,
&apos;//			SetSelection, MergeOwnerCells, MergeStreetsCells,
&apos;//			MergeSheetType
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	9/11/20.	wmk.	original code
&apos;//	9/12/20.	wmk.	SetTerrWidths call corrected; MergeStreetsCells
&apos;//						call added
&apos;//	9/13/20.	wmk.	changed to leave RefUSA/Phone column
&apos;//						in Territory fields
&apos;//
&apos;// Admin-Edit sheet fields.
&apos;//		9/7/20. (lines preceded by #s are SplitTable fields)
&apos;//								source-column	target-column
&apos;//0|OwningParcel|TEXT|1||0			A				-
&apos;//1|UnitAddress|TEXT|1||0			B				D
&apos;//2|Resident1|TEXT|0||0			C				B
&apos;//3|Resident2|TEXT|0||0			D				C
&apos;//4|Phone1|TEXT|0||0				E				D
&apos;//5|Phone2|TEXT|0||0				F				E
&apos;//6|RefUSA-Phone|TEXT|0||0			G				F
&apos;//	truepeople hyperlink			H				-
&apos;// 411 hyperlink					I				-
&apos;// whitepages hyperlink			J				-
&apos;//7|SubTerritory|TEXT|0||0			K				-
&apos;//8|CongTerrID|TEXT|0||0			L				-
&apos;//9|DoNotCall|INTEGER|0|0|0		M				G
&apos;//10|RSO|INTEGER|0|0|0				N				-
&apos;//11|Foreign|INTEGER|0|0|0			O				H
&apos;//12|RecordDate|REAL|0|0|0			P
&apos;//13|X-Pending|INTEGER|0|0|0
&apos;//
&apos;// Method.
&apos;//		Move header A1-H4 to B1
&apos;//		Remove column A
&apos;//		Change A heading to &quot;Address&quot;
&apos;//		col B heading to &quot;Name1&quot;
&apos;//		col C heading to &quot;Name2&quot;
&apos;//		remove columns G-N
&apos;//		remove column G
&apos;//		set H column heading to &quot;Personal/Notes&quot;
&apos;//		set H1 = &quot;Pub-Territory formatted sheet&quot;

&apos;//	constants.
const COL_NAME1=1		&apos;// column B is Name1 column
const COL_A=0
const COL_B=1
const COL_C=2	
const COL_D=3
const COL_E=4
const COL_F=5
const COL_G=6			&apos;// column G index
const COL_H=7			&apos;// column H index
const COL_I=8			&apos;// column I index
const COL_J=9			&apos;// column J index
const COL_K=10			&apos;// column K index
const COL_L=11			&apos;// column L index 
const COL_M=12			&apos;// column M index (DoNotCall)
const COL_N=13			&apos;// column N index (RSO)
const COL_O=14			&apos;// column O index (Foreign)
const ROW_1=0
const ROW_2=1
const ROW_3=2
const ROW_4=3
const ROW_HEADING=4		&apos;// headings row index
const LJUST=1		&apos;// left-justify HoriJustify				&apos;// mod052020
const CJUST=2		&apos;// center HoriJustify						&apos;// mod052020
const RJUST=3		&apos;// right-justify HoriJustify				&apos;// mod052320
const MDYY=30		&apos;// &apos;M/D/YY&apos; format value

&apos;//	local variables.
Dim oDoc As Object
Dim oSheet As Object
Dim NewColumn As Object
dim oSel as Object
dim iSheetIx as integer
dim oRange as Object
dim lThisRow as long		&apos;// current row selected on sheet
dim oMrgRange	As Object	&apos;// merge range

dim oCell	As Object		&apos;// cell working on
dim oCell2	As Object		&apos;// cell related cell to oCell
dim i		As Integer		&apos;// loop index
dim sPropID	As String		&apos;// property ID
dim sSubTerr	As String	&apos;// subterritory
dim sCongTerr	As String	&apos;// cong terr ID
dim lRowCount	As Long		&apos;// row count of addresses
dim dDate		As Double	&apos;// date value
dim sCityStZip	As String	&apos;// concatenated City, State, Zip
dim sNotes		As String	&apos;// notes field
dim	nCols		As Integer	&apos;// column count to remove
dim sFormula	As String	&apos;// COUNTA formula from B2
dim bForeign	As Boolean
dim bDoNotCall	As Boolean

	&apos;// code.
	ON ERROR GoTo ErrorHandler
	oDoc = ThisComponent
	oSel = oDoc.getCurrentSelection()
	oRange = oSel.RangeAddress
	iSheetIx = oRange.Sheet
	oSheet = oDoc.Sheets(iSheetIx)
	oCell =	oSheet.getCellByPosition(COL_B, ROW_2)
	lRowCount = oCell.Value

&apos;//		Move header A1-H4 to B1
	oCell = oSheet.getCellByPosition(COL_B, ROW_2)
	sFormula = oCell.getFormula()					&apos;// save B2 formula
	oMrgRange = oRange
	oMrgRange.StartColumn = COL_A
	oMrgRange.EndColumn = COL_H
	oMrgRange.StartRow = ROW_1
	oMrgRange.EndRow = ROW_4
dim oTarget as new com.sun.star.table.CellAddress
	oTarget.Sheet = oRange.Sheet
	oTarget.Column = COL_B
	oTarget.Row = ROW_1
	oSheet.moveRange(oTarget,oMrgRange)

&apos;//		Remove column A, then restore formula in B2
	oSheet.Columns.removeByIndex(COL_A, 1) 
	oCell = oSheet.getCellByPosition(COL_B, ROW_2)
	oCell.setFormula(sFormula)

&apos;//		Change A heading to &quot;Address&quot;
&apos;//		col B heading to &quot;Name1&quot;
&apos;//		col C heading to &quot;Name2&quot;
	oCell = oSheet.getCellByPosition(COL_A, ROW_HEADING)
	oCell.String = &quot;Address&quot;
	oCell.HoriJustify = CJUST
	oCell = oSheet.getCellByPosition(COL_B, ROW_HEADING)
	oCell.String = &quot;Name1&quot;
	oCell.HoriJustify = CJUST
	oCell = oSheet.getCellByPosition(COL_C, ROW_HEADING)
	oCell.String = &quot;Name2&quot;
	oCell.HoriJustify = CJUST
	oCell = oSheet.getCellByPosition(COL_F, ROW_HEADING-1)
	oCell.String = &quot;RefUSA&quot;
	oCell.HoriJustify = CJUST

&apos;//		remove columns G-K
	nCols = ASC(&quot;K&quot;) + 1 - ASC(&quot;G&quot;)
	oSheet.Columns.removeByIndex(COL_G, nCols) 

&apos;//		remove column H (RSO)
	oSheet.Columns.removeByIndex(COL_H, 1) 

&apos;//		remove column I (RecordDate)
	oSheet.Columns.removeByIndex(COL_I, 1) 

&apos;//		set I column heading to &quot;Personal/Notes&quot;
	oCell = oSheet.getCellByPosition(COL_I, ROW_HEADING-1)
	oCell.String = &quot;Personal&quot;
	oCell.HoriJustify = CJUST
	oCell = oSheet.getCellByPosition(COL_I, ROW_HEADING)
	oCell.String = &quot;Notes&quot;
	oCell.HoriJustify = CJUST
	SetColWidth(COL_I, 2.0)
	
&apos;//		set H1 = &quot;Pub-Territory formatted sheet&quot;
	&apos;// merge H1-J1 SheetType
	MergeSheetType()
	
	oCell = oSheet.getCellByPosition(COL_H, ROW_1)
	oCell.String = &quot;Pub-Territory formatted sheet&quot;
	oCell.HoriJustify = CJUST

	&apos;// set column widths
	SetTerrWidths()

	&apos;// merge owner name cells back together
	MergeOwnerCells()
	
	&apos;// merge Streets/Addrs cells back together
&apos;	MergeStreetsCells()

	&apos;// for all rows, check DoNotCall/Foriegn and change Resident1 name to &quot;DO NOT CALL&quot;
	lThisRow = ROW_HEADING
	for i = 0 to lRowCount-1
		lThisRow = lThisRow + 1
		oCell = oSheet.getCellByPosition(COL_F, lThisRow)
		oCell2 = oSheet.getCellByPosition(COL_G, lThisRow)
		bForeign = (len(trim(oCell2.String)) &gt; 0)
		bDoNotCall = (len(trim(oCell.String)) &gt; 0)
		if bForeign then
			oCell = oSheet.getCellByPosition(COL_NAME1, lThisRow)
			oCell.String = &quot;Foreign Language - Do not call&quot;
dim oCols As Object
			oCols = oSheet.Columns
			oCols(COL_NAME1).setPropertyValue(&quot;Width&quot;, 2540*2)
		elseif bDoNotCall then
			oCell = oSheet.getCellByPosition(COL_NAME1, lThisRow)
			oCell.String = &quot;DO NOT CALL&quot;
		endif
		
	next i
	
	&apos;// force recalculation
	ForceRecalc()
	
	&apos;// restore selection to entry place
	SetSelection(oRange)
	
NormalExit:
	exit sub

ErrorHandler:
	msgbox(&quot;EditToTerr - unprocessed error.&quot;)
	GoTo NormalExit
	
end sub		&apos;// end EditToTerr		9/13/20
&apos;/**/

&apos;// EditToTSx.bas
&apos;//---------------------------------------------------------------
&apos;// EditToTSx - Convert Admin-Edit to Admin-TSExport sheet.
&apos;//		9/10/20.		wmk.	08:15
&apos;//---------------------------------------------------------------

public sub EditToTSx()

&apos;//	Usage.	macro call or
&apos;//			call EditToTSx()
&apos;//
&apos;// Entry.	user selection is Admin-Edit formatted sheet
&apos;//
&apos;//	Exit.	produces an &quot;Admin-TSExport&quot; formatted sheet with the following fields:
&apos;//      A    B        C            D                E           F
&apos;//		id  name  phone_number street_address  city_state_zip  notes
&apos;//	[source]  C        E			B				B3&apos;FL&apos;C3	M, N, O (foreign)
&apos;//
&apos;// Calls.	BoldHeadings, ForceRecalc, fsConcatCityToZip, SetTSColWidths,
&apos;//			SetSelection
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	9/8/20.		wmk.	original code
&apos;// 9/9/20.		wmk.	modified to move entire header over to column B
&apos;//	9/10/20.	wmk.	added SetTSColWidths call; &quot;DO NOT CALL&quot; set in 
&apos;//						name field of DoNotCalls
&apos;//
&apos;//	Notes. With column A so narrow, much better fit for header to just
&apos;//	move the whole thing over to column B. TSToEdit will move it back.
&apos;//
&apos;// Admin-Edit sheet fields.
&apos;//		9/7/20. (lines preceded by #s are SplitTable fields)
&apos;//								source-column	target-column
&apos;//0|OwningParcel|TEXT|1||0
&apos;//1|UnitAddress|TEXT|1||0			B				D
&apos;//2|Resident1|TEXT|0||0			C				B
&apos;//3|Resident2|TEXT|0||0
&apos;//4|Phone1|TEXT|0||0				E				C
&apos;//5|Phone2|TEXT|0||0
&apos;//6|RefUSA-Phone|TEXT|0||0
&apos;//	truepeople hyperlink
&apos;// 411 hyperlink
&apos;// whitepages hyperlink
&apos;//7|SubTerritory|TEXT|0||0
&apos;//8|CongTerrID|TEXT|0||0
&apos;//9|DoNotCall|INTEGER|0|0|0		M
&apos;//10|RSO|INTEGER|0|0|0				N
&apos;//11|Foreign|INTEGER|0|0|0			O
&apos;//12|RecordDate|REAL|0|0|0			P
&apos;//13|X-Pending|INTEGER|0|0|0
&apos;//
&apos;// Method.
&apos;//		Change A heading to &quot;id&quot;
&apos;//		Concatenate City, State, Zip
&apos;//		Move col B entries to Col D
&apos;//		Change D heading to &quot;street_address&quot;
&apos;//		Move col C entries to col B
&apos;//		Change B heading to  &quot;name&quot;
&apos;//		Move col G  entries to col C (RefUSA phone)
&apos;//		Change C heading to &quot;phone-number&quot;
&apos;//		Row-by-Row
&apos;//		  store concatenated city, state, zip in E
&apos;//		  store &quot;&quot; in A
&apos;//       BuildNote from columns M, N, O
&apos;//		  store note in column F
&apos;//       if C = &quot;Not Available&quot;, store column E in C
&apos;//  	end Row-by-row
&apos;//		remove columns G - P
&apos;//		set H1 = &quot;Admin-TSExport formatted sheet&quot;

&apos;//	constants.
const COL_PARCEL=0		&apos;// &quot;OwningParcel&quot; column index
const COL_A=0
const COL_B=1
const COL_C=2	
const COL_D=3
const COL_E=4
const COL_F=5
const COL_G=6			&apos;// column G index
const COL_H=7			&apos;// column H index
const COL_I=8			&apos;// column I index
const COL_J=9			&apos;// column J index
const COL_K=10			&apos;// column K index
const COL_L=11			&apos;// column L index 
const COL_M=12			&apos;// column M index (DoNotCall)
const COL_N=13			&apos;// column N index (RSO)
const COL_O=14			&apos;// column O index (Foreign)
const ROW_1=0
const ROW_2=1
const ROW_3=2
const ROW_4=3
const ROW_HEADING=4		&apos;// headings row index
const LJUST=1		&apos;// left-justify HoriJustify				&apos;// mod052020
const CJUST=2		&apos;// center HoriJustify						&apos;// mod052020
const RJUST=3		&apos;// right-justify HoriJustify				&apos;// mod052320
const MDYY=30		&apos;// &apos;M/D/YY&apos; format value

&apos;//	local variables.
Dim oDoc As Object
Dim oSheet As Object
Dim NewColumn As Object
dim oSel as Object
dim iSheetIx as integer
dim oRange as Object
dim lThisRow as long		&apos;// current row selected on sheet
dim oMrgRange	As Object	&apos;// merge range

dim oCell	As Object		&apos;// cell working on
dim oCellPhone	As Object	&apos;// cell with Phone1
dim i		As Integer		&apos;// loop index
dim sPropID	As String		&apos;// property ID
dim sSubTerr	As String	&apos;// subterritory
dim sCongTerr	As String	&apos;// cong terr ID
dim lRowCount	As Long		&apos;// row count of addresses
dim dDate		As Double	&apos;// date value
dim sCityStZip	As String	&apos;// concatenated City, State, Zip
dim sNotes		As String	&apos;// notes field
dim	nCols		As Integer	&apos;// column count to remove

	&apos;// code.
	ON ERROR GoTo ErrorHandler
	oDoc = ThisComponent
	oSel = oDoc.getCurrentSelection()
	oRange = oSel.RangeAddress
	iSheetIx = oRange.Sheet
	oSheet = oDoc.Sheets(iSheetIx)
	
	oCell =	oSheet.getCellByPosition(COL_B, ROW_2)
	lRowCount = oCell.Value

	&apos;//		concatenate City State Zip B3 + &quot;FL&quot; + C3
	sCityStZip = fsConcatCityToZip()

	&apos;//		Change col A heading to &quot;id&quot;
	oCell = oSheet.getCellByPosition(COL_A, ROW_HEADING)
	oCell.String = &quot;id&quot;
	oCell.HoriJustify = CJUST

&apos;//		Move col B entries to Col D
	oMrgRange = oRange
	oMrgRange.StartColumn = COL_B
	oMrgRange.EndColumn = COL_B
	oMrgRange.StartRow = ROW_HEADING + 1
	oMrgRange.EndRow = ROW_HEADING + lRowCount
dim oTarget as new com.sun.star.table.CellAddress
	oTarget.Sheet = oRange.Sheet
	oTarget.Column = COL_D
	oTarget.Row = ROW_HEADING + 1
	oSheet.moveRange(oTarget,oMrgRange)


&apos;//		Change D heading to &quot;street_address&quot;
	oCell = oSheet.getCellByPosition(COL_D, ROW_HEADING)
	oCell.String = &quot;street_address&quot;
	oCell.HoriJustify = CJUST

&apos;//		Move col C entries to col B
	oMrgRange = oRange
	oMrgRange.StartColumn = COL_C
	oMrgRange.EndColumn = COL_C
	oMrgRange.StartRow = ROW_HEADING + 1
	oMrgRange.EndRow = ROW_HEADING + lRowCount
	oTarget.Sheet = oRange.Sheet
	oTarget.Column = COL_B
	oTarget.Row = ROW_HEADING + 1
	oSheet.moveRange(oTarget,oMrgRange)

&apos;//		Change B heading to  &quot;name&quot;
	oCell = oSheet.getCellByPosition(COL_B, ROW_HEADING)
	oCell.String = &quot;name&quot;
	oCell.HoriJustify = CJUST

&apos;//		Move col G  entries to col C (RefUSA phone)
	oMrgRange = oRange
	oMrgRange.StartColumn = COL_G
	oMrgRange.EndColumn = COL_G
	oMrgRange.StartRow = ROW_HEADING + 1
	oMrgRange.EndRow = ROW_HEADING + lRowCount -1
	oTarget.Sheet = oRange.Sheet
	oTarget.Column = COL_C
	oTarget.Row = ROW_HEADING + 1
	oSheet.moveRange(oTarget,oMrgRange)

&apos;//		Change C heading to &quot;phone_number&quot;
	oCell = oSheet.getCellByPosition(COL_C, ROW_HEADING)
	oCell.String = &quot;phone_number&quot;
	oCell.HoriJustify = CJUST

&apos;//		Change E heading to &quot;city_state_zip&quot;
	oCell = oSheet.getCellByPosition(COL_E, ROW_HEADING)
	oCell.String = &quot;city_state_zip&quot;
	oCell.HoriJustify = CJUST

&apos;//		Change F heading to &quot;notes&quot;
	oCell = oSheet.getCellByPosition(COL_F, ROW_HEADING)
	oCell.String = &quot;notes&quot;
	oCell.HoriJustify = CJUST

&apos;//		Row-by-Row
&apos;//x	  store concatenated city, state, zip in E
&apos;//x	  store &quot;&quot; in A
&apos;//       BuildNote from columns M, N, O
&apos;//		  store note in column F
&apos;//       if C = &quot;Not Available&quot;, store column E in C
&apos;//  	end Row-by-row
	lThisRow = ROW_HEADING
dim sOldPhone	As String
	for i = 0 to lRowCount-1
		lThisRow = lThisRow + 1
		
		&apos;// store city, state, zip
		oCell = oSheet.getCellByPosition(COL_E, lThisRow)
		sOldPhone = oCell.String
		oCell.String = sCityStZip
&apos;//		  for each entry set col A = &quot;&quot;
		oCell = oSheet.getCellByPosition(COL_A, lThisRow)
		oCell.String = &quot;&quot;

&apos;//       for each entry if DoNotCall (M) &quot;Do NotCall&quot; into F
        sNotes = &quot;&quot;
		oCell = oSheet.getCellByPosition(COL_M, lThisRow)
		if len(trim(oCell.String)) &gt; 0 then
			sNotes = &quot;DoNotCall &quot; 
			oCell = oSheet.getCellByPosition(COL_B, lThisRow)
			oCell.String = &quot;DO NOT CALL&quot;
		endif
		
&apos;//       for each entry if RSO (N) &quot;RSO&quot; into F
		oCell = oSheet.getCellByPosition(COL_N, lThisRow)
		if len(trim(oCell.String)) &gt; 0 then
			sNotes = sNotes + &quot;RSO &quot;
		endif

&apos;//       for each entry if Foreign (O) &quot;Foreign&quot; into F
		oCell = oSheet.getCellByPosition(COL_O, lThisRow)
		if len(trim(oCell.String)) &gt; 0 then
			sNotes = sNotes + &quot;Foreign&quot;
		endif
		oCell = oSheet.getCellByPosition(COL_F, lThisRow)
		oCell.String = sNotes
		
&apos;//		check if C = &quot;Not Available&quot;; if so, change to data from E		
		oCell = oSheet.getCellByPosition(COL_C, lThisRow)
		if (strComp(trim(oCell.String),&quot;Not Available&quot;) = 0) then
			oCell.String = sOldPhone
		endif

	next i	&apos;// end loop setting row data
	
&apos;// set count formula in B2 to count column B
	oCell = oSheet.getCellByPosition(COL_B, ROW_2)
	oCell.setFormula(&quot;=COUNTA(B6:B1299)&quot;)

&apos;// remove all columns G-P
	nCols = ASC(&quot;Q&quot;) - ASC(&quot;G&quot;)
	oSheet.Columns.removeByIndex(COL_G, nCols) 

&apos;//	set I1 sheet format to &quot;Admin-TSExport formatted sheet
	oCell = oSheet.getCellByPosition(COL_H, ROW_1)
	oCell.String = &quot;Admin-TSExport formatted sheet&quot;

	BoldHeadings()
	
&apos;//	shift all heading information over to column B
&apos;// move H1 one right first to make room
&apos;// move A1 through G4 over 1 column right
	oMrgRange = oRange
	oMrgRange.StartColumn = COL_H
	oMrgRange.EndColumn = COL_H
	oMrgRange.StartRow = ROW_1
	oMrgRange.EndRow = ROW_1
	oTarget.Sheet = oRange.Sheet
	oTarget.Column = COL_I
	oTarget.Row = ROW_1
	oSheet.moveRange(oTarget,oMrgRange)

	oMrgRange = oRange
	oMrgRange.StartColumn = COL_A
	oMrgRange.EndColumn = COL_G
	oMrgRange.StartRow = ROW_1
	oMrgRange.EndRow = ROW_4
	oTarget.Sheet = oRange.Sheet
	oTarget.Column = COL_B
	oTarget.Row = ROW_1
	oSheet.moveRange(oTarget,oMrgRange)


	&apos;// set column widths
	SetTSColWidths()
	
	&apos;// force recalculation
	ForceRecalc()
	
	&apos;// restore entry selection
	SetSelection(oRange)
	
NormalExit:
	exit sub

ErrorHandler:
	msgbox(&quot;EditToTSx - unprocessed error.&quot;)
	GoTo NormalExit
	
end sub		&apos;// end EditToTSx		9/10/20
&apos;/**/


&apos;// ExportTerrAsPDF.bas
&apos;//--------------------------------------------------------------------
&apos;// ExportTerrAsPDF - Export territory workbook as PDF.
&apos;//		12/23/21.	wmk.	23:04
&apos;//--------------------------------------------------------------------

public sub ExportTerrAsPDF()

&apos;// Entry.	user has _PubTerr sheet selected
&apos;//
&apos;//	Exit.	current sheet exported as PDF
&apos;//
&apos;// Usage.	macro call or
&apos;//			call ExportTerrAsPDF()
&apos;//
&apos;// Entry.	user has worksheet selected
&apos;//
&apos;//	Exit.	copy of worksheet made to .pdf file
&apos;//
&apos;// Calls.
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;// 1/14/21.	wmk.	original code; cloned from macro recording.
&apos;//	7/10/21.	wmk.	dispatch parameter list split for readability.
&apos;// 12/23/21.	wmk.	modified to use csTerrBase, csTerrDataPath module-wide
&apos;//				 constants for multihost support.
&apos;//
&apos;//	Notes.
&apos;//

&apos;//	constants.
&apos;// const csTerrBase = &quot;defined above&quot;
&apos;// const csTerrDataPath = &quot;defined above&quot;

&apos;//	local variables.
rem ----------------------------------------------------------------------
rem define variables
dim document   as object
dim dispatcher as object
rem ----------------------------------------------------------------------
rem get access to the document
document   = ThisComponent.CurrentController.Frame
dispatcher = createUnoService(&quot;com.sun.star.frame.DispatchHelper&quot;)

rem ----------------------------------------------------------------------
dim args1(2) as new com.sun.star.beans.PropertyValue
args1(0).Name = &quot;URL&quot;
args1(0).Value = &quot;file://&quot; &amp; csTerrBase &amp; &quot;/Untitled.pdf&quot;
args1(1).Name = &quot;FilterName&quot;
args1(1).Value = &quot;calc_pdf_Export&quot;
args1(2).Name = &quot;FilterData&quot;
args1(2).Value = Array(Array(&quot;UseLosslessCompression&quot;,0,false,_ 
	 com.sun.star.beans.PropertyState.DIRECT_VALUE),_ 
	Array(&quot;Quality&quot;,0,90,com.sun.star.beans.PropertyState.DIRECT_VALUE),_
	Array(&quot;ReduceImageResolution&quot;,0,true,_
	 com.sun.star.beans.PropertyState.DIRECT_VALUE),_
	Array(&quot;MaxImageResolution&quot;,0,300,_
	 com.sun.star.beans.PropertyState.DIRECT_VALUE),_
	Array(&quot;UseTaggedPDF&quot;,0,false,_
	 com.sun.star.beans.PropertyState.DIRECT_VALUE),_
	Array(&quot;SelectPdfVersion&quot;,0,0,_
	 com.sun.star.beans.PropertyState.DIRECT_VALUE),_
	Array(&quot;ExportNotes&quot;,0,false,_
	 com.sun.star.beans.PropertyState.DIRECT_VALUE),_
	Array(&quot;ViewPDFAfterExport&quot;,0,false,_
	 com.sun.star.beans.PropertyState.DIRECT_VALUE),_
	Array(&quot;ExportBookmarks&quot;,0,true,_
	 com.sun.star.beans.PropertyState.DIRECT_VALUE),_
	Array(&quot;SinglePageSheets&quot;,0,false,_
	 com.sun.star.beans.PropertyState.DIRECT_VALUE),_
	Array(&quot;OpenBookmarkLevels&quot;,0,-1,_
	 com.sun.star.beans.PropertyState.DIRECT_VALUE),_
	Array(&quot;UseTransitionEffects&quot;,0,true,_
	 com.sun.star.beans.PropertyState.DIRECT_VALUE),_
	Array(&quot;IsSkipEmptyPages&quot;,0,true,_
	 com.sun.star.beans.PropertyState.DIRECT_VALUE),_
	Array(&quot;ExportPlaceholders&quot;,0,false,_
	 com.sun.star.beans.PropertyState.DIRECT_VALUE),_
	Array(&quot;IsAddStream&quot;,0,false,_
	 com.sun.star.beans.PropertyState.DIRECT_VALUE),_
	Array(&quot;ExportFormFields&quot;,0,true,_
	 com.sun.star.beans.PropertyState.DIRECT_VALUE),_
	Array(&quot;FormsType&quot;,0,0,_
	 com.sun.star.beans.PropertyState.DIRECT_VALUE),_
	Array(&quot;AllowDuplicateFieldNames&quot;,0,false,_
	 com.sun.star.beans.PropertyState.DIRECT_VALUE),_
	Array(&quot;HideViewerToolbar&quot;,0,false,_
	 com.sun.star.beans.PropertyState.DIRECT_VALUE),_
	Array(&quot;HideViewerMenubar&quot;,0,false,_
	 com.sun.star.beans.PropertyState.DIRECT_VALUE),_
	Array(&quot;HideViewerWindowControls&quot;,0,false,_
	 com.sun.star.beans.PropertyState.DIRECT_VALUE),_
	Array(&quot;ResizeWindowToInitialPage&quot;,0,false,_
	 com.sun.star.beans.PropertyState.DIRECT_VALUE),_
	Array(&quot;CenterWindow&quot;,0,false,_
	 com.sun.star.beans.PropertyState.DIRECT_VALUE),_
	Array(&quot;OpenInFullScreenMode&quot;,0,false,_
	 com.sun.star.beans.PropertyState.DIRECT_VALUE),_
	Array(&quot;DisplayPDFDocumentTitle&quot;,0,true,_
	 com.sun.star.beans.PropertyState.DIRECT_VALUE),_
	Array(&quot;InitialView&quot;,0,0,_
	 com.sun.star.beans.PropertyState.DIRECT_VALUE),_
	Array(&quot;Magnification&quot;,0,0,_
	 com.sun.star.beans.PropertyState.DIRECT_VALUE),_
	Array(&quot;Zoom&quot;,0,100,_
	 com.sun.star.beans.PropertyState.DIRECT_VALUE),_
	Array(&quot;PageLayout&quot;,0,0,_
	 com.sun.star.beans.PropertyState.DIRECT_VALUE),_
	Array(&quot;FirstPageOnLeft&quot;,0,false,_
	 com.sun.star.beans.PropertyState.DIRECT_VALUE),_
	Array(&quot;InitialPage&quot;,0,1,_
	 com.sun.star.beans.PropertyState.DIRECT_VALUE),_
	Array(&quot;Printing&quot;,0,2,_
	 com.sun.star.beans.PropertyState.DIRECT_VALUE),_
	Array(&quot;Changes&quot;,0,4,_
	 com.sun.star.beans.PropertyState.DIRECT_VALUE),_
	Array(&quot;EnableCopyingOfContent&quot;,0,true,_
	 com.sun.star.beans.PropertyState.DIRECT_VALUE),_
	Array(&quot;EnableTextAccessForAccessibilityTools&quot;,0,true,_
	 com.sun.star.beans.PropertyState.DIRECT_VALUE),_
	Array(&quot;ExportLinksRelativeFsys&quot;,0,true,_
	 com.sun.star.beans.PropertyState.DIRECT_VALUE),_
	Array(&quot;PDFViewSelection&quot;,0,0,_
	 com.sun.star.beans.PropertyState.DIRECT_VALUE),_
	Array(&quot;ConvertOOoTargetToPDFTarget&quot;,0,false,_
	 com.sun.star.beans.PropertyState.DIRECT_VALUE),_
	Array(&quot;ExportBookmarksToPDFDestination&quot;,0,false,_
	 com.sun.star.beans.PropertyState.DIRECT_VALUE),_
	Array(&quot;SignPDF&quot;,0,false,_
	 com.sun.star.beans.PropertyState.DIRECT_VALUE),_
	Array(&quot;_OkButtonString&quot;,0,&quot;&quot;,_
	 com.sun.star.beans.PropertyState.DIRECT_VALUE),_
	Array(&quot;Watermark&quot;,0,&quot;&quot;,_
	 com.sun.star.beans.PropertyState.DIRECT_VALUE),_
	Array(&quot;EncryptFile&quot;,0,false,_
	 com.sun.star.beans.PropertyState.DIRECT_VALUE),_
	Array(&quot;PreparedPasswords&quot;,0,,_
	 com.sun.star.beans.PropertyState.DIRECT_VALUE),_
	Array(&quot;RestrictPermissions&quot;,0,false,_
	 com.sun.star.beans.PropertyState.DIRECT_VALUE),_
	Array(&quot;PreparedPermissionPassword&quot;,0,_
	Array(),_
	 com.sun.star.beans.PropertyState.DIRECT_VALUE),_
	Array(&quot;Selection&quot;,0,,_
	 com.sun.star.beans.PropertyState.DIRECT_VALUE),_
	Array(&quot;SignatureLocation&quot;,0,&quot;&quot;,_
	 com.sun.star.beans.PropertyState.DIRECT_VALUE),_
	Array(&quot;SignatureReason&quot;,0,&quot;&quot;,_
	 com.sun.star.beans.PropertyState.DIRECT_VALUE),_
	Array(&quot;SignatureContactInfo&quot;,0,&quot;&quot;,_
	 com.sun.star.beans.PropertyState.DIRECT_VALUE),_
	Array(&quot;SignaturePassword&quot;,0,&quot;&quot;,_
	 com.sun.star.beans.PropertyState.DIRECT_VALUE),_
	Array(&quot;SignatureCertificate&quot;,0,,_
	 com.sun.star.beans.PropertyState.DIRECT_VALUE),_
	Array(&quot;SignatureTSA&quot;,0,&quot;&quot;,_
	 com.sun.star.beans.PropertyState.DIRECT_VALUE),_
	Array(&quot;UseReferenceXObject&quot;,0,false,_
	 com.sun.star.beans.PropertyState.DIRECT_VALUE))

dispatcher.executeDispatch(document, &quot;.uno:ExportToPDF&quot;, &quot;&quot;, 0, args1())

end sub			&apos;// end ExportTerrAsPDF		12/23/21.	23:04
&apos;/**/


&apos;// ExportTerrAsPDF1.bas
&apos;//---------------------------------------------------------------
&apos;// ExportTerrAsPDF1 - Export territory sheet as PDF file.
&apos;//		7/12/21.	wmk.	00:17
&apos;//---------------------------------------------------------------

public sub ExportTerrAsPDF1()

&apos;//	Usage.	macro call or
&apos;//			call ExportTerrAsPDF()
&apos;//
&apos;// Entry.	user has _PubTerr sheet selected
&apos;//
&apos;//	Exit.	current sheet exported as PDF
&apos;//
&apos;// Calls.
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	1/14/21.		wmk.	original code; cloned from Record Macro
&apos;//
&apos;//	Notes. This sub allows the user to export a _PubTerr sheet as
&apos;// a PDF file. This file will usually be part of a set for a given
&apos;// territory consisting of .ods, .xlsx and .pdf files. This will allow
&apos;// users to select whichever format they are comfortable working with.
&apos;//

&apos;//	constants.

&apos;//	local variables.

dim oDoc	AS Object
dim sTitle	AS String
dim sTerrID AS String
dim sFile	AS String
rem ----------------------------------------------------------------------
rem define variables
dim document   as object
dim dispatcher as object


	&apos;// code.
	ON ERROR GOTO ErrorHandler
	oDoc = ThisComponent
	sTitle = oDoc.getTitle()
	sTerrID = mid(sTitle,5,3)
	
	sFile = &quot;file:///media/ubuntu/Windows/Users/Bill/Territories&quot; _
   + &quot;/TerrData/Terr&quot; + sTerrID + &quot;/&quot; + &quot;Terr&quot; + sTerrID + &quot;_PubTerr.pdf&quot;
	

rem ----------------------------------------------------------------------
rem get access to the document
document   = ThisComponent.CurrentController.Frame
dispatcher = createUnoService(&quot;com.sun.star.frame.DispatchHelper&quot;)

rem ----------------------------------------------------------------
dim args1(2) as new com.sun.star.beans.PropertyValue
args1(0).Name = &quot;URL&quot;
args1(0).Value = sFile
args1(1).Name = &quot;FilterName&quot;
args1(1).Value = &quot;calc_pdf_Export&quot;
args1(2).Name = &quot;FilterData&quot;
args1(2).Value = Array(Array(&quot;UseLosslessCompression&quot;,0,false,com.sun.star.beans.PropertyState.DIRECT_VALUE),Array(&quot;Quality&quot;,0,90,com.sun.star.beans.PropertyState.DIRECT_VALUE),Array(&quot;ReduceImageResolution&quot;,0,true,com.sun.star.beans.PropertyState.DIRECT_VALUE),Array(&quot;MaxImageResolution&quot;,0,300,com.sun.star.beans.PropertyState.DIRECT_VALUE),Array(&quot;UseTaggedPDF&quot;,0,false,com.sun.star.beans.PropertyState.DIRECT_VALUE),Array(&quot;SelectPdfVersion&quot;,0,0,com.sun.star.beans.PropertyState.DIRECT_VALUE),Array(&quot;ExportNotes&quot;,0,false,com.sun.star.beans.PropertyState.DIRECT_VALUE),Array(&quot;ViewPDFAfterExport&quot;,0,false,com.sun.star.beans.PropertyState.DIRECT_VALUE),Array(&quot;ExportBookmarks&quot;,0,true,com.sun.star.beans.PropertyState.DIRECT_VALUE),Array(&quot;SinglePageSheets&quot;,0,false,com.sun.star.beans.PropertyState.DIRECT_VALUE),Array(&quot;OpenBookmarkLevels&quot;,0,-1,com.sun.star.beans.PropertyState.DIRECT_VALUE),Array(&quot;UseTransitionEffects&quot;,0,true,com.sun.star.beans.PropertyState.DIRECT_VALUE),Array(&quot;IsSkipEmptyPages&quot;,0,true,com.sun.star.beans.PropertyState.DIRECT_VALUE),Array(&quot;ExportPlaceholders&quot;,0,false,com.sun.star.beans.PropertyState.DIRECT_VALUE),Array(&quot;IsAddStream&quot;,0,false,com.sun.star.beans.PropertyState.DIRECT_VALUE),Array(&quot;ExportFormFields&quot;,0,true,com.sun.star.beans.PropertyState.DIRECT_VALUE),Array(&quot;FormsType&quot;,0,0,com.sun.star.beans.PropertyState.DIRECT_VALUE),Array(&quot;AllowDuplicateFieldNames&quot;,0,false,com.sun.star.beans.PropertyState.DIRECT_VALUE),Array(&quot;HideViewerToolbar&quot;,0,false,com.sun.star.beans.PropertyState.DIRECT_VALUE),Array(&quot;HideViewerMenubar&quot;,0,false,com.sun.star.beans.PropertyState.DIRECT_VALUE),Array(&quot;HideViewerWindowControls&quot;,0,false,com.sun.star.beans.PropertyState.DIRECT_VALUE),Array(&quot;ResizeWindowToInitialPage&quot;,0,false,com.sun.star.beans.PropertyState.DIRECT_VALUE),Array(&quot;CenterWindow&quot;,0,false,com.sun.star.beans.PropertyState.DIRECT_VALUE),Array(&quot;OpenInFullScreenMode&quot;,0,false,com.sun.star.beans.PropertyState.DIRECT_VALUE),Array(&quot;DisplayPDFDocumentTitle&quot;,0,true,com.sun.star.beans.PropertyState.DIRECT_VALUE),Array(&quot;InitialView&quot;,0,0,com.sun.star.beans.PropertyState.DIRECT_VALUE),Array(&quot;Magnification&quot;,0,0,com.sun.star.beans.PropertyState.DIRECT_VALUE),Array(&quot;Zoom&quot;,0,100,com.sun.star.beans.PropertyState.DIRECT_VALUE),Array(&quot;PageLayout&quot;,0,0,com.sun.star.beans.PropertyState.DIRECT_VALUE),Array(&quot;FirstPageOnLeft&quot;,0,false,com.sun.star.beans.PropertyState.DIRECT_VALUE),Array(&quot;InitialPage&quot;,0,1,com.sun.star.beans.PropertyState.DIRECT_VALUE),Array(&quot;Printing&quot;,0,2,com.sun.star.beans.PropertyState.DIRECT_VALUE),Array(&quot;Changes&quot;,0,4,com.sun.star.beans.PropertyState.DIRECT_VALUE),Array(&quot;EnableCopyingOfContent&quot;,0,true,com.sun.star.beans.PropertyState.DIRECT_VALUE),Array(&quot;EnableTextAccessForAccessibilityTools&quot;,0,true,com.sun.star.beans.PropertyState.DIRECT_VALUE),Array(&quot;ExportLinksRelativeFsys&quot;,0,true,com.sun.star.beans.PropertyState.DIRECT_VALUE),Array(&quot;PDFViewSelection&quot;,0,0,com.sun.star.beans.PropertyState.DIRECT_VALUE),Array(&quot;ConvertOOoTargetToPDFTarget&quot;,0,false,com.sun.star.beans.PropertyState.DIRECT_VALUE),Array(&quot;ExportBookmarksToPDFDestination&quot;,0,false,com.sun.star.beans.PropertyState.DIRECT_VALUE),Array(&quot;SignPDF&quot;,0,false,com.sun.star.beans.PropertyState.DIRECT_VALUE),Array(&quot;_OkButtonString&quot;,0,&quot;&quot;,com.sun.star.beans.PropertyState.DIRECT_VALUE),Array(&quot;Watermark&quot;,0,&quot;&quot;,com.sun.star.beans.PropertyState.DIRECT_VALUE),Array(&quot;EncryptFile&quot;,0,false,com.sun.star.beans.PropertyState.DIRECT_VALUE),Array(&quot;PreparedPasswords&quot;,0,,com.sun.star.beans.PropertyState.DIRECT_VALUE),Array(&quot;RestrictPermissions&quot;,0,false,com.sun.star.beans.PropertyState.DIRECT_VALUE),Array(&quot;PreparedPermissionPassword&quot;,0,Array(),com.sun.star.beans.PropertyState.DIRECT_VALUE),Array(&quot;Selection&quot;,0,,com.sun.star.beans.PropertyState.DIRECT_VALUE),Array(&quot;SignatureLocation&quot;,0,&quot;&quot;,com.sun.star.beans.PropertyState.DIRECT_VALUE),Array(&quot;SignatureReason&quot;,0,&quot;&quot;,com.sun.star.beans.PropertyState.DIRECT_VALUE),Array(&quot;SignatureContactInfo&quot;,0,&quot;&quot;,com.sun.star.beans.PropertyState.DIRECT_VALUE),Array(&quot;SignaturePassword&quot;,0,&quot;&quot;,com.sun.star.beans.PropertyState.DIRECT_VALUE),Array(&quot;SignatureCertificate&quot;,0,,com.sun.star.beans.PropertyState.DIRECT_VALUE),Array(&quot;SignatureTSA&quot;,0,&quot;&quot;,com.sun.star.beans.PropertyState.DIRECT_VALUE),Array(&quot;UseReferenceXObject&quot;,0,false,com.sun.star.beans.PropertyState.DIRECT_VALUE))

dispatcher.executeDispatch(document, &quot;.uno:ExportToPDF&quot;, &quot;&quot;, 0, args1())

if 1 = 0 then
msgbox(&quot;Terr&quot; + sTerrID + &quot;_PubTerr.pdf created successfully&quot;,0,&quot;ExportTerrAsPDF&quot;)
endif
NormalExit:
	exit sub
	
ErrorHandler:
	msgbox(&quot;ExportTerrAsPDF1 - unprocessed error&quot;)
	GoTo NormalExit
	
end sub		&apos;// end ExportTerrAsPDF1	7/12/21	00:17
&apos;/**/

&apos;// ExportTerrHdr.bas
&apos;//---------------------------------------------------------------
&apos;// ExportTerrHdr - Export territory header to QTerrxxx.ods.
&apos;//		2/12/21.	wmk.
&apos;//---------------------------------------------------------------

public sub ExportTerrHdr()

&apos;//	Usage.	macro call or
&apos;//			call ExportTerrHdr()
&apos;//
&apos;//		&lt;parameters description&gt;
&apos;//
&apos;// Entry.	User in workbook TerrxxxHdr (either .csv or ods)
&apos;//
&apos;//	Exit.	Workbook saved as .ods if not already
&apos;//			Sheet TerrxxxHdr copied to workbook QTerrxxx at end sheet
&apos;//			TerrxxxHdr tab dark lime
&apos;//			Sheet protected
&apos;//
&apos;// Calls.	DkLimeTab, ProtectSheet
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	2/12/21.		wmk.	original code
&apos;//
&apos;//	Notes. This macro takes the TerrxxxHdr sheet and copies it to the
&apos;// end sheet of the QTerrxxx workbook. This sets up QTerrxxx for 
&apos;// running the QtoPubTerr macro building the territory workbook.
&apos;//

&apos;//	constants.

&apos;//	local variables.
dim sDocURL		As String	&apos;// document URL
dim nURLlen		As Integer	&apos;// URL length
dim sURLBase	As String	&apos;// base of new URL
dim sNewURL		As String	&apos;// new full URL for file save
dim sFileBase	As String	&apos;// current filename sans leading Q
dim sQTerrFile	As String	&apos;// extrapolated QTerr filename QTerrxxx.
	&apos;// code.
	ON ERROR GOTO ErrorHandler
	sDocURL = ThisComponent.getURL()
	&apos;// expected URL = ../TerrData/Working-Files/QTerrxxx.csv
	nURLlen = len(sDocURL)
	sURLBase = left(sDocURL, nURLLen-12)	&apos;// up to last &apos;/&apos;
	sFileBase = right(sDocURL,14)	&apos;// TerrxxxHdr.ods
	&apos;// transform TerrxxxHdr.ods to QTerrxxx
	sQTerrFile = &quot;Q&quot; + left(sFileBase,7)
	
rem ----------------------------------------------------------------------
rem define variables
dim document   as object
dim dispatcher as object
rem ----------------------------------------------------------------------
rem get access to the document
document   = ThisComponent.CurrentController.Frame
dispatcher = createUnoService(&quot;com.sun.star.frame.DispatchHelper&quot;)

rem ----------------------------------------------------------------------
dim args1(2) as new com.sun.star.beans.PropertyValue
args1(0).Name = &quot;DocName&quot;
&apos;args1(0).Value = &quot;QTerr287&quot;
args1(0).Value = sQTerrFile
args1(1).Name = &quot;Index&quot;
args1(1).Value = 32767
args1(2).Name = &quot;Copy&quot;
args1(2).Value = true

dispatcher.executeDispatch(document, &quot;.uno:Move&quot;, &quot;&quot;, 0, args1())

	sDocURL = ThisComponent.getURL()

NormalExit:
	exit sub
	
ErrorHandler:
	msgbox(&quot;ExportTerrHdr - unprocessed error&quot;)
	GoTo NormalExit
rem ----------------------------------------------------------------------
rem define variables
&apos;dim document   as object
&apos;dim dispatcher as object
rem ----------------------------------------------------------------------
rem get access to the document
document   = ThisComponent.CurrentController.Frame
dispatcher = createUnoService(&quot;com.sun.star.frame.DispatchHelper&quot;)

rem ----------------------------------------------------------------------
&apos;dim args1(2) as new com.sun.star.beans.PropertyValue
args1(0).Name = &quot;DocName&quot;
args1(0).Value = &quot;QTerr287&quot;
args1(1).Name = &quot;Index&quot;
args1(1).Value = 32767
args1(2).Name = &quot;Copy&quot;
args1(2).Value = true

dispatcher.executeDispatch(document, &quot;.uno:Move&quot;, &quot;&quot;, 0, args1())

	
end sub		&apos;// end ExportTerrHdr
&apos;/**/


&apos;// Format10zs.bas
&apos;//-----------------------------------------------------------------------
&apos;//	Format10zs - Set column NumberFormat to &quot;0000000000&quot;.
&apos;//		9/19/20.	wmk.
&apos;//-----------------------------------------------------------------------

sub format10zs
rem ----------------------------------------------------------------------
rem define variables
dim document   as object
dim dispatcher as object
rem ----------------------------------------------------------------------
rem get access to the document
document   = ThisComponent.CurrentController.Frame
dispatcher = createUnoService(&quot;com.sun.star.frame.DispatchHelper&quot;)

rem ----------------------------------------------------------------------
dim args1(0) as new com.sun.star.beans.PropertyValue
args1(0).Name = &quot;ToPoint&quot;
args1(0).Value = &quot;$A$8&quot;

dispatcher.executeDispatch(document, &quot;.uno:GoToCell&quot;, &quot;&quot;, 0, args1())

rem ----------------------------------------------------------------------
dim args2(0) as new com.sun.star.beans.PropertyValue
args2(0).Name = &quot;NumberFormatValue&quot;
args2(0).Value = 121

dispatcher.executeDispatch(document, &quot;.uno:NumberFormatValue&quot;, &quot;&quot;, 0, args2())


end sub
&apos;/**/

&apos;// FixSCAddressM.bas
&apos;//---------------------------------------------------------------
&apos;// FixSCAddressM - ParseSitus Test for SCPA record extraction.
&apos;//		9/16/20.	wmk.	13:10
&apos;//---------------------------------------------------------------

public sub FixSCAddressM()

&apos;//	Usage.	macro call or
&apos;//			call FixSCAddressM()
&apos;//
&apos;//
&apos;// Entry.	user in PropOwners .csv formatted spreadsheet
&apos;//			user has rows selected to fix addresses in
&apos;//
&apos;//	Exit.	ParseSitus and FixSCPAaddr tested with results displayed
&apos;//
&apos;// Calls.	SelectActiveRows, ParseSitsus, FixSCPAaddr, SetSelection
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	9/16/20.		wmk.	original code
&apos;//
&apos;//	Notes. This sub is included in PropOwners.ods, but maintained with
&apos;// the PolyTerri-Queries in its Associated Files folder. This allows
&apos;// editing outside of LibreCalc, which seems to still have &quot;freeze&quot;
&apos;// issues with certain cursor activity.

&apos;//	constants.
const ROW_HEADING=4			&apos;// row index of headings
const COL_ADDRESS=3			&apos;// column index of Address
const YELLOW=16776960		&apos;// decimal value of YELLOW color

&apos;//	local variables.
dim	oDoc		As Object	&apos;// ThisComponent
dim oSel		As Object	&apos;// current selection
dim oSheet		As Object	&apos;// current sheet
dim iSheetIx	As Integer	&apos;// selected sheet index
dim oRange		As Object	&apos;// selected Range
dim oCell		As Object	&apos;// working cell
dim lCol		As long		&apos;// cell column
dim lRow		As long		&apos;// cell row
dim sFullAddress	As String	&apos;// full street address
dim sNumber		As String
dim sStreet		As String
dim sUnit		As String
dim lThisRow	As long		&apos;// current row processing
dim oActvRange	As Object	&apos;// active rows range
dim nRowCount	As Integer	&apos;// active rows count
dim i			As Integer	&apos;// loop counter
dim nRowsProcessed	As Integer	&apos;// processed rows count
dim sNewAddress	As String	&apos;// newly concatenated address

	&apos;// code.
	ON ERROR GOTO ErrorHandler
	oDoc = ThisComponent
	oSel = oDoc.getCurrentSelection()
	oRange = oSel.RangeAddress
	iSheetIx = oRange.Sheet
	oSheet = oDoc.Sheets(iSheetIx)

if true then
  GoTo Skip1
endif
&apos;//---------------------------------------------------------------------
	lCol = oRange.StartColumn
	lRow = oRange.StartRow
	oCell = oSheet.getCellByPosition(lCol, lRow)
	
msgbox(&quot;Address being tested:&quot; + CHR(13)+CHR(10) _
  + oCell.String)

	sFullAddress = oCell.String
&apos;//---------------------------------------------------------------------
Skip1:
	oActvRange = oSel.RangeAddress
	nRowCount = oActvRange.EndRow - oActvRange.StartRow +1
	lThisRow = oActvRange.StartRow-1
	nRowsProcessed = 0
	
	for i = 0 to nRowCount-1
		lThisRow = lThisRow + 1
		oCell = oSheet.getCellByPosition(COL_ADDRESS, lThisRow)
		sFullAddress = oCell.String
		ParseSitus(sFullAddress, sNumber, sStreet, sUnit)
		sNewAddr&apos;/**/
ess = fsConcatSCAddress(sNumber, sStreet, sUnit)
		oCell.String = sNewAddress
		if len(sNewAddress) = 0 then
			oCell.CellBackColor = YELLOW
		endif
		nRowsProcessed = nRowsProcessed + 1
	next i

	SetSelection(oRange)	&apos;// restore entry selection onscreen
	
NormalExit:
	exit sub
	
ErrorHandler:
	msgbox(&quot;FixSCAddressM - unprocessed error&quot;)
	GoTo NormalExit
	
end sub		&apos;// end FixSCAddressM	9/16/20
&apos;/**/

&apos;// ForceRecalc.bas
&apos;//---------------------------------------------------------------
&apos;// ForceRecalc - Force calculation on sheet.
&apos;//		9/8/20.	wmk.
&apos;//---------------------------------------------------------------

public sub ForceRecalc()

&apos;//	Usage.	macro call or
&apos;//			call ForceRecalc()
&apos;//
&apos;// Entry.	user selection is in Admin-Edit sheet
&apos;//
&apos;//	Exit.	sheet is recalculated; all HYPERLINK fields should read
&apos;//			&quot;click to search&quot;
&apos;//
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	9/8/20.		wmk.	original code; stolen from macro recording
&apos;//
&apos;//	Notes. Autocalc is turned off in territories, since there may be
&apos;// literally thousands of HYPERLINKs in the larger sheets. After
&apos;// the hyplerlinks for search fields are set (GenELinkM), ForceRecalc
&apos;//	will be called to update the hyperlinks so they read &quot;Click to search&quot;

&apos;//	constants.

&apos;//	local variables.
dim document   as object
dim dispatcher as object

	&apos;// code.
	ON ERROR GOTO ErrorHandler
	document   = ThisComponent.CurrentController.Frame
	dispatcher = createUnoService(&quot;com.sun.star.frame.DispatchHelper&quot;)

	dispatcher.executeDispatch(document, &quot;.uno:Calculate&quot;, &quot;&quot;, 0, Array())

NormalExit:
	exit sub
	
ErrorHandler:
	msgbox(&quot;ForceRecalc - unprocessed error.&quot;)
	GoTo NormalExit

end sub		&apos;// end ForceRecalc		9/8/20
&apos;/**/


&apos;// FreezeView.bas
&apos;//---------------------------------------------------------------
&apos;// FreezeView - Freeze rows A1..A5 to keep headings in place.
&apos;//		8/28/20.	wmk.
&apos;//---------------------------------------------------------------

public sub FreezeView()

&apos;//	Usage.	macro call or
&apos;//			call FreezeView()
&apos;//
&apos;// Entry.	user has active sheet
&apos;//
&apos;//	Exit.	active sheet has Freeze Rows and Columns starting at $A$6
&apos;//			so headings remain when scrolling
&apos;//
&apos;// Calls.
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	8/28/20.		wmk.	original code
&apos;//
&apos;//	Notes. Coded by recording macro to do same.

&apos;//	constants.

&apos;//	local variables.
dim document   as object
dim dispatcher as object

	&apos;// code.
	&apos;// get access to the document
	document   = ThisComponent.CurrentController.Frame
	dispatcher = createUnoService(&quot;com.sun.star.frame.DispatchHelper&quot;)

	&apos;// set up arguments for uno:GoToCell interface
	dim args1(0) as new com.sun.star.beans.PropertyValue
	args1(0).Name = &quot;ToPoint&quot;
	args1(0).Value = &quot;$A$6&quot;

	dispatcher.executeDispatch(document, &quot;.uno:GoToCell&quot;, &quot;&quot;, 0, args1())

	&apos;// Freeze panes at row/column $A$6
	dispatcher.executeDispatch(document, &quot;.uno:FreezePanes&quot;, &quot;&quot;, 0, Array())

end sub		&apos;// end FreezeView		8/28/20
&apos;/**/

&apos;// fIdxColName.bas
&apos;//-----------------------------------------------------------
&apos;// fIdxColName - convert numerical index to column letter(s).
&apos;//		wmk. 9/1/20.	14:45
&apos;//-----------------------------------------------------------
function fIdxColName( plColIndex ) as string

&apos;//	Usage.	sColumn = fIdxColName( lColIndex )
&apos;//
&apos;//			lColIndex = 0-based column index (long)
&apos;//
&apos;//	Exit.	sColumn = &quot;A&quot; .. &quot;ZZ&quot;
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	5/13/20		wmk.	original code
&apos;//	5/15/20.	wmk.	docuentation and name change from fIdxCol to fIdxColName
&apos;//	9/1/20.		wmk.	returned valu misspelling corrected
&apos;//
&apos;//	Notes.	method:
&apos;// subtract 25, if 0 or less in A-Z
&apos;// else [A..Z][A..Z]
&apos;//     divide by 26; (whole amount-1)+chr(65)is left half
&apos;//                   remainder + chr(65) is right half


&apos;//	local variables.

dim sColumn as string
dim lColIndex as long
dim iLftIndex as integer
dim iRightOffset as integer

	&apos;// code.

	lColIndex = plColIndex

	sColumn = &quot;You gotta be kidding&quot;

	If plColIndex &lt;= 25 Then
		sColumn = CHR(65+plColIndex)
	Elseif plColIndex &gt; 625 then
		sColumn &quot;ZZ&quot;		&apos;// only up to 625 for now...
	Else
		iLftIndex = lColIndex/26
		iRightOffset = lColIndex - 26*(iLftIndex)
		sColumn = CHR(65+iLftIndex-1) + CHR(65+iRightOffset)
	Endif

	fIdxColName = sColumn
end	function	&apos;// end fIdxColNam function		9/1/20
&apos;/**/

&apos;// fsAddrToSCFormat.bas
&apos;//---------------------------------------------------------------
&apos;// fsAddrToSCFormat - Convert FullAddress to SC formatted address.
&apos;//		10/12/20.	wmk.	17:30
&apos;//---------------------------------------------------------------

public function fsAddrToSCFormat(psFullAddr As String) As String

&apos;//	Usage.	macro call or
&apos;//			sSCAddr = fsAddrToSCFormat( sFullAddr )
&apos;//
&apos;//		sFullAddr = full address from concatenation routines
&apos;//			&lt;number&gt;&lt;b&gt;&lt;b&gt;&lt;b&gt;&lt;street&gt;&lt;street_suffix&gt;&lt;b&gt;&lt;unit&gt;&lt;b&gt;&lt;post-dir&gt;
&apos;//
&apos;// Entry.
&apos;//
&apos;//	Exit.	sSCAddr = SCPA formatted address:
&apos;//			&lt;number&gt;&lt;post-dir&gt;&lt;b*2&gt;&lt;street&gt;&lt;street_suffix&gt;[&lt;b_35&gt;&lt;unit&gt;]
&apos;//			or &lt;number&gt;&lt;b*3&gt;&lt;street&gt;&lt;street_suffix&gt;[&lt;b_35&gt;&lt;unit&gt;]
&apos;//			where b is space, b_35 is spacing through col 35
&apos;//			for now, only the 2nd format is generated
&apos;//
&apos;// Calls.
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	9/17/20.	wmk.	original code
&apos;// 9/18/20.	wmk.	dead code removed
&apos;//	10/12/20.	wmk.	bug fix where unit number not always starting
&apos;// 					in col 36; (ConcatAddrM fixed, documentation
&apos;//						updated.
&apos;//
&apos;//	Notes. This is designed to generate an address format that is
&apos;//	compatible with SCPA download-generated database property addresses
&apos;//	to facilitate queries, searches and updates. Apparently, if a number
&apos;// has a directional suffix, only 2 spaces intervene between that
&apos;// and the street name. The street address is a fixed-length field
&apos;// that ends at column 35, with the unit number always beginning in
&apos;// col 36. The best guess for situs address is to not use the post-dir
&apos;// at all in the SC address.
&apos;// It appears that in most cases in SC data, the direction suffix has
&apos;// been left out of the SitusAddress. For the time being, the post-direction
&apos;// will just be dropped, as it stands a better chance of matching the
&apos;// SC data address. An exceptions list can eventually be developed that
&apos;// can be used to check for exceptions where the directional suffix is
&apos;// part of the number token in the SC data (e.g.526S HARBOR DR).

&apos;//	constants.
const COL_NUMBER=2			&apos;// house number
const COL_PREDIR=3			&apos;// street pre-direction
const COL_STREET=4			&apos;// street name
const COL_SUFFIX=5			&apos;// street suffix (e.g. Ave)
const COL_POSTDIR=6			&apos;// street post direction
const COL_UNIT=7			&apos;// unit/apt #
const YELLOW=16776960		&apos;// decimal value of YELLOW color
const BLANKS_30=&quot;                              &quot;	&apos;// exactly 30 spaces
const BLANKS_17=&quot;                 &quot;	&apos;// exactly 17 spaces
const BLANKS_3=&quot;   &quot;				&apos;// exactly 3 spaces
const BLANKS_2=&quot;  &quot;					&apos;// exactly 2 spaces

&apos;//	local variables.
dim sRetValue	As String	&apos;// returned value
Dim oDoc As Object
Dim oSheet As Object
Dim NewColumn As Object
dim oSel as Object
dim iSheetIx as integer
dim oRange as Object
dim lThisRow as long		&apos;// current row selected on sheet

&apos;// processing variables.
dim sAddress As String		&apos;// address field from current row
dim sPrefix	As String		&apos;// url generated from sAddress
dim sStreet	As String		&apos;// HYPERTEXT link to store
dim sSuffix As String		&apos;// 
dim sUnit	As String
dim sPreDir	As String		&apos;// pre-direction letter

dim sRight2		As String	&apos;// rightmost 2 of passed address
dim sDir		As String	&apos;// anticipated leading space of last 2
dim sSeps		As String	&apos;// string of separators to find &apos;NSEW&apos;
dim sSepFnd		As String	&apos;// anticipated direction NSEW	
dim bHaveDir	As Boolean	&apos;// have direction flag
dim nSpaces		As Integer	&apos;// number of fill spaces to col 36

&apos;// XCell sheet objects
dim oCellAddr as object		&apos;// address field
dim oCity 	As object		&apos;// city for sheet
dim sCity	As String		&apos;// city from sheet

&apos;// code.
	ON ERROR GOTO ErrorHandler
	sRetValue = psFullAddr		&apos;// stub; just echo back passed address
	
	&apos;// at the right end of the full address check for
	&apos;// &lt;b&gt;{N,S,E,W}*1; if is there, assume it is direction and delete it.
	&apos;// modify the Concat routines to place exactly the correct spacing
	&apos;// to start the unit token in col 36, so that no other
	&apos;// action is necessary to get the two address formats to match.
	
&apos;// begin new code.
dim sNoUnitAddr		As String	&apos;// full address with unit stripped
dim sUnitAddr		As String	&apos;// unit stripped from address
dim nBlanks			As Integer	&apos;// space fill count

	sAddress = psFullAddr
	sNoUnitAddr = trim(left(sAddress,35))&apos;// unit always starts at 36
	sUnitAddr = Mid(sAddress,36,len(sAddress))		&apos;// grab unit substring
	
	sRight2 = Right(sNoUnitAddr, 2)
	sSeps=&quot;NSEW&quot;
	Crack(sRight2, sSeps, sDir, sSepFnd)
	bHaveDir = (StrComp(sDir, &quot; &quot;) = 0)
	if bHaveDir then
		bHaveDir = (InStr(&quot;NSEW&quot;, sSepFnd) &gt; 0)
	endif
	
	&apos;// if have direction, drop it, otherwise leave address alone
	if bHaveDir then
		sRetValue = Left(sNoUnitAddr, Len(sNoUnitAddr)-2)
	else
		sRetValue = sNoUnitAddr
	endif

    if len(sRetValue) &lt; 35 then
		nBlanks = 35 - len(sRetValue)
		sRetValue = sRetValue + left(BLANKS_30, nBlanks)
    endif
    sRetValue = sRetValue + sUnitAddr
	sRetValue = trim(sRetValue)

NormalExit:
	fsAddrToSCFormat = sRetValue
	exit function
	
ErrorHandler:	
	msgbox(&quot;fsAddrToSCFormat - unprocessed error.&quot;)
	GoTo NormalExit

end function	&apos;// end fsAddrToSCFormat	10/12/20.
&apos;/**/

&apos;// fsConcatRawAddress.bas
&apos;//---------------------------------------------------------------
&apos;// fsConcatRawAddress - Concatenate Number, Predirectional, Street,
&apos;//	  Street Suffix, Unit into single address field.
&apos;//		9/18/20.	wmk.	12:00
&apos;//---------------------------------------------------------------

public function fsConcatRawAddress(plRow As long) As String

&apos;//	Usage.	macro call or
&apos;//			sFullAddr = fsConcatRawAddress( lRow )
&apos;//
&apos;//		lRow = row containing address information to concatenate
&apos;//				in RefUSA raw data columns C - H
&apos;//
&apos;// Entry.	user has selected row(s) in which to concatenate address fields
&apos;//			each row should have an empty column to its right in which
&apos;//			to place the concatenated address information
&apos;//
&apos;//	Exit.	concatenated address is in form:
&apos;//			&lt;Number&gt;&lt;b*3&gt;&lt;Street&gt;&lt;b&gt;&lt;Street Suffix&gt;&lt;b*17&gt;&lt;Unit&gt;
&apos;//			where &lt;b&gt; is a single space
&apos;//			also trim all source fields to eliminate house numbers
&apos;//			which were imported as 10-character, right-justified,
&apos;//			space-filled fields
&apos;//
&apos;// Calls.
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	9/13//20.	wmk.	original code; adapted from ConcatAddressM
&apos;//	9/15/20.	wmk.	modified to insert 3 spaces between number token
&apos;//						and street token for SCPA address compatibility
&apos;//						also move pre-direction to post-direction space
&apos;//	9/18/20.	wmk.	constants added for spacing fields
&apos;//
&apos;//	Notes. Column indexes for the address fields are for raw .csv spreadsheet
&apos;// taken from ReferenceUSA download.

&apos;//	constants.
const COL_NUMBER=2			&apos;// house number
const COL_PREDIR=3			&apos;// street pre-direction
const COL_STREET=4			&apos;// street name
const COL_SUFFIX=5			&apos;// street suffix (e.g. Ave)
const COL_POSTDIR=6			&apos;// street post direction
const COL_UNIT=7			&apos;// unit/apt #
const YELLOW=16776960		&apos;// decimal value of YELLOW color
const BLANKS_17=&quot;                 &quot;	&apos;// exactly 17 spaces
const BLANKS_3=&quot;   &quot;				&apos;// exactly 3 spaces
const BLANKS_2=&quot;  &quot;					&apos;// exactly 2 spaces

&apos;//	local variables.
dim sRetValue	As String	&apos;// returned value
Dim oDoc As Object
Dim oSheet As Object
Dim NewColumn As Object
dim oSel as Object
dim iSheetIx as integer
dim oRange as Object
dim lThisRow as long		&apos;// current row selected on sheet

&apos;// processing variables.
dim sAddress As String		&apos;// address field from current row
dim sPrefix	As String		&apos;// url generated from sAddress
dim sStreet	As String		&apos;// HYPERTEXT link to store
dim sSuffix As String		&apos;// 
dim sUnit	As String
dim sPreDir	As String		&apos;// pre-direction letter

&apos;// XCell sheet objects
dim oCellAddr as object		&apos;// address field
dim oCity 	As object		&apos;// city for sheet
dim sCity	As String		&apos;// city from sheet

&apos;// code.
	ON ERROR GOTO ErrorHandler
	sRetValue = &quot;&quot;
	oDoc = ThisComponent
	oSel = oDoc.getCurrentSelection()
	oRange = oSel.RangeAddress
	iSheetIx = oRange.Sheet
	oSheet = oDoc.Sheets(iSheetIx)
	lThisRow = plRow

	&apos;// Concatenate address
	oCellAddr = oSheet.getCellByPosition(COL_NUMBER, lThisRow)
	oCellAddr.String = trim(oCellAddr.String)		
	sAddress = oCellAddr.String						&apos;// set number token text
	oCellAddr.String = trim(oCellAddr.String)		&apos;// set cell address text
	oCellAddr = oSheet.getCellByPosition(COL_PREDIR, lThisRow)
	sPreDir = oCellAddr.String				&apos;// save pre-direction for post..
	oCellAddr = oSheet.getCellByPosition(COL_STREET, lThisRow)
	oCellAddr.String = trim(oCellAddr.String)		&apos;// set street token
	sAddress = sAddress + BLANKS_3 + oCellAddr.String	&apos;// 3 spaces past number
	oCellAddr = oSheet.getCellByPosition(COL_SUFFIX, lThisRow)
	oCellAddr.String = trim(oCellAddr.String)
	sAddress = sAddress + &quot; &quot; + oCellAddr.String	&apos;// set Ave, St, etc
	oCellAddr = oSheet.getCellByPosition(COL_POSTDIR, lThisRow)
	oCellAddr.String = trim(oCellAddr.String)		&apos;// get post-direction
	if len(sPreDir) &gt; 0 then
		sAddress = sAddress + &quot; &quot; + sPreDir			&apos;// set non-empty pre-direction
	endif
	if len(oCellAddr.String) &gt; 0 then
		sAddress = sAddress + &quot; &quot; + oCellAddr.String	&apos;// set post-direction
	endif
	oCellAddr = oSheet.getCellByPosition(COL_UNIT, lThisRow)
	oCellAddr.String = trim(oCellAddr.String)
	if len(oCellAddr.String) &gt; 0 then
		sAddress = sAddress + BLANKS_17 + oCellAddr.String	&apos;// add unit text
	endif

	sRetValue = trim(sAddress)

NormalExit:
	fsConcatRawAddress = sRetValue
&apos;	msgbox(&quot;fsConcatRawAddress complete. &quot; + nRowsProcessed + &quot; rows processed.&quot;)
	exit function
	
ErrorHandler:	
	msgbox(&quot;fsConcatRawAddress - unprocessed error.&quot;)
	GoTo NormalExit

end function	&apos;// end fsConcatRawAddress	9/18/20.
&apos;/**/

&apos;// fsConcatCityToZip.bas
&apos;//---------------------------------------------------------------
&apos;// fsConcatCityToZip - Concatenate City, State, Zip.
&apos;//		9/7/20.	wmk.	17:15
&apos;//---------------------------------------------------------------

public function fsConcatCityToZip() as String

&apos;//	Usage.	sCity_Zip = fsConcatCityToZip()
&apos;//
&apos;// Entry.	B3 = City
&apos;//			C3 = Zip
&apos;//
&apos;//	Exit.	sCity_Zip = B3$ + &quot;FL&quot; + C3$
&apos;//
&apos;// Calls.
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	9/7/20.		wmk.	original code
&apos;//
&apos;//	Notes.
&apos;//

&apos;//	constants.
const COL_CITY=1		&apos;// B
const COL_ZIP=2			&apos;// C
const ROW_CITYZIP=2		&apos;// 3

&apos;//	local variables.
&apos;//	local variables.
Dim oDoc As Object
Dim oSheet As Object
Dim NewColumn As Object
dim oSel as Object
dim iSheetIx as integer
dim oRange as Object
dim lThisRow as long		&apos;// current row selected on sheet
dim oMrgRange	As Object	&apos;// merge range

dim oCell	As Object		&apos;// cell working on
dim sRetValue As String
dim sCityZip As String		&apos;// concatenation strin

	&apos;// code.
	ON ERROR GOTO ErrorHandler	
	sRetValue = &quot;&quot;
	oDoc = ThisComponent
	oSel = oDoc.getCurrentSelection()
	oRange = oSel.RangeAddress
	iSheetIx = oRange.Sheet
	oSheet = oDoc.Sheets(iSheetIx)

	sCityZip = &quot;&quot;
	oCell = oSheet.getCellByPosition(COL_CITY, ROW_CITYZIP)
	sCityZip = trim(oCell.String) + &quot; FL &quot;
	oCell = oSheet.getCellByPosition(COL_ZIP, ROW_CITYZIP)
	sCityZip = sCityZip + trim(oCell.String)
	
	sRetValue = sCityZip
	
NormalExit:	
	fsConcatCityToZip = sRetValue
	exit function

ErrorHandler:
   msgbox(&quot;fsConcatCityToZip - unprocessed error.&quot;)
   GoTo NormalExit
   
end function 	&apos;// end fsConcatCityToZip		9/7/20
&apos;/**/

&apos;// fsStripSCUnit.bas
&apos;//---------------------------------------------------------------
&apos;// fsStripSCUnit - Strip unit field from SC Situs Address.
&apos;//		9/22/20.	wmk.	12:15
&apos;//---------------------------------------------------------------

public function fsStripSCUnit(psSitusAddr As String) As String

&apos;//	Usage.	sSrchAddr = fsStripSCUnit(SitusAddr)
&apos;//
&apos;//		sSitusAddr = SCPA formatted Situs address
&apos;//
&apos;// Entry.
&apos;//
&apos;//	Exit.	sSrchAddr = situs address with unit field removed and trimmed
&apos;//
&apos;// Calls.
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	9/22/20.		wmk.	original code
&apos;//
&apos;//	Notes. SCPA Situs Address fields contain exactly 17 spaces between the
&apos;// unit and the rest of the address information
&apos;//

&apos;//	constants.
const SPACE_17=&quot;                 &quot;	&apos;// EXACTLY 17 spaces

&apos;//	local variables.
dim sRetValue	As String	&apos;// returned value
dim n17BlanksPos	As Integer	&apos;// location of first of 17 spaces

	&apos;// code.
	ON ERROR GOTO ErrorHandler
	sRetValue = &quot;&quot;
	n17BlanksPos = InStr(psSitusAddr, SPACE_17)
	if n17BlanksPos &gt; 0 then
		sRetValue = trim(Left(psSitusAddr, n17BlanksPos-1))
	else
		sRetValue = psSitusAddr
	endif
	
NormalExit:
	fsStripSCUnit = sRetValue
	exit function
	
ErrorHandler:
	msgbox(&quot;fsStripSCUnit - unprocessed error&quot;)
	GoTo NormalExit
	
end function		&apos;// end fsStripSCUnit	9/22/20
&apos;/**/

&apos;// TestFunctions.bas
&apos;//-----------------------------------------------------
&apos;// This block of functions allows for direct calls from
&apos;// cells to their representative subs for testing.
&apos;// The code is incorporated here to avoid losing
&apos;// stack/interpreter vars by jumping out-of-module.

public function fOpenBQTerr( psTerrID AS String) AS Null

OpenBQTerr( psTerrID )

end function	&apos;// end fOpenBQTerr

public function fAddHdrToQTerr( psTerrID AS String) AS Null

AddHdrToQTerr( psTerrID )

end function	&apos;// end fAddHdrToQTerr

public function fQGetToBizBridge() AS Null

QGetToBizBridge()

end function 	&apos;// end fQGetToBizBridge

&apos;// end block of testing functions.
&apos;//-----------------------------------------------------
&apos;/**/


&apos;// FixSCUnitAddrM.bas
&apos;//-----------------------------------------------------
&apos;// FixSCUnitAddrM - Fix UnitAddress fields by stripping unit token.
&apos;//		9/22/20.	wmk.	12:00
&apos;//---------------------------------------------------------------------

public sub FixSCUnitAddrM()

&apos;//	Usage.	macro call or
&apos;//			call FixSCUnitAddrM()
&apos;//
&apos;// Entry.	Admin-SCEdit formatted sheet is active; user has selected a
&apos;//			range of cells in desired row(s) to
&apos;//			extract the address field from the COL_ADDR column index
&apos;//			strip the unit field, if present, and rewrite
&apos;//
&apos;//	Exit.	each row selected has its UnitAddress field modified to
&apos;//			have no unit #; the unit# information is in the SitusAddress
&apos;//			field at the end of each record
&apos;//
&apos;// Calls.	fsStripSCUnit
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	9/22/20.	wmk.	original code; adapted from GenELinkM
&apos;//
&apos;//	Notes. FixSCUnitAddrM accommodates Bridge data extracted using
&apos;// SQL on an SCPA download full/partial database, then placed in a
&apos;// Bridge spreadsheet from the query .csv file.
&apos;// The import goes through several phases.
&apos;//	The 1st phase is to an Admin-Bridge spreadsheet by taking the
&apos;//	query data and running the SCBridgeToBridge utility on it.
&apos;//
&apos;// The 2nd phase is, using the Admin-Bridge sheet, an Admin-SCEdit sheet
&apos;// is generated that is simplified for data entry/checking. The Admin-SCEdit
&apos;// sheet contains the hyperlinks to search truepeople, 411, and whitepages.
&apos;// GenELinkM is used to place the hyperlinks in the Admin-SCEdit sheet, but
&apos;// before GenELinkM can generate proper links, the unit#s need to be removed
&apos;// from the SC Bridge UnitAddress fields. The original unit information is
&apos;// still preserved in the SitusAddress field near the end of each record.
&apos;//
&apos;//	If there is newer information in the searches, the address records can be
&apos;// edited to either add/change names/phone numbers.
&apos;//
&apos;// The 3rd phase is the Pub-Territory sheet that is generated to go out
&apos;// as a territory sheet to the territory servant and, eventually to the
&apos;// publisher who checks out the territory.
&apos;//
&apos;//	Method. for each row, extract address field from COL_FULLADDR
&apos;//		run the .String of the field through fsStripSCUnit
&apos;//		replace the .String of the field with the stripped address

&apos;//	constants.
const COL_CITY=1
const ROW_CITY=2

&apos;//	constants.
const COL_UNITADDR=1		&apos;// full address from TerrProps/SplitProps UnitAddress
const YELLOW=16776960		&apos;// decimal value of YELLOW color

&apos;// cell formatting constants.
&apos;const LJUST=1		&apos;// left-justify HoriJustify
&apos;const CJUST=2		&apos;// center HoriJustify
&apos;const RJUST=0		&apos;// right-justify HoriJustify
&apos;const YELLOW=16776960		&apos;// decimal value of YELLOW color
&apos;const TXT_HLINK=&quot;HYPERLINK(&quot;&quot;&quot;	&apos;// HYPERLINK prefix

&apos;//	local variables.
Dim oDoc As Object
Dim oSheet As Object
Dim NewColumn As Object
dim oSel as Object
dim iSheetIx as integer
dim oRange as Object
dim lThisRow as long		&apos;// current row selected on sheet

&apos;// processing variables.
dim nRowsProcessed As Integer	&apos;// count of rows processed
dim nRowCount		As Integer	&apos;// # rows to process
dim sAddress As String		&apos;// address field from current row
dim sURL	As String		&apos;// url generated from sAddress
dim sHLink	As String		&apos;// HYPERTEXT link to store
dim i		As Integer		&apos;// loop counter

&apos;// XCell sheet objects
dim oCellAddr as object		&apos;// address field
dim oCellHLink as object	&apos;// hyperlink field
dim oCity 	As object		&apos;// city for sheet
dim sCity	As String		&apos;// city from sheet

	&apos;// code.
	ON ERROR GOTO ErrorHandler
	oDoc = ThisComponent
	oSel = oDoc.getCurrentSelection()
	oRange = oSel.RangeAddress
	iSheetIx = oRange.Sheet
	oSheet = oDoc.Sheets(iSheetIx)
	
	&apos;// extract city applying to sheet
	oCity = oSheet.getCellByPosition(COL_CITY, ROW_CITY)
	sCity = trim(oCity.String)
	if len(sCity) = 0 then
		sCity = &quot;Venice&quot;
	endif
	nRowsProcessed = 0		&apos;// clear processed count

	&apos;// set row processing from oRange information
	lThisRow = oRange.StartRow - 1		&apos;// start at -1 since increment first
	nRowCount = oRange.EndRow - lThisRow	&apos;// set row count to process
	for i = 1 to nRowCount
		lThisRow = lThisRow + 1		&apos;// advance current row
		oCellAddr = oSheet.getCellByPosition(COL_UNITADDR, lThisRow)
		sAddress = trim(oCellAddr.String)		&apos;// set cell address text
		if len(sAddress) = 0 then
			msgBox(&quot;FixSCUnitAddrM  - empty address field; skipping..&quot;) &apos;//
			oCellAddr.CellBackColor = YELLOW
			GoTo Nextfor
		endif	&apos;// null string - alert user, mark row and bail

		&apos;// strip unit from address field and replace
		sAddress = fsStripSCUnit(sAddress)
		oCellAddr.String = sAddress
Nextfor:
		nRowsProcessed = nRowsProcessed + 1

	next i
	
&apos;	msgbox(&quot;FixSCUnitAddrM  - &quot; + nRowsProcessed + &quot; rows processed&quot;)
		
NormalExit:
	exit sub
	
ErrorHandler:
   msgbox(&quot;FixSCUnitAddrM  - unprocessed error.&quot;)
   GoTo NormalExit

end sub		&apos;// end FixSCUnitAddrM 	9/21/20.
&apos;/**/


&apos;// SaveCsvToODS.bas
&apos;//---------------------------------------------------------------
&apos;// SaveCsvToODS - Save current sheet (.csv) to .ods sheet file.
&apos;//		10/12/20.	wmk.	13:45
&apos;//---------------------------------------------------------------

public sub SaveCsvToODS()

&apos;//	Usage.	macro call or
&apos;//			call SaveCsvToODS()
&apos;//
&apos;// Entry.	ThisComponent.URL = &quot;file://&lt;filepath to this Doc&gt;
&apos;//
&apos;//	Exit.	file save to entry URL modified to &apos;.ods&apos;
&apos;//			user focused in new workbook
&apos;//			goCurrDocument set for return to this document
&apos;//
&apos;// Calls.
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	10/11/20.		wmk.	original code
&apos;// 7/9/21.			wmk.	set up for return to goCurrDocument
&apos;//
&apos;//	Notes.
&apos;//

&apos;//	constants.

&apos;//	local variables.
dim sDocURL		As String	&apos;// document URL
dim nURLlen		As Integer	&apos;// URL length
dim sURLBase	As String	&apos;// base of new URL
dim sNewURL		As String	&apos;// new full URL for file save

	&apos;// code.
	ON ERROR GOTO ErrorHandler
	sDocURL = ThisComponent.getURL()
	nURLlen = len(sDocURL)
	sURLBase = left(sDocURL, nURLLen-4)
	sNewURL = sURLBase + &quot;.ods&quot;
	dim document   as object

dim dispatcher as object
rem ----------------------------------------------------------------------
rem get access to the document
document   = ThisComponent.CurrentController.Frame
goCurrDocument = document							&apos;// mod070921
dispatcher = createUnoService(&quot;com.sun.star.frame.DispatchHelper&quot;)

rem ----------------------------------------------------------------------
dim args1(1) as new com.sun.star.beans.PropertyValue
args1(0).Name = &quot;URL&quot;
&apos;args1(0).Value = &quot;file:///media/ubuntu/Windows/Users/Bill/Documents/Cong-Files/Territories/csvs-Dev/Terr102.ods&quot;
args1(0).Value = sNewURL
args1(1).Name = &quot;FilterName&quot;
args1(1).Value = &quot;calc8&quot;

dispatcher.executeDispatch(document, &quot;.uno:SaveAs&quot;, &quot;&quot;, 0, args1())



NormalExit:
	exit sub
	
ErrorHandler:
	msgbox(&quot;SaveCsvToODS - unprocessed error&quot;)
	GoTo NormalExit
	
end sub		&apos;// end SaveCsvToODS		10/12/20
&apos;/**/

&apos;// SaveQcsvODS.bas
&apos;//---------------------------------------------------------------
&apos;// SaveQcsvODS - Save current workbook as .ods file.
&apos;//		9/26/21.	wmk.	16:32
&apos;//---------------------------------------------------------------

public sub SaveQcsvODS(poDoc As Object)

&apos;//	Usage.	macro call or
&apos;//			call SaveQcsvODS(oDoc)
&apos;//
&apos;//		oDoc = document object
&apos;//
&apos;// Entry.	ThisComponent.URL = &quot;file://&lt;filepath to this Doc&gt;
&apos;//			filename assumed to be &quot;Terrxxx.ods&quot;
&apos;//
&apos;//	Exit.	QTerrxxx.csv saved as QTerrxxx.ods with Hdr tab.
&apos;//
&apos;// Calls.
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	2/11/21		wmk.	original code; cloned from SaveBridgeODS
&apos;// 9/26/21.	wmk.	bug fix where focus lost on current frame; set from
&apos;//						passed parameter.
&apos;//
&apos;//	Notes. 
&apos;//

&apos;//	constants.

&apos;//	local variables.
dim document   as object
dim dispatcher as object
dim sDocURL		As String	&apos;// document URL
dim nURLlen		As Integer	&apos;// URL length
dim sURLBase	As String	&apos;// base of new URL
dim sNewURL		As String	&apos;// new full URL for file save

	&apos;// code.
	ON ERROR GOTO ErrorHandler
	document   = poDoc.CurrentController.Frame
	sDocURL = poDoc.getURL()
	nURLlen = len(sDocURL)
	sURLBase = left(sDocURL, nURLLen-4)
	sNewURL = sURLBase + &quot;.ods&quot;

rem ----------------------------------------------------------------------
rem get access to the document
dispatcher = createUnoService(&quot;com.sun.star.frame.DispatchHelper&quot;)

rem ----------------------------------------------------------------------
dim args1(1) as new com.sun.star.beans.PropertyValue
args1(0).Name = &quot;URL&quot;
&apos;args1(0).Value = &quot;file:///media/ubuntu/Windows/Users/Bill/Documents/Cong-Files/Territories/csvs-Dev/Terr102.ods&quot;
args1(0).Value = sNewURL
args1(1).Name = &quot;FilterName&quot;
args1(1).Value = &quot;calc8&quot;

dispatcher.executeDispatch(document, &quot;.uno:SaveAs&quot;, &quot;&quot;, 0, args1())
	
NormalExit:
	exit sub
	
ErrorHandler:
	msgbox(&quot;SaveQcsvODS - unprocessed error&quot;)
	GoTo NormalExit
	
end sub		&apos;// end SaveQcsvODS		9/26/21.	16:32
&apos;/**/

&apos;// SaveXlsx.bas
&apos;//---------------------------------------------------------------
&apos;// SaveXlsx - Save .ods file as .xlsx.
&apos;//		12/23/21.	wmk.	23:13
&apos;//---------------------------------------------------------------

public sub SaveXlsx()

&apos;//	Usage.	macro call or
&apos;//			call SaveXlsx
&apos;//
&apos;//		psSourceName = source filename to save (e.g. &apos;Terr241_PubTerr.ods&apos;)
&apos;//
&apos;// Entry.	Current Sheet name contains Terr id as chars 5-8
&apos;//
&apos;//	Exit.	Current Sheet saved as .xls in folder ~TerrData/Terrxxx
&apos;//
&apos;// Calls.
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	7/2/20.		wmk.	original code.
&apos;// 7/12/21.	WMK.	time stamp comments added.
&apos;// 12/23/21.	wmk.	modified to use csTerrBase, csTerrDataPath module-wide
&apos;//				 constants for multihost support.
&apos;//
&apos;//	Notes. &lt;Insert notes here&gt;
&apos;//

&apos;//	constants.
&apos;const csTerrBase = &quot;defined above&quot;
&apos;const csTerrDataPath = &quot;defined above&quot;

&apos;//	local variables.
dim oDoc		As Object	&apos;// current document
dim sFile		As String	&apos;// file path value to pass to SaveAs
dim sTerrID		As String	&apos;// territory ID to plug in file path
dim sTitle		As String	&apos;// sheet title

rem ----------------------------------------------------------------------
rem define variables
dim document   as object
dim dispatcher as object
rem ----------------------------------------------------------------------

	&apos;// code.
	ON ERROR GOTO ErrorHandler
	oDoc = ThisComponent
	sTitle = oDoc.getTitle()
	sTerrID = mid(sTitle,5,3)
	
	sFile = &quot;file://&quot; &amp; csTerrDataPath
	sFile = sFile &amp; &quot;/Terr&quot; + sTerrID + &quot;/&quot; + &quot;Terr&quot; + sTerrID + &quot;_PubTerr.xlsx&quot;
	
rem get access to the document
document   = ThisComponent.CurrentController.Frame
dispatcher = createUnoService(&quot;com.sun.star.frame.DispatchHelper&quot;)

rem ----------------------------------------------------------------------
rem dispatcher.executeDispatch(document, &quot;.uno:OpenFromCalc&quot;, &quot;&quot;, 0, Array())

rem ----------------------------------------------------------------------
dim args2(1) as new com.sun.star.beans.PropertyValue
args2(0).Name = &quot;URL&quot;
&apos;// args2(0).Value = &quot;file:///media/ubuntu/Windows/Users/Bill/Territories&quot; _
&apos;//   || &quot;/TerrData/Terr241/Terr241_PubTerr.xlsx&quot;
args2(0).Value = sFile
args2(1).Name = &quot;FilterName&quot;
args2(1).Value = &quot;Calc MS Excel 2007 XML&quot;

dispatcher.executeDispatch(document, &quot;.uno:SaveAs&quot;, &quot;&quot;, 0, args2())

if 0 = 1 then
msgbox(&quot;Terr&quot; + sTerrID + &quot;_PubTerr.xlsx created successfully&quot;,0,&quot;SaveXlsx&quot;)
endif

NormalExit:
	exit sub
	
ErrorHandler:
	msgbox(&quot;SaveXlsx - unprocessed error&quot;)
	GoTo NormalExit
	
end sub		&apos;// end SaveXlsx	12/23/21.	23:13
&apos;/**/

&apos;// SaveQSearchTerr.bas
&apos;//---------------------------------------------------------------
&apos;// SaveQSearchTerr - Save current territory sheet to search file.
&apos;//		2/6/21.	wmk.	16:00
&apos;//---------------------------------------------------------------

public sub SaveQSearchTerr()

&apos;//	Usage.	macro call or
&apos;//			call SaveQSearchTerr()
&apos;//
&apos;// Entry.	ThisComponent.URL = &quot;file://&lt;filepath to this Doc&gt;
&apos;//			filename assumed to be &quot;QTerrxxx.ods&quot;
&apos;//
&apos;//	Exit.	file save to entry URL modified to &apos;Terrxxx_Search.ods&apos;
&apos;//
&apos;// Calls.
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	10/13/20.		wmk.	original code
&apos;//
&apos;//	Notes.

&apos;//	constants.

&apos;//	local variables.
dim document   as object
dim dispatcher as object
dim sDocURL		As String	&apos;// document URL
dim nURLlen		As Integer	&apos;// URL length
dim sURLBase	As String	&apos;// base of new URL
dim sNewURL		As String	&apos;// new full URL for file save

	&apos;// code.
	ON ERROR GOTO ErrorHandler
	sDocURL = ThisComponent.getURL()
	nURLlen = len(sDocURL)
	sURLBase = left(sDocURL, nURLLen-4)
	sNewURL = sURLBase + &quot;_PubSearch.ods&quot;

rem ----------------------------------------------------------------------
rem get access to the document
document   = ThisComponent.CurrentController.Frame
dispatcher = createUnoService(&quot;com.sun.star.frame.DispatchHelper&quot;)

rem ----------------------------------------------------------------------
dim args1(1) as new com.sun.star.beans.PropertyValue
args1(0).Name = &quot;URL&quot;
&apos;args1(0).Value = &quot;file:///media/ubuntu/Windows/Users/Bill/Documents/Cong-Files/Territories/csvs-Dev/QTerr102.ods&quot;
args1(0).Value = sNewURL
args1(1).Name = &quot;FilterName&quot;
args1(1).Value = &quot;calc8&quot;

dispatcher.executeDispatch(document, &quot;.uno:SaveAs&quot;, &quot;&quot;, 0, args1())


NormalExit:
	exit sub
	
ErrorHandler:
	msgbox(&quot;SaveQSearchTerr - unprocessed error&quot;)
	GoTo NormalExit
	
end sub		&apos;// end SaveQSearchTerr		2/6/21
&apos;/**/

&apos;// SaveSheetAsCSV.bas
&apos;//---------------------------------------------------------------
&apos;// SaveSheetAsCSV - Save current sheet as .csv file.
&apos;//		10/12/20.	wmk.	20:40
&apos;//---------------------------------------------------------------

public sub SaveSheetAsCSV()

&apos;//	Usage.	macro call or
&apos;//			call SaveSheetAsCSV()
&apos;//
&apos;// Entry.	user has sheet selected that desires saved as .csv file
&apos;//			Note: best if save with only row headings, then data
&apos;//			as opposed to more heading information rows
&apos;//
&apos;//	Exit.	sheet saved on current URL path as &lt;sheet-name&gt;.csv
&apos;//
&apos;// Calls.
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	10/12/20.		wmk.	original code; cloned from macro recording
&apos;//
&apos;//	Notes.
&apos;//

&apos;//	constants.

&apos;//	local variables.
dim oDoc		As Object	&apos;// ThisComponent
dim oSel		As Object	&apos;// current selection
dim oRange		As Object	&apos;// selection RangeAddress
dim iSheetIx	As Integer	&apos;// selected sheet index
dim oSheet		As Object	&apos;// sheet object
dim sSheetName	As String	&apos;// name of this sheet
dim sDocURL	As String		&apos;// URL this string
dim sNewURL		As String		&apos;// new URL to save under
dim nURLLen		As Integer		&apos;// URL length
dim sURLBase	As String		&apos;// URL base string

rem ----------------------------------------------------------------------
rem define variables
dim document   as object
dim dispatcher as object

	&apos;// code.
	ON ERROR GOTO ErrorHandler
	oDoc = ThisComponent
	oSel = oDoc.getCurrentSelection()
	oRange = oSel.RangeAddress
	iSheetIx = oRange.Sheet
	sSheetName = oDoc.Sheets(iSheetIx).Name
	
	&apos;// set up for save as .csv
	&apos;// it is known that the URL will end in &quot;Terrxxx.ods&quot; (11 chars)
	sDocURL = ThisComponent.getURL()
	nURLlen = len(sDocURL)
	sURLBase = left(sDocURL, nURLLen-11)
	sNewURL = sURLBase + sSheetName + &quot;.csv&quot;
	
rem ----------------------------------------------------------------------
rem get access to the document
document   = ThisComponent.CurrentController.Frame
dispatcher = createUnoService(&quot;com.sun.star.frame.DispatchHelper&quot;)

rem ----------------------------------------------------------------------
dim args1(2) as new com.sun.star.beans.PropertyValue
args1(0).Name = &quot;URL&quot;
&apos;args1(0).Value = &quot;file:///media/ubuntu/Windows/Users/Bill/Documents/Cong-Files/Territories/csvs-Dev/Terr102_Bridge.csv&quot;
args1(0).Value = sNewURL
args1(1).Name = &quot;FilterName&quot;
args1(1).Value = &quot;Text - txt - csv (StarCalc)&quot;
args1(2).Name = &quot;FilterOptions&quot;
args1(2).Value = &quot;44,34,76,1,,0,false,true,true,false,false&quot;

dispatcher.executeDispatch(document, &quot;.uno:SaveAs&quot;, &quot;&quot;, 0, args1())


	
NormalExit:
	exit sub
	
ErrorHandler:
	msgbox(&quot;SaveSheetAsCSV - unprocessed error&quot;)
	GoTo NormalExit
	
end sub		&apos;// end SaveSheetAsCSV		10/12/20
&apos;/**/


&apos;// SaveSheetAsODS.bas
&apos;//---------------------------------------------------------------
&apos;// SaveSheetAsODS - Save current sheet as .ods file.
&apos;//		7/10/21.	wmk.	00:23
&apos;//---------------------------------------------------------------

public sub SaveSheetAsODS(poDocument As Object, psURL As String)

&apos;//	Usage.	call SaveSheetAsODS(oDocument As Object, sURL)
&apos;//
&apos;//		poDocument = ThisComponent of worksheet to be saved
&apos;//			Sheets().Name = sheet name/file name to save
&apos;//		psURL = URL to &quot;parent&quot; worksheet and its folder
&apos;//		 (e.g. &quot;file:///media/ubuntu../Working-Files/QTerrxxx.ods&quot;)
&apos;//
&apos;// Entry.	user has sheet selected that desires saved as .ods file
&apos;//			URL of current workbook assumed to be of form:
&apos;//			  ..Territories/TerrData/Terrxxx/Working-Files/Untitled x.ods
&apos;//
&apos;//	Exit.	sheet saved on path ../ as &lt;sheet-name&gt;.ods
&apos;//
&apos;// Calls.
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	7/10/21.		wmk.	original code; adapted from SaveSheetAsCSV
&apos;//
&apos;//	Notes. When you pass a &quot;new&quot; workbook (e.g. &quot;Untitled x&quot;) into this
&apos;// sub, there is no URL associated with it, since it has not been stored
&apos;// in any file system. This sub must create a URL to save with the workbook
&apos;// using the &quot;parent&quot; URL passed in along with the file base name. The
&apos;// .ods suffix will be added by this sub.
&apos;//

&apos;//	constants.

&apos;//	local variables.
dim oDoc		As Object	&apos;// ThisComponent
dim oSel		As Object	&apos;// current selection
dim oRange		As Object	&apos;// selection RangeAddress
dim iSheetIx	As Integer	&apos;// selected sheet index
dim oSheet		As Object	&apos;// sheet object
dim sSheetName	As String	&apos;// name of this sheet/filename
dim sParentURL	As String		&apos;// URL of parent workbook
dim sNewURL		As String		&apos;// new URL to save under
dim nURLLen		As Integer		&apos;// URL length
dim sURLBase	As String		&apos;// URL base string
dim nWFlength	As	Integer		&apos;// &quot;Working-Files/&quot; string length

rem ----------------------------------------------------------------------
rem define variables
dim document   as object
dim dispatcher as object

	&apos;// code.
	ON ERROR GOTO ErrorHandler
&apos;	oDoc = poDocument
&apos;	oDoc = ThisComponent
	sParentURL = psURL
	oSel = poDocument.getCurrentSelection()
	oRange = oSel.RangeAddress
	iSheetIx = oRange.Sheet
	sSheetName = poDocument.Sheets(iSheetIx).Name
	
	&apos;// now construct a new URL for the target file
	&apos;// parent URL up through the last &apos;/&apos; (all except last 11 chars)
	&apos;// &amp; sheet name &amp; .ods
&apos;dim sNewURL		As	String	
dim sOldURLpath	As	String
	sOldURLPath = left(sParentURL, len(sParentURL)-11)	&apos;// sans QTerrxxx.ods
	sNewURL = sOldURLpath &amp; sSheetName &amp; &quot;.ods&quot;

if 1 = 1 then
  GoTo NormalExit
endif

if 1 = 0 then	
	&apos;// set up for save as .csv
	&apos;// need to save &quot;Untitled x&quot;
	&apos;// it is known that the URL will end in &quot;Terrxxx.ods&quot; (11 chars)
	nURLlen = len(sDocURL)
	&apos;// URL length -11 (filename) - Working-Files/
	nWFlength = len(&quot;Working-Files/&quot;)
	sURLBase = left(sDocURL, nURLLen-11-nWFlength)
	sNewURL = sURLBase + sSheetName + &quot;.ods&quot;
endif
	
rem ----------------------------------------------------------------------
rem get access to the document
document   = ThisComponent.CurrentController.Frame
dispatcher = createUnoService(&quot;com.sun.star.frame.DispatchHelper&quot;)

rem ----------------------------------------------------------------------
dim args1(1) as new com.sun.star.beans.PropertyValue
args1(0).Name = &quot;URL&quot;
&apos;args1(0).Value = &quot;file:///media/ubuntu/Windows/Users/Bill/Documents/Cong-Files/Territories
&apos;                    /TerrData/Terrxxx/TerrData/Terrxxx_PubTerr.ods&quot;
args1(0).Value = sNewURL
args1(1).Name = &quot;FilterName&quot;
args1(1).Value = &quot;calc8&quot;

dispatcher.executeDispatch(document, &quot;.uno:SaveAs&quot;, &quot;&quot;, 0, args1())


NormalExit:
	exit sub
	
ErrorHandler:
	msgbox(&quot;SaveSheetAsODS - unprocessed error&quot;)
	GoTo NormalExit
	
end sub		&apos;// end SaveSheetAsODS		7/10/21.	00:23
&apos;/**/


&apos;// SaveTerrAsODS.bas
&apos;//---------------------------------------------------------------
&apos;// SaveTerrAsODS - Save current sheet as .ods file.
&apos;//		7/11/21.	wmk.	08:14
&apos;//---------------------------------------------------------------

public sub SaveTerrAsODS(poDocument As Object, psURL As String)

&apos;//	Usage.	call SaveTerrAsODS(oDocument As Object, sURL)
&apos;//
&apos;//		poDocument = ThisComponent of worksheet to be saved
&apos;//			Sheets().Name = sheet name/file name to save
&apos;//		psURL = URL to &quot;parent&quot; worksheet and its folder
&apos;//		 (e.g. &quot;file:///media/ubuntu../Working-Files/QTerrxxx.ods&quot;)
&apos;//
&apos;// Entry.	user has sheet selected that desires saved as .ods file
&apos;//			URL of current workbook assumed to be of form:
&apos;//			  ..Territories/TerrData/Terrxxx/Working-Files/Untitled x.ods
&apos;//
&apos;//	Exit.	sheet saved on path ../ as &lt;sheet-name&gt;.ods
&apos;//
&apos;// Calls.
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	7/11/21.		wmk.	original code; adapted from SaveSheetAsODS
&apos;//
&apos;//	Notes. When you pass a &quot;new&quot; workbook (e.g. &quot;Untitled x&quot;) into this
&apos;// sub, there is no URL associated with it, since it has not been stored
&apos;// in any file system. This sub must create a URL to save with the workbook
&apos;// using the &quot;parent&quot; URL passed in along with the file base name. The
&apos;// .ods suffix will be added by this sub.
&apos;// The difference between SaveTerrAsODS and SaveSheetAsODS is that the
&apos;// parent URL when saving a territory has the folder &quot;Workiing-Files/&quot;
&apos;// at the end that needs to be removed to save the territory in the
&apos;// TerrData folder. SaveSheetAsODS saves to the parent folder.
&apos;//

&apos;//	constants.

&apos;//	local variables.
dim oDoc		As Object	&apos;// ThisComponent
dim oSel		As Object	&apos;// current selection
dim oRange		As Object	&apos;// selection RangeAddress
dim iSheetIx	As Integer	&apos;// selected sheet index
dim oSheet		As Object	&apos;// sheet object
dim sSheetName	As String	&apos;// name of this sheet/filename
dim sParentURL	As String		&apos;// URL of parent workbook
dim sNewURL		As String		&apos;// new URL to save under
dim nURLLen		As Integer		&apos;// URL length
dim sURLBase	As String		&apos;// URL base string
dim nWFlength	As	Integer		&apos;// &quot;Working-Files/&quot; string length

rem ----------------------------------------------------------------------
rem define variables
dim document   as object
dim dispatcher as object

	&apos;// code.
	ON ERROR GOTO ErrorHandler
&apos;	oDoc = poDocument
&apos;	oDoc = ThisComponent
	sParentURL = psURL
	oSel = poDocument.getCurrentSelection()
	oRange = oSel.RangeAddress
	iSheetIx = oRange.Sheet
	sSheetName = poDocument.Sheets(iSheetIx).Name
	
	&apos;// now construct a new URL for the target file
	&apos;// parent URL up through the last &apos;/&apos; (all except last 11 chars)
	&apos;// &amp; sheet name &amp; .ods
&apos;dim sNewURL		As	String	
dim sOldURLpath	As	String
	nWFlength = len(&quot;Working-Files/&quot;)
	sOldURLPath = left(sParentURL, len(sParentURL)-11-nWFlength)	&apos;// sans QTerrxxx.ods
	sNewURL = sOldURLpath &amp; sSheetName &amp; &quot;.ods&quot;

if 1 = 1 then
  GoTo NormalExit
endif

if 1 = 0 then	
	&apos;// set up for save as .csv
	&apos;// need to save &quot;Untitled x&quot;
	&apos;// it is known that the URL will end in &quot;Terrxxx.ods&quot; (11 chars)
	nURLlen = len(sDocURL)
	&apos;// URL length -11 (filename) - Working-Files/
	nWFlength = len(&quot;Working-Files/&quot;)
	sURLBase = left(sDocURL, nURLLen-11-nWFlength)
	sNewURL = sURLBase + sSheetName + &quot;.ods&quot;
endif
	
rem ----------------------------------------------------------------------
rem get access to the document
document   = ThisComponent.CurrentController.Frame
dispatcher = createUnoService(&quot;com.sun.star.frame.DispatchHelper&quot;)

rem ----------------------------------------------------------------------
dim args1(1) as new com.sun.star.beans.PropertyValue
args1(0).Name = &quot;URL&quot;
&apos;args1(0).Value = &quot;file:///media/ubuntu/Windows/Users/Bill/Documents/Cong-Files/Territories
&apos;                    /TerrData/Terrxxx/TerrData/Terrxxx_PubTerr.ods&quot;
args1(0).Value = sNewURL
args1(1).Name = &quot;FilterName&quot;
args1(1).Value = &quot;calc8&quot;

dispatcher.executeDispatch(document, &quot;.uno:SaveAs&quot;, &quot;&quot;, 0, args1())


NormalExit:
	exit sub
	
ErrorHandler:
	msgbox(&quot;SaveTerrAsODS - unprocessed error&quot;)
	GoTo NormalExit
	
end sub		&apos;// end SaveTerrAsODS		7/11/21.	08:14
&apos;/**/

&apos;// SelectActiveRows.bas
&apos;//---------------------------------------------------------------
&apos;// SelectActiveRows - Select active rows containing data.
&apos;//		9/15/20.	wmk.	04:30
&apos;//---------------------------------------------------------------

public sub SelectActiveRows()

&apos;//	Usage.	macro call or
&apos;//			call SelectActiveRows()
&apos;//
&apos;// Entry.	user in a spreadsheet with data in column &quot;A&quot;, starting
&apos;//			in cell $A$6
&apos;//
&apos;//	Exit.	cells $A$6 througn $A$n selected as though user highlighted
&apos;//
&apos;// Calls.
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	8/31/20.	wmk.	original code
&apos;//	9/3/20.		wmk.	bMoreRows added; change to use lThisRow;
&apos;//						both changes to comply with OPTION EXPLICIT
&apos;//	9/15/20.	wmk.	modified to count rows and only call UNO
&apos;//						Dispatcher once to improve performance; error
&apos;//						handling enabled
&apos;//
&apos;//	Notes. SelectActiveRows will loop starting at $A$6 until a row is 
&apos;// found with no data in column A. A6 is assumed non-empty

&apos;// local variables.
dim oDocument   as object
dim oDispatcher as object

Dim oDoc As Object
Dim oSheet As Object
Dim NewColumn As Object
dim oSel as Object
dim iSheetIx as integer
dim oRange as Object
dim lThisRow as long		&apos;// current row selected on sheet
dim oCell		As Object		&apos;// current scan cell
dim bMoreRows	As Boolean
dim nActiveRows	As Integer	&apos;// active row counter

&apos;//	code.
	ON ERROR GOTO ErrorHandler
	oDoc = ThisComponent
	oSel = oDoc.getCurrentSelection()
	oRange = oSel.RangeAddress
	iSheetIx = oRange.Sheet
	oSheet = oDoc.Sheets(iSheetIx)

	oDocument   = ThisComponent.CurrentController.Frame
	oDispatcher = createUnoService(&quot;com.sun.star.frame.DispatchHelper&quot;)

if true then
  GoTo Skip1
endif
	&apos;// loop looking ahead and advancing until empty cell found
&apos;	dim args2(0) as new com.sun.star.beans.PropertyValue
	args2(0).Name = &quot;By&quot;
	args2(0).Value = 1
Skip1:

	bMoreRows = true
	nActiveRows = 0
	lThisRow = 5		&apos;// current row index at A6
	do while bMoreRows
		lThisRow = lThisRow + 1
		oCell = oSheet.getCellByPosition(0, lThisRow)
		bMoreRows = (len(oCell.String) &gt; 0)
		if bMoreRows then
			nActiveRows = nActiveRows + 1
		endif	&apos;// end next row has data conditional
	loop


	&apos;// move to cell $A$6
	dim args1(0) as new com.sun.star.beans.PropertyValue
	args1(0).Name = &quot;ToPoint&quot;
	args1(0).Value = &quot;$A$6&quot;

	oDispatcher.executeDispatch(oDocument, &quot;.uno:GoToCell&quot;, &quot;&quot;, 0, args1())

	if nActiveRows &gt; 0 then
	dim args2(0) as new com.sun.star.beans.PropertyValue
		args2(0).Name = &quot;By&quot;
		args2(0).Value = nActiveRows
		oDispatcher.executeDispatch(oDocument, &quot;.uno:GoDownSel&quot;, &quot;&quot;, 0, args2())
	endif
Skip2:

NormalExit:
	exit sub

ErrorHandler:
	msgbox(&quot;SelectActiveRows - unprocessed error&quot;)
	GoTo NormalExit
	
end sub		&apos;// end SelectActiveRows	9/15/20
&apos;/**/

&apos;// SelActiveSrchRows.bas
&apos;//---------------------------------------------------------------
&apos;// SelActiveSrchRows - Select active Search rows containing data.
&apos;//		3/14/21.	wmk.	13:35
&apos;//---------------------------------------------------------------

public sub SelActiveSrchRows()

&apos;//	Usage.	macro call or
&apos;//			call SelActiveSrchRows()
&apos;//
&apos;// Entry.	user in a spreadsheet with data in column &quot;A&quot;, starting
&apos;//			in cell $A$6
&apos;//
&apos;//	Exit.	cells $A$6 througn $A$n selected as though user highlighted
&apos;//
&apos;// Calls.
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;// 3/14/21.	wmk.	original code; adapted from SelectActiveRows;
&apos;//						modified to get row count from colunn B
&apos;//
&apos;//	Notes. SelActiveSrchRows will loop starting at $B$6 until a row is 
&apos;// found with no data in column B. B6 is assumed non-empty

&apos;// local variables.
dim oDocument   as object
dim oDispatcher as object

Dim oDoc As Object
Dim oSheet As Object
Dim NewColumn As Object
dim oSel as Object
dim iSheetIx as integer
dim oRange as Object
dim lThisRow as long		&apos;// current row selected on sheet
dim oCell		As Object		&apos;// current scan cell
dim bMoreRows	As Boolean
dim nActiveRows	As Integer	&apos;// active row counter

&apos;//	code.
	ON ERROR GOTO ErrorHandler
	oDoc = ThisComponent
	oSel = oDoc.getCurrentSelection()
	oRange = oSel.RangeAddress
	iSheetIx = oRange.Sheet
	oSheet = oDoc.Sheets(iSheetIx)

	oDocument   = ThisComponent.CurrentController.Frame
	oDispatcher = createUnoService(&quot;com.sun.star.frame.DispatchHelper&quot;)

if true then
  GoTo Skip1
endif
	&apos;// loop looking ahead and advancing until empty cell found
&apos;	dim args2(0) as new com.sun.star.beans.PropertyValue
	args2(0).Name = &quot;By&quot;
	args2(0).Value = 1
Skip1:

	bMoreRows = true
	nActiveRows = 0
	lThisRow = 5		&apos;// current row index at A6
	do while bMoreRows
		lThisRow = lThisRow + 1
		oCell = oSheet.getCellByPosition(1, lThisRow)
		bMoreRows = (len(oCell.String) &gt; 0)
		if bMoreRows then
			nActiveRows = nActiveRows + 1
		endif	&apos;// end next row has data conditional
	loop


	&apos;// move to cell $A$6
	dim args1(0) as new com.sun.star.beans.PropertyValue
	args1(0).Name = &quot;ToPoint&quot;
	args1(0).Value = &quot;$A$6&quot;

	oDispatcher.executeDispatch(oDocument, &quot;.uno:GoToCell&quot;, &quot;&quot;, 0, args1())

	if nActiveRows &gt; 0 then
	dim args2(0) as new com.sun.star.beans.PropertyValue
		args2(0).Name = &quot;By&quot;
		args2(0).Value = nActiveRows
		oDispatcher.executeDispatch(oDocument, &quot;.uno:GoDownSel&quot;, &quot;&quot;, 0, args2())
	endif
Skip2:

NormalExit:
	exit sub

ErrorHandler:
	msgbox(&quot;SelActiveSrchRows - unprocessed error&quot;)
	GoTo NormalExit
	
end sub		&apos;// end SelActiveSrchRows	3/14/21.	13:35
&apos;/**/


&apos;// SetBizColWidths.bas
&apos;//----------------------------------------------------------------------
&apos;// SetBizColWidths - Set column widths business Bridge formatted sheet.
&apos;//		9/26.	wmk.	19:08
&apos;//----------------------------------------------------------------------

public sub SetBizColWidths()

&apos;//	Usage.	macro call or
&apos;//			call SetBizColWidths()
&apos;//
&apos;// Entry.	User in Admin-Bridge formatted sheet
&apos;//	OwningParcel  UnitAddress  Unit		  Resident1	 Phone1 Phone2 RefUSA-Phone
&apos;//	 A (from A)	  B (from K)  C (from I)  D (from C)	E	 F		G	
&apos;//
&apos;//  SubTerrItory CongTerrID DoNotCall RSO Foreign  RecordDate	 SitusAddress
&apos;//		H				I		   J     K     L	M (header C2)	N (from N)
&apos;//
&apos;//  Property Use	DelPending
&apos;//		  O				P
&apos;//
&apos;// Calls.
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	9/26/21.	wmk.	orignal code; adapted from SetTerrColWidths.
&apos;// Legacy mods.
&apos;//	9/11/20.	wmk.	original code; adapted from SetEditColWidths
&apos;//	9/18/20.	wmk.	widths readjusted and set through col I
&apos;// 9/30/20.	wmk.	adjust SubTerritory column (H) width to 1.35
&apos;// 10/23/20.	wmk.	adjust width of new Unit Column (C) to 1.0
&apos;//
&apos;//	Notes.

&apos;//	constants.
const ONE_INCH=2540

&apos;// column and row indexes
const COL_A=0
const COL_B=1
const COL_C=2	
const COL_D=3
const COL_E=4
const COL_F=5
const COL_G=6			&apos;// column G index
const COL_H=7			&apos;// column H index
const COL_I=8			&apos;// column I index
const COL_J=9			&apos;// column J index
const COL_K=10			&apos;// column K index
const COL_L=11			&apos;// column L index 
const COL_M=12			&apos;// column M index (DoNotCall)
const COL_N=13			&apos;// column N index (RSO)
const COL_O=14			&apos;// column O index (Foreign)
const ROW_1=0
const ROW_2=1
const ROW_3=2
const ROW_4=3
const ROW_HEADING=4		&apos;// headings row index
const LJUST=1		&apos;// left-justify HoriJustify				&apos;// mod052020
const CJUST=2		&apos;// center HoriJustify						&apos;// mod052020
const RJUST=3		&apos;// right-justify HoriJustify				&apos;// mod052320
const MDYY=30		&apos;// &apos;M/D/YY&apos; format value

&apos;// column widths
const A_WIDTH=2.18
const B_WIDTH=1.75
const C_WIDTH=1.30
const D_WIDTH=1.17
const E_WIDTH=2.53
const F_WIDTH=0.99
const G_WIDTH=0.99
const H_WIDTH=0.45
const I_WIDTH=0.50
const J_WIDTH=0.79
const K_WIDTH=0.85
const L_WIDTH=0.46

&apos;//	local variables.
dim oDocument   as object
dim oDispatcher as object
dim oDoc	As Object	&apos;// ThisComponent
dim oSel	As Object	&apos;// current cell selection on entry
dim oSheet	As Object	&apos;// current sheet
dim oRange	As Object	&apos;// RangeAddress selected
dim iSheetIx	As Integer	&apos;// sheet index this sheet
dim oCols	As Object	&apos;// .Columns array this sheet

	&apos;// code.
	ON ERROR GOTO ErrorHandler
	
	&apos;// preserve user cell selection
	oDoc = ThisComponent
	oSel = oDoc.getCurrentSelection()
	oRange = oSel.RangeAddress
	iSheetIx = oRange.Sheet
	oSheet = oDoc.Sheets(iSheetIx)
	oCols = oSheet.Columns
	oCols(COL_A).setPropertyValue(&quot;Width&quot;, A_WIDTH*ONE_INCH)
	oCols(COL_B).setPropertyValue(&quot;Width&quot;, B_WIDTH*ONE_INCH)
	oCols(COL_C).setPropertyValue(&quot;Width&quot;, C_WIDTH*ONE_INCH)
	oCols(COL_D).setPropertyValue(&quot;Width&quot;, D_WIDTH*ONE_INCH)
	oCols(COL_E).setPropertyValue(&quot;Width&quot;, E_WIDTH*ONE_INCH)
	oCols(COL_F).setPropertyValue(&quot;Width&quot;, F_WIDTH*ONE_INCH)
	oCols(COL_G).setPropertyValue(&quot;Width&quot;, G_WIDTH*ONE_INCH)
	oCols(COL_H).setPropertyValue(&quot;Width&quot;, H_WIDTH*ONE_INCH)
	oCols(COL_I).setPropertyValue(&quot;Width&quot;, I_WIDTH*ONE_INCH)
	oCols(COL_J).setPropertyValue(&quot;Width&quot;, J_WIDTH*ONE_INCH)
	oCols(COL_K).setPropertyValue(&quot;Width&quot;, K_WIDTH*ONE_INCH)
	oCols(COL_L).setPropertyValue(&quot;Width&quot;, L_WIDTH*ONE_INCH)

NormalExit:
	SetSelection(oRange)	&apos;// restore user cell selection
	exit sub
	
ErrorHandler:
	msgbox(&quot;SetBizColWidths - unprocessed error.&quot;)
	
end sub		&apos;// end SetBizColWidths	9/26/21.	19:08
&apos;/**/


&apos;// SetBizHeadings.bas
&apos;//---------------------------------------------------------------
&apos;// SetBizHeadings - Set Admin-Bridge sheet headings.
&apos;//		9/25/21.	wmk.	21:47
&apos;//---------------------------------------------------------------

public sub SetBizHeadings()

&apos;//	Usage.	macro call or
&apos;//			call SetBizHeadings()
&apos;//
&apos;// Entry.	user has Biz-Bridge sheet selected
&apos;//
&apos;//	Exit.	Column headings will be set as follows:
&apos;//	&quot;Company Name&quot;, &quot;UnitAddress&quot;,&quot;Owner&quot;,&quot;Contact Phone&quot;,&quot;Biz Desc&quot;,
&apos;// &quot;OGender&quot;, &quot;OTitle&quot;,&quot;Territory&quot;,&quot;DoNotCall&quot;,&quot;RecordDate&quot;,&quot;SunbizDoc&quot;,
&apos;// &quot;DelPending&quot;
&apos;//
&apos;// Calls. SetColHeadings.
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;// 9/25/21.	wmk.	adapted from SetBridgeHeadings; headings changed
&apos;//						to match Biz Bridge records format
&apos;// Legacy mods.
&apos;//	9/21/20.	wmk.	original code
&apos;// 9/23/20.	wmk.	&quot;PropUse&quot; heading added
&apos;//	10/23/20.	wmk.	Column adjustments; &quot;Unit&quot; replaces Resident1,
&apos;//						&quot;Resident1&quot; replaces Resident2
&apos;// 11/22/20.	wmk.	&quot;Phone2&quot; changed to &quot;H&quot; for homestead
&apos;//
&apos;//	Notes.

&apos;//	constants.

&apos;//	local variables.
dim sColHeadings(11) As String		&apos;// column headings array

	&apos;// code.
	ON ERROR GOTO ErrorHandler
	sColHeadings(0) = &quot;Company Name&quot;	&apos;// 2.18
	sColHeadings(1) = &quot;UnitAddress&quot;		&apos;// 1.45
	sColHeadings(2) = &quot;Owner&quot;			&apos;// 1.30
	sColHeadings(3) = &quot;Contact Phone&quot;	&apos;// 1.17
	sColHeadings(4) = &quot;Biz Desc&quot;		&apos;// 2.53
	sColHeadings(5) = &quot;OGender&quot;			&apos;// 0.99
	sColHeadings(6) = &quot;OTitle&quot;			&apos;// 0.99
	sColHeadings(7) = &quot;Terr&quot;			&apos;// 0.45
	sColHeadings(8) = &quot;DNC&quot;				&apos;// 0.50
	sColHeadings(9) = &quot;RecordDate&quot;		&apos;// 0.79
	sColHeadings(10) = &quot;SunBizDoc&quot;		&apos;// 0.85
	sColHeadings(11) = &quot;Del&quot;			&apos;// 0.46
	SetColHeadings(sColHeadings)
	
NormalExit:
	exit sub
	
ErrorHandler:
	msgbox(&quot;SetBizHeadings - unprocessed error&quot;)
	GoTo NormalExit
	
end sub		&apos;// end SetBizHeadings	9/25/21.	21:47
&apos;/**/


&apos;// SetBridgeColWidths.bas
&apos;//----------------------------------------------------------------------
&apos;// SetBridgeColWidths - Set column widths on Bridge formatted sheet.
&apos;//		10/23/20.	wmk.	04:45
&apos;//----------------------------------------------------------------------

public sub SetBridgeColWidths()

&apos;//	Usage.	macro call or
&apos;//			call SetBridgeColWidths()
&apos;//
&apos;// Entry.	User in Admin-Bridge formatted sheet
&apos;//	OwningParcel  UnitAddress  Unit		  Resident1	 Phone1 Phone2 RefUSA-Phone
&apos;//	 A (from A)	  B (from K)  C (from I)  D (from C)	E	 F		G	
&apos;//
&apos;//  SubTerrItory CongTerrID DoNotCall RSO Foreign  RecordDate	 SitusAddress
&apos;//		H				I		   J     K     L	M (header C2)	N (from N)
&apos;//
&apos;//  Property Use	DelPending
&apos;//		  O				P
&apos;//
&apos;// Calls.
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	9/11/20.	wmk.	original code; adapted from SetEditColWidths
&apos;//	9/18/20.	wmk.	widths readjusted and set through col I
&apos;// 9/30/20.	wmk.	adjust SubTerritory column (H) width to 1.35
&apos;// 10/23/20.	wmk.	adjust width of new Unit Column (C) to 1.0
&apos;//
&apos;//	Notes.

&apos;//	constants.
const ONE_INCH=2540

&apos;// column and row indexes
const COL_A=0
const COL_B=1
const COL_C=2	
const COL_D=3
const COL_E=4
const COL_F=5
const COL_G=6			&apos;// column G index
const COL_H=7			&apos;// column H index
const COL_I=8			&apos;// column I index
const COL_J=9			&apos;// column J index
const COL_K=10			&apos;// column K index
const COL_L=11			&apos;// column L index 
const COL_M=12			&apos;// column M index (DoNotCall)
const COL_N=13			&apos;// column N index (RSO)
const COL_O=14			&apos;// column O index (Foreign)
const ROW_1=0
const ROW_2=1
const ROW_3=2
const ROW_4=3
const ROW_HEADING=4		&apos;// headings row index
const LJUST=1		&apos;// left-justify HoriJustify				&apos;// mod052020
const CJUST=2		&apos;// center HoriJustify						&apos;// mod052020
const RJUST=3		&apos;// right-justify HoriJustify				&apos;// mod052320
const MDYY=30		&apos;// &apos;M/D/YY&apos; format value

&apos;// column widths
const A_WIDTH=1.0
const B_WIDTH=1.75
const C_WIDTH=1.0
const D_WIDTH=1.75
const E_WIDTH=1.0
const F_WIDTH=1.0
const G_WIDTH=1.1
const H_WIDTH=1.35
const I_WIDTH=1.0
const J_WIDTH=1.0
const K_WIDTH=0.45
const L_WIDTH=0.6
const M_WIDTH=0.85
const N_WIDTH=1.75
const O_WIDTH=0.85

&apos;//	local variables.
dim oDocument   as object
dim oDispatcher as object
dim oDoc	As Object	&apos;// ThisComponent
dim oSel	As Object	&apos;// current cell selection on entry
dim oSheet	As Object	&apos;// current sheet
dim oRange	As Object	&apos;// RangeAddress selected
dim iSheetIx	As Integer	&apos;// sheet index this sheet
dim oCols	As Object	&apos;// .Columns array this sheet

	&apos;// code.
	ON ERROR GOTO ErrorHandler
	
	&apos;// preserve user cell selection
	oDoc = ThisComponent
	oSel = oDoc.getCurrentSelection()
	oRange = oSel.RangeAddress
	iSheetIx = oRange.Sheet
	oSheet = oDoc.Sheets(iSheetIx)
	oCols = oSheet.Columns
	oCols(COL_A).setPropertyValue(&quot;Width&quot;, A_WIDTH*ONE_INCH)
	oCols(COL_B).setPropertyValue(&quot;Width&quot;, B_WIDTH*ONE_INCH)
	oCols(COL_C).setPropertyValue(&quot;Width&quot;, C_WIDTH*ONE_INCH)
	oCols(COL_D).setPropertyValue(&quot;Width&quot;, D_WIDTH*ONE_INCH)
	oCols(COL_E).setPropertyValue(&quot;Width&quot;, E_WIDTH*ONE_INCH)
	oCols(COL_F).setPropertyValue(&quot;Width&quot;, F_WIDTH*ONE_INCH)
	oCols(COL_G).setPropertyValue(&quot;Width&quot;, G_WIDTH*ONE_INCH)
	oCols(COL_H).setPropertyValue(&quot;Width&quot;, H_WIDTH*ONE_INCH)
	oCols(COL_I).setPropertyValue(&quot;Width&quot;, I_WIDTH*ONE_INCH)
	oCols(COL_J).setPropertyValue(&quot;Width&quot;, J_WIDTH*ONE_INCH)
	oCols(COL_K).setPropertyValue(&quot;Width&quot;, K_WIDTH*ONE_INCH)
	oCols(COL_L).setPropertyValue(&quot;Width&quot;, L_WIDTH*ONE_INCH)
	oCols(COL_M).setPropertyValue(&quot;Width&quot;, M_WIDTH*ONE_INCH)
	oCols(COL_N).setPropertyValue(&quot;Width&quot;, N_WIDTH*ONE_INCH)
	oCols(COL_O).setPropertyValue(&quot;Width&quot;, O_WIDTH*ONE_INCH)

NormalExit:
	SetSelection(oRange)	&apos;// restore user cell selection
	exit sub
	
ErrorHandler:
	msgbox(&quot;SetBridgeColWidths - unprocessed error.&quot;)
	
end sub		&apos;// end SetBridgeColWidths	10/23/20
&apos;/**/

&apos;// SetBridgeHeadings.bas
&apos;//---------------------------------------------------------------
&apos;// SetBridgeHeadings - Set Admin-Bridge sheet headings.
&apos;//		11/22/20.	wmk.	07:30
&apos;//---------------------------------------------------------------

public sub SetBridgeHeadings()

&apos;//	Usage.	macro call or
&apos;//			call SetBridgeHeadings()
&apos;//
&apos;// Entry.	user has Admin-Bridge sheet selected
&apos;//
&apos;//	Exit.	Column headings will be set as follows:
&apos;//	&quot;OwningParcel&quot;,&quot;UnitAddress&quot;,&quot;Resident1&quot;,&quot;Resident2&quot;,&quot;Phone1&quot;,&quot;Phone2&quot;,
&apos;//	&quot;RefUSA&quot;,&quot;SubTerritory&quot;,&quot;CongTerrID&quot;,&quot;DoNotCall&quot;,&quot;RSO&quot;,&quot;Foreign&quot;,
&apos;// &quot;RecordDate&quot;, &quot;SitusAddress&quot;,&quot;PropUse&quot;,&quot;DelPending&quot;
&apos;//
&apos;// Calls.
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	9/21/20.	wmk.	original code
&apos;// 9/23/20.	wmk.	&quot;PropUse&quot; heading added
&apos;//	10/23/20.	wmk.	Column adjustments; &quot;Unit&quot; replaces Resident1,
&apos;//						&quot;Resident1&quot; replaces Resident2
&apos;// 11/22/20.	wmk.	&quot;Phone2&quot; changed to &quot;H&quot; for homestead
&apos;//
&apos;//	Notes.

&apos;//	constants.

&apos;//	local variables.
dim sColHeadings(15) As String		&apos;// column headings array

	&apos;// code.
	ON ERROR GOTO ErrorHandler
	sColHeadings(0) = &quot;OwningParcel&quot;
	sColHeadings(1) = &quot;UnitAddress&quot;
	sColHeadings(2) = &quot;Unit&quot;
	sColHeadings(3) = &quot;Resident1&quot;
	sColHeadings(4) = &quot;Phone1&quot;
	sColHeadings(5) = &quot;H&quot;
	sColHeadings(6) = &quot;RefUSA&quot;
	sColHeadings(7) = &quot;SubTerritory&quot;
	sColHeadings(8) = &quot;CongTerrID&quot;
	sColHeadings(9) = &quot;DoNotCall&quot;
	sColHeadings(10) = &quot;RSO&quot;
	sColHeadings(11) = &quot;Foreign&quot;
	sColHeadings(12) = &quot;RecordDate&quot;
	sColHeadings(13) = &quot;SitusAddress&quot;
	sColHeadings(14) = &quot;PropUse&quot;
	sColHeadings(15) = &quot;DelPending&quot;
	SetColHeadings(sColHeadings)
	
NormalExit:
	exit sub
	
ErrorHandler:
	msgbox(&quot;SetBridgeHeadings - unprocessed error&quot;)
	GoTo NormalExit
	
end sub		&apos;// end SetBridgeHeadings	11/22/20
&apos;/**/

&apos;// SetColHeadings.bas
&apos;//---------------------------------------------------------------
&apos;// SetColHeadings - Set sheet column headings in row 5.
&apos;//		9/21/20.	wmk.	07:20
&apos;//---------------------------------------------------------------

public sub SetColHeadings( psColHeadings() As String )

&apos;//	Usage.	macro call or
&apos;//			call SetColHeadings( sColHeadings() )
&apos;//
&apos;//		sColHeadings = array of column headings to set
&apos;//
&apos;// Entry.	user in sheet where row 5 is column headings
&apos;//
&apos;//	Exit.	row 5 column headings will be set to array strings
&apos;//
&apos;// Calls.
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	9/21/20.		wmk.	original code
&apos;//
&apos;//	Notes.

&apos;//	constants.
const ROW_HEADING=4		&apos;// row index of heading row
const CJUSt=2			&apos;// centered

&apos;//	local variables.
Dim oDoc As Object
Dim oSheet As Object
dim oSel as Object
dim iSheetIx as integer
dim oRange as Object
dim lThisCol as long		&apos;// current column selected on sheet

dim oCell	As Object		&apos;// cell working on
dim i		As Integer		&apos;// loop index
dim	nColLimit	As Integer	&apos;// column limit 0-based

	&apos;// code.
	ON ERROR GOTO ErrorHandler
	nColLimit = UBound(psColHeadings)
	if nColLimit &lt; 0 then
		GoTo NormalExit
	endif	&apos;// end no column headings conditional
	oDoc = ThisComponent
	oSel = oDoc.getCurrentSelection()
	oRange = oSel.RangeAddress
	iSheetIx = oRange.Sheet
	oSheet = oDoc.Sheets(iSheetIx)

	for i = 0 to nColLimit
		oCell = oSheet.getCellByPosition(i, ROW_HEADING)
		oCell.String = psColHeadings(i)
		oCell.HoriJustify = CJUST
	next i
	
NormalExit:
	exit sub
	
ErrorHandler:
	msgbox(&quot;SetColHeadings - unprocessed error&quot;)
	GoTo NormalExit
	
end sub		&apos;// end SetColHeadings		9/21/20
&apos;/**/

&apos;// SetColWidth.bas
&apos;//---------------------------------------------------------------
&apos;// SetColWidth - Set column width for specified column.
&apos;//		9/11/20.	wmk.	22:30
&apos;//---------------------------------------------------------------

public sub SetColWidth(plCol As Long, pdWidth As Single)

&apos;//	Usage.	call SetColWidth(lCol, dWidth)
&apos;//
&apos;//		lCol - column index on which to set width
&apos;//		dWidth - column width to set (inches&quot;
&apos;//
&apos;// Entry.	User in RefUSA/Admin formatted territory sheet
&apos;//
&apos;//	Exit.	column lCol width set to dWidth&quot; (2540=1&quot;)
&apos;//
&apos;// Calls.	PushSelection, PopSelection, fIdxColName
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	9/2/20.		wmk.	original code
&apos;// 9/5/20.		wmk.	separated params for dispatcher call
&apos;//
&apos;//	Notes. Column width is specified in inches, 2540 = 1 inch.
&apos;//	PushSelection, PopSelection and associated &quot;static&quot; vars must
&apos;// be in the same module as this sub.

&apos;//	constants.
const	INCH_BASE=2540

&apos;//	local variables.
dim oDocument   as object
dim oDispatcher as object
dim sCellName	As String	&apos;// cell name in format $col$row
dim sColName	As String	&apos;// column name
dim oDoc		As Object	&apos;// ThisComponent
dim oSel		As Object	&apos;// selected Range is here .RangeAddress
dim oRange		As Object	&apos;// range selected
dim oSheet		As Object	&apos;// this sheet
dim oCols		As Object	&apos;// .Columns this sheet
dim iSheetIx	As Integer	&apos;// this sheet index

	&apos;// code.
	oDoc = ThisComponent
	oSel = oDoc.getCurrentSelection()
	oRange = oSel.RangeAddress
	iSheetIx = oRange.Sheet
	oSheet = oDoc.Sheets(iSheetIx)
	oCols = oSheet.Columns
	oCols(plCol).setPropertyValue(&quot;Width&quot;, pdWidth*INCH_BASE)

if true then
	GoTo EndOldCode
endif

&apos;//----------------------------------------------------------------
	sColName = &quot;&quot;		&apos;// empty column name

	&apos;// preserve current selection
	
	oDocument   = ThisComponent.CurrentController.Frame
	oDispatcher = createUnoService(&quot;com.sun.star.frame.DispatchHelper&quot;)

	&apos;// set column width for selected to specified width

	&apos;// set up arguments for uno:GoToCell interface
	sColName = fIdxColName(plCol)
	sCellName = &quot;$&quot; + sColName + &quot;$1&quot;		&apos;// set 1st row as target
	dim args1(0) as new com.sun.star.beans.PropertyValue
	args1(0).Name = &quot;ToPoint&quot;
	args1(0).Value = sCellName

	oDispatcher.executeDispatch(oDocument, &quot;.uno:GoToCell&quot;, &quot;&quot;, 0, args1())


rem ----------------------------------------------------------------------
dim args2(0) as new com.sun.star.beans.PropertyValue
	args2(0).Name = &quot;ColumnWidth&quot;
	args2(0).Value = pdWidth * INCH_BASE

	oDispatcher.executeDispatch(oDocument, &quot;.uno:ColumnWidth&quot;, &quot;&quot;, 0, args2())
&apos;dim args1(0) as new com.sun.star.beans.PropertyValue
&apos;	args1(0).Name = &quot;ColumnWidth&quot;
&apos;	args1(0).Value = pdWidth * INCH_BASE

&apos;	oDispatcher.executeDispatch(oDocument, &quot;.uno:ColumnWidth&quot;, &quot;&quot;, 0, args1())
&apos;//---------------------------------------------------------------------------
EndOldCode:	
NormalExit:
	SetSelection(oRange)		&apos;// restore user selection on entry
	exit sub
	
ErrorHandler:
	msgbox(&quot;SetColWidth - unprocessed error.&quot;)
	GoTo NormalExit
	
end sub		&apos;// end SetColWidth	9/11/20
&apos;/**/

&apos;// SetColWidths.bas
&apos;//---------------------------------------------------------------
&apos;// SetColWidths - Set sheet column headings in row 5.
&apos;//		9/21/20.	wmk.	14:30
&apos;//---------------------------------------------------------------

public sub SetColWidths( pnColWidths() As Integer )

&apos;//	Usage.	macro call or
&apos;//			call SetColWidths( nColWidths() )
&apos;//
&apos;//		sColWidths = array of column headings to set
&apos;//
&apos;// Entry.	user in sheet where column widths are to be set
&apos;//
&apos;//	Exit.	starting with column index 0, columns widths will be set
&apos;//			from array values
&apos;//
&apos;// Calls.
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	9/21/20.		wmk.	original code
&apos;//
&apos;//	Notes.

&apos;//	constants.
const ROW_HEADING=4		&apos;// row index of heading row
const CJUSt=2			&apos;// centered

&apos;//	local variables.
Dim oDoc As Object
Dim oSheet As Object
dim oSel as Object
dim iSheetIx as integer
dim oRange as Object
dim lThisCol as long		&apos;// current column selected on sheet
dim oCols	As Object		&apos;// .Columns array current sheet

dim oCell	As Object		&apos;// cell working on
dim i		As Integer		&apos;// loop index
dim	nColLimit	As Integer	&apos;// column limit 0-based

	&apos;// code.
	ON ERROR GOTO ErrorHandler
	nColLimit = UBound(pnColWidths)
	if nColLimit &lt; 0 then
		GoTo NormalExit
	endif	&apos;// end no column headings conditional
	oDoc = ThisComponent
	oSel = oDoc.getCurrentSelection()
	oRange = oSel.RangeAddress
	iSheetIx = oRange.Sheet
	oSheet = oDoc.Sheets(iSheetIx)
	oCols = oSheet.Columns
	
	for i = 0 to nColLimit
		oCols(i).setPropertyValue(&quot;Width&quot;, pnColWidths(i))
	next i
	
NormalExit:
	exit sub
	
ErrorHandler:
	msgbox(&quot;SetColWidths - unprocessed error&quot;)
	GoTo NormalExit
	
end sub		&apos;// end SetColWidths		9/21/20
&apos;/**/

&apos;// SetEditColWidths.bas
&apos;//----------------------------------------------------------------------
&apos;// SetEditColWidths - Set column widths on Edit formatted sheet columns.
&apos;//		9/12/20.	wmk.	08:30
&apos;//----------------------------------------------------------------------

public sub SetEditColWidths()

&apos;//	Usage.	macro call or
&apos;//			call SetEditColWidths()
&apos;//
&apos;// Entry.	User in Edit formatted territory sheet
&apos;//
&apos;//	Exit.	A = 1.0&quot;, B = 1.75, C = 1.75&quot;, D = 1.75, E = 1.0, F = 1.0&quot;
&apos;//			G = 1.1&quot;, H = 1.34, I = 1.34, J = 1.34, K = 1.34, L = 0.9&quot;
&apos;//			M = 0.9&quot;, N = 0.9&quot;, O = 0.9&quot;, P = 0.9&quot;
&apos;//
&apos;// Calls.
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	9/9/20.		wmk.	original code
&apos;//	9/12/20.	wmk.	code simplification
&apos;//
&apos;//	Notes. UNO Dispatcher exits this module, corrupting any module-wide
&apos;//	vars. Only way to preserve user cell selection on entry is in local
&apos;//	vars this sub.

&apos;//	constants.
const ONE_INCH=2540

&apos;// columns and other definitions
const COL_PARCEL=0		&apos;// &quot;OwningParcel&quot; column index
const COL_A=0
const COL_B=1
const COL_C=2	
const COL_D=3
const COL_E=4
const COL_F=5
const COL_G=6			&apos;// column G index
const COL_H=7			&apos;// column H index
const COL_I=8			&apos;// column I index
const COL_J=9			&apos;// column J index
const COL_K=10			&apos;// column K index
const COL_L=11			&apos;// column L index 
const COL_M=12			&apos;// column M index (DoNotCall)
const COL_N=13			&apos;// column N index (RSO)
const COL_O=14			&apos;// column O index (Foreign)
const COL_P=15			&apos;// column P index (RecordDate)
const ROW_1=0
const ROW_2=1
const ROW_3=2
const ROW_4=3
const ROW_HEADING=4		&apos;// headings row index
const LJUST=1		&apos;// left-justify HoriJustify				&apos;// mod052020
const CJUST=2		&apos;// center HoriJustify						&apos;// mod052020
const RJUST=3		&apos;// right-justify HoriJustify				&apos;// mod052320
const MDYY=30		&apos;// &apos;M/D/YY&apos; format value

&apos;// column widths
const A_WIDTH=1.0
const B_WIDTH=1.75
const C_WIDTH=1.75
const D_WIDTH=1.75
const E_WIDTH=1.0
const F_WIDTH=1.0
const G_WIDTH=1.1
const H_WIDTH=1.34
const I_WIDTH=1.34
const J_WIDTH=1.34
const K_WIDTH=1.34
const L_WIDTH=0.9
const M_WIDTH=0.9
const N_WIDTH=0.9
const O_WIDTH=0.9
const P_WIDTH=0.9

&apos;//	local variables.
dim oDocument   as object
dim oDispatcher as object
dim oDoc	As Object	&apos;// ThisComponent
dim oSel	As Object	&apos;// current cell selection on entry
dim oRange	As Object	&apos;// RangeAddress selected
dim iSheetIx	As Integer	&apos;// this sheet index
dim oSheet	As Object	&apos;// this sheet
dim oCols	As Object	&apos;// .Columns this sheet

	&apos;// code.
	ON ERROR GOTO ErrorHandler
	
	&apos;// preserve user cell selection
	oDoc = ThisComponent
	oSel = oDoc.getCurrentSelection()
	oRange = oSel.RangeAddress
	iSheetIx = oRange.Sheet
	oSheet = oDoc.Sheets(iSheetIx)
	oCols = oSheets.Columns

	&apos;// set A-G widths
	oCols(COL_A).setPropertyValue(&quot;Width&quot;, A_WIDTH*ONE_INCH)
	oCols(COL_B).setPropertyValue(&quot;Width&quot;, B_WIDTH*ONE_INCH)
	oCols(COL_C).setPropertyValue(&quot;Width&quot;, C_WIDTH*ONE_INCH)
	oCols(COL_D).setPropertyValue(&quot;Width&quot;, D_WIDTH*ONE_INCH)
	oCols(COL_E).setPropertyValue(&quot;Width&quot;, E_WIDTH*ONE_INCH)
	oCols(COL_F).setPropertyValue(&quot;Width&quot;, F_WIDTH*ONE_INCH)
	oCols(COL_G).setPropertyValue(&quot;Width&quot;, G_WIDTH*ONE_INCH)
	
	&apos;// set H, I, J widths
	SetSearchWidths()
	
	&apos;// set K-P widths
	oCols(COL_K).setPropertyValue(&quot;Width&quot;, K_WIDTH*ONE_INCH)
	oCols(COL_L).setPropertyValue(&quot;Width&quot;, L_WIDTH*ONE_INCH)
	oCols(COL_M).setPropertyValue(&quot;Width&quot;, M_WIDTH*ONE_INCH)
	oCols(COL_N).setPropertyValue(&quot;Width&quot;, N_WIDTH*ONE_INCH)
	oCols(COL_O).setPropertyValue(&quot;Width&quot;, O_WIDTH*ONE_INCH)
	oCols(COL_P).setPropertyValue(&quot;Width&quot;, P_WIDTH*ONE_INCH)
	
	
if true then
	GoTo EndOldCode
endif
&apos;//--------------------------------------------------------------------	
	oDocument   = ThisComponent.CurrentController.Frame
	oDispatcher = createUnoService(&quot;com.sun.star.frame.DispatchHelper&quot;)
	&apos;// set column widths to width constants
&apos;//--------
	&apos;// set up arguments for uno:GoToCell interface
dim args1(0) as new com.sun.star.beans.PropertyValue
	args1(0).Name = &quot;ToPoint&quot;
	args1(0).Value = &quot;$A$6&quot;

	oDispatcher.executeDispatch(oDocument, &quot;.uno:GoToCell&quot;, &quot;&quot;, 0, args1())


dim args2(0) as new com.sun.star.beans.PropertyValue
	args2(0).Name = &quot;ColumnWidth&quot;
	args2(0).Value = A_WIDTH * ONE_INCH

	oDispatcher.executeDispatch(oDocument, &quot;.uno:ColumnWidth&quot;, &quot;&quot;, 0, args2())

&apos;//----------
	&apos;// set up arguments for uno:GoToCell interface
	args1(0).Name = &quot;ToPoint&quot;
	args1(0).Value = &quot;$B$6&quot;

	oDispatcher.executeDispatch(oDocument, &quot;.uno:GoToCell&quot;, &quot;&quot;, 0, args1())

	args2(0).Name = &quot;ColumnWidth&quot;
	args2(0).Value = B_WIDTH * ONE_INCH

	oDispatcher.executeDispatch(oDocument, &quot;.uno:ColumnWidth&quot;, &quot;&quot;, 0, args2())

&apos;//----------
	&apos;// set up arguments for uno:GoToCell interface
	args1(0).Name = &quot;ToPoint&quot;
	args1(0).Value = &quot;$C$6&quot;

	oDispatcher.executeDispatch(oDocument, &quot;.uno:GoToCell&quot;, &quot;&quot;, 0, args1())

	args2(0).Name = &quot;ColumnWidth&quot;
	args2(0).Value = C_WIDTH * ONE_INCH

	oDispatcher.executeDispatch(oDocument, &quot;.uno:ColumnWidth&quot;, &quot;&quot;, 0, args2())

&apos;//----------
	&apos;// set up arguments for uno:GoToCell interface
	args1(0).Name = &quot;ToPoint&quot;
	args1(0).Value = &quot;$D$6&quot;

	oDispatcher.executeDispatch(oDocument, &quot;.uno:GoToCell&quot;, &quot;&quot;, 0, args1())

	args2(0).Name = &quot;ColumnWidth&quot;
	args2(0).Value = D_WIDTH * ONE_INCH

	oDispatcher.executeDispatch(oDocument, &quot;.uno:ColumnWidth&quot;, &quot;&quot;, 0, args2())

&apos;//----------
	&apos;// set up arguments for uno:GoToCell interface
	args1(0).Name = &quot;ToPoint&quot;
	args1(0).Value = &quot;$E$6&quot;

	oDispatcher.executeDispatch(oDocument, &quot;.uno:GoToCell&quot;, &quot;&quot;, 0, args1())

	args2(0).Name = &quot;ColumnWidth&quot;
	args2(0).Value = E_WIDTH * ONE_INCH

	oDispatcher.executeDispatch(oDocument, &quot;.uno:ColumnWidth&quot;, &quot;&quot;, 0, args2())

&apos;//----------f
	&apos;// set up arguments for uno:GoToCell interface
	args1(0).Name = &quot;ToPoint&quot;
	args1(0).Value = &quot;$F$6&quot;

	oDispatcher.executeDispatch(oDocument, &quot;.uno:GoToCell&quot;, &quot;&quot;, 0, args1())

	args2(0).Name = &quot;ColumnWidth&quot;
	args2(0).Value = F_WIDTH * ONE_INCH

	oDispatcher.executeDispatch(oDocument, &quot;.uno:ColumnWidth&quot;, &quot;&quot;, 0, args2())

&apos;//----------G
	&apos;// set up arguments for uno:GoToCell interface
	args1(0).Name = &quot;ToPoint&quot;
	args1(0).Value = &quot;$G$6&quot;

	oDispatcher.executeDispatch(oDocument, &quot;.uno:GoToCell&quot;, &quot;&quot;, 0, args1())

	args2(0).Name = &quot;ColumnWidth&quot;
	args2(0).Value = G_WIDTH * ONE_INCH

	oDispatcher.executeDispatch(oDocument, &quot;.uno:ColumnWidth&quot;, &quot;&quot;, 0, args2())

&apos;//----------H
	&apos;// set up arguments for uno:GoToCell interface
	args1(0).Name = &quot;ToPoint&quot;
	args1(0).Value = &quot;$H$6&quot;

	oDispatcher.executeDispatch(oDocument, &quot;.uno:GoToCell&quot;, &quot;&quot;, 0, args1())

	args2(0).Name = &quot;ColumnWidth&quot;
	args2(0).Value = H_WIDTH * ONE_INCH

	oDispatcher.executeDispatch(oDocument, &quot;.uno:ColumnWidth&quot;, &quot;&quot;, 0, args2())

&apos;//----------I
	&apos;// set up arguments for uno:GoToCell interface
	args1(0).Name = &quot;ToPoint&quot;
	args1(0).Value = &quot;$I$6&quot;

	oDispatcher.executeDispatch(oDocument, &quot;.uno:GoToCell&quot;, &quot;&quot;, 0, args1())

	args2(0).Name = &quot;ColumnWidth&quot;
	args2(0).Value = I_WIDTH * ONE_INCH

	oDispatcher.executeDispatch(oDocument, &quot;.uno:ColumnWidth&quot;, &quot;&quot;, 0, args2())

&apos;//----------J
	&apos;// set up arguments for uno:GoToCell interface
	args1(0).Name = &quot;ToPoint&quot;
	args1(0).Value = &quot;$J$6&quot;

	oDispatcher.executeDispatch(oDocument, &quot;.uno:GoToCell&quot;, &quot;&quot;, 0, args1())

	args2(0).Name = &quot;ColumnWidth&quot;
	args2(0).Value = J_WIDTH * ONE_INCH

	oDispatcher.executeDispatch(oDocument, &quot;.uno:ColumnWidth&quot;, &quot;&quot;, 0, args2())

&apos;//----------K
	&apos;// set up arguments for uno:GoToCell interface
	args1(0).Name = &quot;ToPoint&quot;
	args1(0).Value = &quot;$K$6&quot;

	oDispatcher.executeDispatch(oDocument, &quot;.uno:GoToCell&quot;, &quot;&quot;, 0, args1())

	args2(0).Name = &quot;ColumnWidth&quot;
	args2(0).Value = K_WIDTH * ONE_INCH

	oDispatcher.executeDispatch(oDocument, &quot;.uno:ColumnWidth&quot;, &quot;&quot;, 0, args2())

&apos;//----------L
	&apos;// set up arguments for uno:GoToCell interface
	args1(0).Name = &quot;ToPoint&quot;
	args1(0).Value = &quot;$L$6&quot;

	oDispatcher.executeDispatch(oDocument, &quot;.uno:GoToCell&quot;, &quot;&quot;, 0, args1())

	args2(0).Name = &quot;ColumnWidth&quot;
	args2(0).Value = L_WIDTH * ONE_INCH

	oDispatcher.executeDispatch(oDocument, &quot;.uno:ColumnWidth&quot;, &quot;&quot;, 0, args2())

&apos;//----------M
	&apos;// set up arguments for uno:GoToCell interface
	args1(0).Name = &quot;ToPoint&quot;
	args1(0).Value = &quot;$M$6&quot;

	oDispatcher.executeDispatch(oDocument, &quot;.uno:GoToCell&quot;, &quot;&quot;, 0, args1())

	args2(0).Name = &quot;ColumnWidth&quot;
	args2(0).Value = M_WIDTH * ONE_INCH

	oDispatcher.executeDispatch(oDocument, &quot;.uno:ColumnWidth&quot;, &quot;&quot;, 0, args2())

&apos;//----------N
	&apos;// set up arguments for uno:GoToCell interface
	args1(0).Name = &quot;ToPoint&quot;
	args1(0).Value = &quot;$N$6&quot;

	oDispatcher.executeDispatch(oDocument, &quot;.uno:GoToCell&quot;, &quot;&quot;, 0, args1())

	args2(0).Name = &quot;ColumnWidth&quot;
	args2(0).Value = N_WIDTH * ONE_INCH

	oDispatcher.executeDispatch(oDocument, &quot;.uno:ColumnWidth&quot;, &quot;&quot;, 0, args2())

&apos;//----------O
	&apos;// set up arguments for uno:GoToCell interface
	args1(0).Name = &quot;ToPoint&quot;
	args1(0).Value = &quot;$O$6&quot;

	oDispatcher.executeDispatch(oDocument, &quot;.uno:GoToCell&quot;, &quot;&quot;, 0, args1())

	args2(0).Name = &quot;ColumnWidth&quot;
	args2(0).Value = O_WIDTH * ONE_INCH

	oDispatcher.executeDispatch(oDocument, &quot;.uno:ColumnWidth&quot;, &quot;&quot;, 0, args2())

&apos;//----------P
	&apos;// set up arguments for uno:GoToCell interface
	args1(0).Name = &quot;ToPoint&quot;
	args1(0).Value = &quot;$P$6&quot;

	oDispatcher.executeDispatch(oDocument, &quot;.uno:GoToCell&quot;, &quot;&quot;, 0, args1())

	args2(0).Name = &quot;ColumnWidth&quot;
	args2(0).Value = P_WIDTH * ONE_INCH

	oDispatcher.executeDispatch(oDocument, &quot;.uno:ColumnWidth&quot;, &quot;&quot;, 0, args2())
&apos;//--------------------------------------------------------------------------------
EndOldCode:
NormalExit:
	SetSelection(oRange)	&apos;// restore user cell selection
	exit sub
	
ErrorHandler:
	msgbox(&quot;SetEditColWidths - unprocessed error.&quot;)
	
end sub		&apos;// end SetEditColWidths	9/12/20
&apos;/**/

&apos;// SetFullAddrWidth.bas
&apos;//---------------------------------------------------------------
&apos;// SetFullAddrWidth - Set column width on full address column.
&apos;//		9/11/20.	wmk.	22:30
&apos;//---------------------------------------------------------------

public sub SetFullAddrWidth()

&apos;//	Usage.	macro call or
&apos;//			call SetPhoneWidths()
&apos;//
&apos;// Entry.	User in RefUSA/Admin formatted territory sheet
&apos;//
&apos;//	Exit.	column J width set to 1.75&quot; (4445)
&apos;//
&apos;// Calls.
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	8/30/20.	wmk.	original code
&apos;//	9/2/20.		wmk.	code added to preserve user cell selection on 
&apos;//						entry/restore on exit; error handling included
&apos;//	9/11/20.	wmk.	code simplified
&apos;//
&apos;//	Notes.

&apos;//	constants.
const	ONE_INCH=2540
const	COL_J=9
const 	J_WIDTH=1.75

&apos;//	local variables.
dim oDocument   as object
dim oDispatcher as object
dim oDoc	As Object	&apos;// ThisComponent
dim oSel	As Object	&apos;// current selection
dim oRange	As Object	&apos;// RangeAddress from selection
dim iSheetIx	As Integer	&apos;// this sheet index
dim oSheet	As Object	&apos;// this sheet
dim oCols	As Object	&apos;// .Columns this sheet

	&apos;// code.
	ON ERROR GOTO ErrorHandler
	oDoc = ThisComponent
	oSel = oDoc.getCurrentSelection()
	oRange = oSel.RangeAddress
	iSheetIx = oRange.Sheet
	oSheet = oDoc.Sheets(iSheetIx)
	oCols = oSheet.Columns
	oCols(COL_J).setPropertyValue(&quot;Width&quot;, J_WIDTH*ONE_INCH)

if true then
	GoTo EndOldCode
endif
&apos;//--------------------------------------------------------
	oDocument   = ThisComponent.CurrentController.Frame
	oDispatcher = createUnoService(&quot;com.sun.star.frame.DispatchHelper&quot;)

	&apos;// preserve current selection
	
	&apos;// set column width for J to 1.75&quot; (4445)

	&apos;// set up arguments for uno:GoToCell interface
	dim args1(0) as new com.sun.star.beans.PropertyValue
	args1(0).Name = &quot;ToPoint&quot;
	args1(0).Value = &quot;$J$6&quot;

	oDispatcher.executeDispatch(oDocument, &quot;.uno:GoToCell&quot;, &quot;&quot;, 0, args1())


rem ----------------------------------------------------------------------
&apos;dim args1(0) as new com.sun.star.beans.PropertyValue
	args1(0).Name = &quot;ColumnWidth&quot;
	args1(0).Value = 4445

	oDispatcher.executeDispatch(oDocument, &quot;.uno:ColumnWidth&quot;, &quot;&quot;, 0, args1())
&apos;//---------------------------------------------------------------------------
EndOldCode:
NormalExit:
	SetSelection(oRange)	&apos;// restore range selected
	exit sub
	
ErrorHandler:
	msgbox(&quot;SetFullAddrWidth - unprocessed error.&quot;)
	
end sub		&apos;// end SetFullAddrWidth	9/11/20
&apos;/**/

&apos;// SetGridLand.bas
&apos;//---------------------------------------------------------------
&apos;// SetGridLand - Send user to Page formatting dialog.
&apos;//		1/14/21.	wmk.
&apos;//---------------------------------------------------------------

public sub SetGridLand()

&apos;//	Usage.	macro call or
&apos;//			call SetGridLand()
&apos;//
&apos;//
&apos;// Entry.	sheet selected
&apos;//
&apos;//	Exit.	selected sheet has page format Landscape and Grid ON
&apos;//			assuming user updated with dialog interface
&apos;//
&apos;// Calls. UNO services
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	1/14/21.		wmk.	original code
&apos;//
&apos;//	Notes. Hooked to hotkey ctrl-6 in TerrKeys.cfg
&apos;//

&apos;//	constants.

&apos;//	local variables.
rem ----------------------------------------------------------------------
rem define variables
dim document   as object
dim dispatcher as object

	&apos;// code.
	ON ERROR GOTO ErrorHandler
rem ----------------------------------------------------------------------
rem get access to the document
document   = ThisComponent.CurrentController.Frame
dispatcher = createUnoService(&quot;com.sun.star.frame.DispatchHelper&quot;)

rem ----------------------------------------------------------------------
dispatcher.executeDispatch(document, &quot;.uno:PageFormatDialog&quot;, &quot;&quot;, 0, Array())

	
NormalExit:
	exit sub
	
ErrorHandler:
	msgbox(&quot;SetGridLand - unprocessed error&quot;)
	GoTo NormalExit
	
end sub		&apos;// end SetGridLand		1/14/21
&apos;/**/


&apos;// SetHdrSumFormula.bas
&apos;//---------------------------------------------------------------
&apos;// SetHdrSumFormula - Set header sum formula in Territory sheet.
&apos;//		9/21/20.	wmk.	05:50
&apos;//---------------------------------------------------------------

public sub SetHdrSumFormula()

&apos;//	Usage.	macro call or
&apos;//			call SetHdrSumFormula()
&apos;//
&apos;// Entry.	user has territory sheet selected
&apos;//
&apos;//	Exit.	cell B2 set to &quot;=$COUNTA($A$6:$A$1299)&quot;
&apos;//
&apos;// Calls.
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	9/21/20.		wmk.	original code
&apos;//
&apos;//	Notes.


&apos;//	constants.
const COL_B=1
const ROW_2=1
const CJUST=2

&apos;//	local variables.
Dim oDoc As Object
Dim oSheet As Object
Dim NewColumn As Object
dim oSel as Object
dim iSheetIx as integer
dim oRange as Object
dim lThisRow as long		&apos;// current row selected on sheet
dim oMrgRange	As Object	&apos;// merge range

dim oCell	As Object		&apos;// cell working on

	&apos;// code.
	ON ERROR GOTO ErrorHandler
	oDoc = ThisComponent
	oSel = oDoc.getCurrentSelection()
	oRange = oSel.RangeAddress
	iSheetIx = oRange.Sheet
	oSheet = oDoc.Sheets(iSheetIx)
	
	oCell =	oSheet.getCellByPosition(COL_B, ROW_2)
	oCell.setFormula(&quot;=COUNTA($A$6:$A$1299)&quot;)
	oCell.HoriJustify = CJUST
	
NormalExit:
	exit sub
	
ErrorHandler:
	msgbox(&quot;SetHdrSumFormula - unprocessed error&quot;)
	GoTo NormalExit
	
end sub		&apos;// end SetHdrSumFormula	9/21/20
&apos;/**/


&apos;// SetHdrSumFormula2.bas
&apos;//---------------------------------------------------------------
&apos;// SetHdrSumFormula2 - Set header sum formula in Territory sheet.
&apos;//		2/14/21.	wmk.	15:55
&apos;//---------------------------------------------------------------

public sub SetHdrSumFormula2()

&apos;//	Usage.	macro call or
&apos;//			call SetHdrSumFormul2a()
&apos;//
&apos;// Entry.	user has territory sheet selected
&apos;//
&apos;//	Exit.	cell B2 set to &quot;=&apos;Record count: &apos; &amp; COUNTA($A$6:$A$1299)&quot;
&apos;//
&apos;// Calls.
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	9/21/20.		wmk.	original code
&apos;// 2/14/21.	wmk.	mod to &quot;Record count: &quot; &amp; COUNTA($A$6:$A$1299)
&apos;//
&apos;//	Notes.


&apos;//	constants.
const COL_A=0
const COL_B=1
const ROW_2=1
const CJUST=2

&apos;//	local variables.
Dim oDoc As Object
Dim oSheet As Object
Dim NewColumn As Object
dim oSel as Object
dim iSheetIx as integer
dim oRange as Object
dim lThisRow as long		&apos;// current row selected on sheet
dim oMrgRange	As Object	&apos;// merge range

dim oCell	As Object		&apos;// cell working on

	&apos;// code.
	ON ERROR GOTO ErrorHandler
	oDoc = ThisComponent
	oSel = oDoc.getCurrentSelection()
	oRange = oSel.RangeAddress
	iSheetIx = oRange.Sheet
	oSheet = oDoc.Sheets(iSheetIx)
	
	oCell =	oSheet.getCellByPosition(COL_B, ROW_2)
	oCell.setFormula(&quot;=&quot;&quot;RecordCount: &quot;&quot; &amp; COUNTA($A$6:$A$1299)&quot;)
	oCell.HoriJustify = CJUST
	
NormalExit:
	exit sub
	
ErrorHandler:
	msgbox(&quot;SetHdrSumFormula2 - unprocessed error&quot;)
	GoTo NormalExit
	
end sub		&apos;// end SetHdrSumFormula2	2/14/21
&apos;/**/


&apos;// SetHdrSumFormula3.bas
&apos;//---------------------------------------------------------------
&apos;// SetHdrSumFormula3 - Set header sum formula in Territory sheet.
&apos;//		3/321.	wmk.	19:37
&apos;//---------------------------------------------------------------

public sub SetHdrSumFormula3()

&apos;//	Usage.	macro call or
&apos;//			call SetHdrSumFormul3()
&apos;//
&apos;// Entry.	user has territory sheet selected
&apos;//
&apos;//	Exit.	cell A2 set to &quot;=&apos;Record count: &apos; &amp; COUNTA($A$6:$A$1299)&quot;
&apos;//			formula at A2 cleared
&apos;//
&apos;// Calls.
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;// 2/19/21.	wmk.	original code; cloned from SetHdrSumFormula2.
&apos;// 2/27/21.	wmk.	mod back to set formula in B2, A2 cleared.
&apos;//	3/3/21.		wmk.	mod back to set formula in A2 COUNTA($A:6..)
&apos;//
&apos;//	Notes. THe formula is in the A column since that is where the unitaddress
&apos;// is placed for version 3 of the PubTerr sheet. It is used by
&apos;// HltAddrBlocks to get the row count to process


&apos;//	constants.
const COL_A=0
const COL_B=1
const ROW_2=1
const CJUST=2

&apos;//	local variables.
Dim oDoc As Object
Dim oSheet As Object
Dim NewColumn As Object
dim oSel as Object
dim iSheetIx as integer
dim oRange as Object
dim lThisRow as long		&apos;// current row selected on sheet
dim oMrgRange	As Object	&apos;// merge range

dim oCell	As Object		&apos;// cell working on

	&apos;// code.
	ON ERROR GOTO ErrorHandler
	oDoc = ThisComponent
	oSel = oDoc.getCurrentSelection()
	oRange = oSel.RangeAddress
	iSheetIx = oRange.Sheet
	oSheet = oDoc.Sheets(iSheetIx)

	oCell = oSheet.getCellByPosition(COL_B, ROW_2)
	oCell.setFormula (&quot;&quot;)	
	oCell =	oSheet.getCellByPosition(COL_A, ROW_2)
	oCell.setFormula(&quot;=&quot;&quot;RecordCount: &quot;&quot; &amp; COUNTA($A$6:$A$1299)&quot;)
	oCell.HoriJustify = CJUST
	
NormalExit:
	exit sub
	
ErrorHandler:
	msgbox(&quot;SetHdrSumFormula3 - unprocessed error&quot;)
	GoTo NormalExit
	
end sub		&apos;// end SetHdrSumFormula3	3/3/21/	19:37
&apos;/**/


&apos;// SetHdrSumFormula4.bas
&apos;//---------------------------------------------------------------
&apos;// SetHdrSumFormula4 - Set header sum formula in Territory sheet.
&apos;//		3/321.	wmk.	19:37
&apos;//---------------------------------------------------------------

public sub SetHdrSumFormula4()

&apos;//	Usage.	macro call or
&apos;//			call SetHdrSumFormul3()
&apos;//
&apos;// Entry.	user has territory sheet selected
&apos;//
&apos;//	Exit.	cell B2 set to &quot;=&apos;Record count: &apos; &amp; COUNTA($B$6:$B$1299)&quot;
&apos;//			formula at A2 cleared
&apos;//
&apos;// Calls.
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	3/3/21.		wmk.	original code; adapted from SetHdrSumFormula3
&apos;//
&apos;//	Notes. The formula is in the B column since that is where the unitaddress
&apos;// is placed for the Edit sheet. It is used by GenFLinkM in generating
&apos;// fastpeoplesearch links.

&apos;//	constants.
const COL_A=0
const COL_B=1
const ROW_2=1
const CJUST=2

&apos;//	local variables.
Dim oDoc As Object
Dim oSheet As Object
Dim NewColumn As Object
dim oSel as Object
dim iSheetIx as integer
dim oRange as Object
dim lThisRow as long		&apos;// current row selected on sheet
dim oMrgRange	As Object	&apos;// merge range

dim oCell	As Object		&apos;// cell working on

	&apos;// code.
	ON ERROR GOTO ErrorHandler
	oDoc = ThisComponent
	oSel = oDoc.getCurrentSelection()
	oRange = oSel.RangeAddress
	iSheetIx = oRange.Sheet
	oSheet = oDoc.Sheets(iSheetIx)

	oCell = oSheet.getCellByPosition(COL_A, ROW_2)
	oCell.setFormula (&quot;&quot;)	
	oCell =	oSheet.getCellByPosition(COL_B, ROW_2)
	oCell.setFormula(&quot;=&quot;&quot;RecordCount: &quot;&quot; &amp; COUNTA($B$6:$B$1299)&quot;)
	oCell.HoriJustify = CJUST
	
NormalExit:
	exit sub
	
ErrorHandler:
	msgbox(&quot;SetHdrSumFormula4 - unprocessed error&quot;)
	GoTo NormalExit
	
end sub		&apos;// end SetHdrSumFormula4	3/3/21/	23:08
&apos;/**/


&apos;// SetTSColWidths.bas
&apos;//---------------------------------------------------------------
&apos;// SetTSColWidths - Set column widths on TS formatted sheet columns.
&apos;//		9/11/20.	wmk.	23:00
&apos;//---------------------------------------------------------------

public sub SetTSColWidths()

&apos;//	Usage.	macro call or
&apos;//			call SetTSColWidths()
&apos;//
&apos;// Entry.	User in TS formatted territory sheet
&apos;//
&apos;//	Exit.	A = 0.75&quot;, B = 1.75, C = 1.0&quot; , D = 1.75, E = 1.75, F = 2.0&quot;
&apos;//
&apos;// Calls.
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	9/9/20.		wmk.	original code
&apos;//
&apos;//	Notes. UNO Dispatcher exits this module, corrupting any module-wide
&apos;//	vars. Only way to preserve user cell selection on entry is in local
&apos;//	vars this sub.

&apos;//	constants.
const ONE_INCH=2540
const COL_A=0
const COL_B=1
const COL_C=2
const COL_D=3
const COL_E=4
const COL_F=5

&apos;// column widths
const A_WIDTH=0.75		&apos;// 0.75
const B_WIDTH=1.75		&apos;// 1.75
const C_WIDTH=1.1		&apos;// 1.1
const D_WIDTH=1.75		&apos;// 1.75
const E_WIDTH=1.75		&apos;// 1.75
const F_WIDTH=2.0		&apos;// 2.0

&apos;//	local variables.
dim oDocument   as object
dim oDispatcher as object
dim oDoc	As Object	&apos;// ThisComponent
dim oSel	As Object	&apos;// current cell selection on entry
dim oRange	As Object	&apos;// RangeAddress selected
dim iSheetIx	As Integer	&apos;// this sheet index
dim oSheet	As Object	&apos;// this sheet
dim oCols	As Object	&apos;// .Columns this sheet

	&apos;// code.
	ON ERROR GOTO ErrorHandler
	
	&apos;// preserve user cell selection
	oDoc = ThisComponent
	oSel = oDoc.getCurrentSelection()
	oRange = oSel.RangeAddress
	iSheetIx = oRange.Sheet
	oSheet = oDoc.Sheets(iSheetIx)
	oCols = oSheet.Columns
	oCols(COL_A).setPropertyValue(&quot;Width&quot;, A_WIDTH*ONE_INCH)
	oCols(COL_B).setPropertyValue(&quot;Width&quot;, B_WIDTH*ONE_INCH)
	oCols(COL_C).setPropertyValue(&quot;Width&quot;, C_WIDTH*ONE_INCH)
	oCols(COL_D).setPropertyValue(&quot;Width&quot;, D_WIDTH*ONE_INCH)
	oCols(COL_E).setPropertyValue(&quot;Width&quot;, E_WIDTH*ONE_INCH)
	oCols(COL_F).setPropertyValue(&quot;Width&quot;, F_WIDTH*ONE_INCH)

if true then
	GoTo EndOldCode
endif
&apos;//-------------------------------------------------------------------
	oDocument   = ThisComponent.CurrentController.Frame
	oDispatcher = createUnoService(&quot;com.sun.star.frame.DispatchHelper&quot;)
	&apos;// set column widths to width constants
&apos;//--------
	&apos;// set up arguments for uno:GoToCell interface
dim args1(0) as new com.sun.star.beans.PropertyValue
	args1(0).Name = &quot;ToPoint&quot;
	args1(0).Value = &quot;$A$6&quot;

	oDispatcher.executeDispatch(oDocument, &quot;.uno:GoToCell&quot;, &quot;&quot;, 0, args1())


dim args2(0) as new com.sun.star.beans.PropertyValue
	args2(0).Name = &quot;ColumnWidth&quot;
	args2(0).Value = A_WIDTH

	oDispatcher.executeDispatch(oDocument, &quot;.uno:ColumnWidth&quot;, &quot;&quot;, 0, args2())

&apos;//----------
	&apos;// set up arguments for uno:GoToCell interface
	args1(0).Name = &quot;ToPoint&quot;
	args1(0).Value = &quot;$B$6&quot;

	oDispatcher.executeDispatch(oDocument, &quot;.uno:GoToCell&quot;, &quot;&quot;, 0, args1())

	args2(0).Name = &quot;ColumnWidth&quot;
	args2(0).Value = B_WIDTH

	oDispatcher.executeDispatch(oDocument, &quot;.uno:ColumnWidth&quot;, &quot;&quot;, 0, args2())

&apos;//----------
	&apos;// set up arguments for uno:GoToCell interface
	args1(0).Name = &quot;ToPoint&quot;
	args1(0).Value = &quot;$C$6&quot;

	oDispatcher.executeDispatch(oDocument, &quot;.uno:GoToCell&quot;, &quot;&quot;, 0, args1())

	args2(0).Name = &quot;ColumnWidth&quot;
	args2(0).Value = C_WIDTH

	oDispatcher.executeDispatch(oDocument, &quot;.uno:ColumnWidth&quot;, &quot;&quot;, 0, args2())

&apos;//----------
	&apos;// set up arguments for uno:GoToCell interface
	args1(0).Name = &quot;ToPoint&quot;
	args1(0).Value = &quot;$D$6&quot;

	oDispatcher.executeDispatch(oDocument, &quot;.uno:GoToCell&quot;, &quot;&quot;, 0, args1())

	args2(0).Name = &quot;ColumnWidth&quot;
	args2(0).Value = D_WIDTH

	oDispatcher.executeDispatch(oDocument, &quot;.uno:ColumnWidth&quot;, &quot;&quot;, 0, args2())

&apos;//----------
	&apos;// set up arguments for uno:GoToCell interface
	args1(0).Name = &quot;ToPoint&quot;
	args1(0).Value = &quot;$E$6&quot;

	oDispatcher.executeDispatch(oDocument, &quot;.uno:GoToCell&quot;, &quot;&quot;, 0, args1())

	args2(0).Name = &quot;ColumnWidth&quot;
	args2(0).Value = E_WIDTH

	oDispatcher.executeDispatch(oDocument, &quot;.uno:ColumnWidth&quot;, &quot;&quot;, 0, args2())

&apos;//----------
	&apos;// set up arguments for uno:GoToCell interface
	args1(0).Name = &quot;ToPoint&quot;
	args1(0).Value = &quot;$F$6&quot;

	oDispatcher.executeDispatch(oDocument, &quot;.uno:GoToCell&quot;, &quot;&quot;, 0, args1())

	args2(0).Name = &quot;ColumnWidth&quot;
	args2(0).Value = F_WIDTH

	oDispatcher.executeDispatch(oDocument, &quot;.uno:ColumnWidth&quot;, &quot;&quot;, 0, args2())
&apos;//--------------------------------------------------------------------------
EndOldCode:
NormalExit:
	SetSelection(oRange)	&apos;// restore user cell selection
	exit sub
	
ErrorHandler:
	msgbox(&quot;SetTSColWidths - unprocessed error.&quot;)
	
end sub		&apos;// end SetTSColWidths	9/11/20
&apos;/**/

&apos;// SetUnitAddrWidth.bas
&apos;//---------------------------------------------------------------
&apos;// SetUnitAddrWidth - Set column width on unit address column.
&apos;//		9/11/20.	wmk.	23:15
&apos;//---------------------------------------------------------------

public sub SetUnitAddrWidth()

&apos;//	Usage.	macro call or
&apos;//			call SetUnitAddrWidth()
&apos;//
&apos;// Entry.	User in RefUSA/Admin formatted territory sheet
&apos;//
&apos;//	Exit.	column B width set to 1.75&quot; (4445)
&apos;//
&apos;// Calls.
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	9/7/20.		wmk.	original code; adapted from SetFullAddrWidth
&apos;//
&apos;//	Notes.


&apos;//	constants.
const ONE_INCH=2540
const COL_B=1
const B_WIDTH=1.75

&apos;//	local variables.
dim oDocument   as object
dim oDispatcher as object
dim oDoc	As Object	&apos;// ThisComponent
dim oSel	As Object	&apos;// current selection
dim oRange	As Object	&apos;// RangeAddress from selection
dim iSheetIx	As Integer	&apos;// current sheet index
dim oSheet	As Object	&apos;// current sheet
dim oCols	As Object	&apos;// .Columns current sheet

	&apos;// code.
	ON ERROR GOTO ErrorHandler
	&apos;// preserve current selection
	oDoc = ThisComponent
	oSel = oDoc.getCurrentSelection()
	oRange = oSel.RangeAddress
	iSheetIx = oRange.Sheet
	oSheet = oDoc.Sheets(iSheetIx)
	oCols = oSheet.Columns
	oCols(COL_B).setPropertyValue(&quot;Width&quot;, B_WIDTH*ONE_INCH)

if true then
	GoTo EndOldCode
endif
&apos;//--------------------------------------------------------------------
	oDocument   = ThisComponent.CurrentController.Frame
	oDispatcher = createUnoService(&quot;com.sun.star.frame.DispatchHelper&quot;)

	
	&apos;// set column width for B to 1.75&quot; (4445)

	&apos;// set up arguments for uno:GoToCell interface
	dim args1(0) as new com.sun.star.beans.PropertyValue
	args1(0).Name = &quot;ToPoint&quot;
	args1(0).Value = &quot;$B$6&quot;

	oDispatcher.executeDispatch(oDocument, &quot;.uno:GoToCell&quot;, &quot;&quot;, 0, args1())


rem ----------------------------------------------------------------------
&apos;dim args1(0) as new com.sun.star.beans.PropertyValue
	args1(0).Name = &quot;ColumnWidth&quot;
	args1(0).Value = 4445

	oDispatcher.executeDispatch(oDocument, &quot;.uno:ColumnWidth&quot;, &quot;&quot;, 0, args1())
&apos;//---------------------------------------------------------------------------
EndOldCode:
NormalExit:
	SetSelection(oRange)	&apos;// restore range selected
	exit sub
	
ErrorHandler:
	msgbox(&quot;SetUnitAddrWidth - unprocessed error.&quot;)
	
end sub		&apos;// end SetUnitAddrWidth	9/11/20
&apos;/**/


&apos;// SuperToUntitled.bas
&apos;//------------------------------------------------------------------
&apos;// SuperToUntitled - Copy sheets for SuperTerr to Untitled workbook.
&apos;//		7/13/21.	wmk.	18:34
&apos;//------------------------------------------------------------------

public sub SuperToUntitled()

&apos;//	Usage.	macro call or
&apos;//			call SuperToUntitled()
&apos;//
&apos;// Entry.	User in any sheet in workbook
&apos;//			gsPubTerrSheet = name of PubTerr sheet
&apos;//			User has opened &quot;Untitled 1&quot; workbook
&apos;//			gsNewSheet = new Search sheet name
&apos;//			gsPubTerrSheet = name of PubTerr sheet
&apos;//
&apos;//	Exit.	Sheets Terrxxx_PubTerr and Terrxxx_Search copied to
&apos;//			Untitled workbook
&apos;//
&apos;// Calls.	fsGetSrchSheetName
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	3/15/21.	wmk.	original code
&apos;// 3/17/21.	wmk.	change to only save Search sheet.
&apos;// 7/13/21.	wmk.	shorten name to Terrxxx_Search.
&apos;//
&apos;//	Notes. Changed to only save Search sheet until figure out
&apos;// how to get control back to this workbook doing the saving.
&apos;//

&apos;//	constants.

&apos;//	local variables.

rem ----------------------------------------------------------------------
rem define variables
dim document   as object
dim dispatcher as object

dim oDoc		As Object		&apos;// ThisComponent
dim oSel		As Object		&apos;// current selection
dim oRange		As Object		&apos;// RangeAddress currently selected
dim iSheetIx	As Integer		&apos;// desired sheet index
dim iUnoSheet	As Integer		&apos;// uno sheet number
dim sThisName	As String		&apos;// name of current sheet
dim oSheet		As Object		&apos;// this sheet
dim oSheets		As Object		&apos;// sheets array
dim bSheetExists	As Boolean	&apos;// sheet exists flag
dim sSearchName		As String		&apos;// search sheet name	

	&apos;// code.
	ON ERROR GOTO ErrorHandler

	&apos;// get access to the document.
	document   = ThisComponent.CurrentController.Frame
	dispatcher = createUnoService(&quot;com.sun.star.frame.DispatchHelper&quot;)

if true then
   GoTo OnlyDoSearch
endif	
	sThisName = fsGetPubSheetName()		&apos;// get PubTerr sheet name
	MoveToSheet(sThisName)
	oDoc = ThisComponent
	oSel = oDoc.getCurrentSelection()
	oRange = oSel.RangeAddress
	iSheetIx = oRange.Sheet
	oSheet = oDoc.Sheets(iSheetIx)
	sThisName = oSheet.getName()
	if InStr(sThisName, &quot;PubTerr&quot;) = 0 then
	   msgbox(&quot;SuperToUntitled - NOT in PubTerr sheet; cannot copy&quot;)
	   GoTo NormalExit
	endif		&apos;// not in PubTerr sheet
	
	&apos;// Now copy the PubTerr sheet to Untitled 1.

rem get access to the document
rem ----------------------------------------------------------------------
dim args1(2) as new com.sun.star.beans.PropertyValue
args1(0).Name = &quot;DocName&quot;
args1(0).Value = &quot;&quot;
args1(1).Name = &quot;Index&quot;
args1(1).Value = 32767
args1(2).Name = &quot;Copy&quot;
args1(2).Value = true

dispatcher.executeDispatch(document, &quot;.uno:Move&quot;, &quot;&quot;, 0, args1())

	msgbox(&quot;Pub_Terr saved to new Untitled sheet&quot; + CHR(13)+CHR(10)_
		+ &quot;Click or Enter to continue...&quot;)

OnlyDoSearch:		
	&apos;// now Move to Search sheet.
	oDoc = ThisComponent
	oSel = oDoc.getCurrentSelection()
	oRange = oSel.RangeAddress
	iSheetIx = oRange.Sheet
	oSheets = oDoc.Sheets()
	oSheet = oDoc.Sheets(iSheetIx)

if true then
	GoTo GetSrchName
endif
dim iNameLen		As Integer		&apos;// search sheet name base length
	iNameLen = len(sThisName) - 7	&apos;// name length sans &apos;PubTerr&apos;
	sSearchName = left(sThisName, iNameLen) + &quot;Search&quot;
	sSearchName = gsNewSheet
	bSheetExists = oSheets.hasByName(sSearchName)
	if bSheetExists then
		MoveToSheet(sSearchName)
	else
		msgbox(sSearchName + &quot; sheet not found; Search sheet not copied&quot;)
		GoTo NormalExit
	endif	&apos;// end Search sheet exists conditional
	
GetSrchName:
	sSearchName = fsGetSrchSheetName()
	
if true then
	GoTo SkipStuff
endif

if not true then
	msgbox(&quot;Index of target sheet is &quot; + iSheetIx)
	goto NormalExit
endif

rem ----------------------------------------------------------------------
dim args2(0) as new com.sun.star.beans.PropertyValue
args2(0).Name = &quot;Nr&quot;
args2(0).Value = 4

dispatcher.executeDispatch(document, &quot;.uno:JumpToTable&quot;, &quot;&quot;, 0, args2())

SkipStuff:

	&apos;// now copy the Search sheet to Untitled.
rem ----------------------------------------------------------------------
dim args3(2) as new com.sun.star.beans.PropertyValue
args3(0).Name = &quot;DocName&quot;
args3(0).Value = &quot;&quot;
args3(1).Name = &quot;Index&quot;
args3(1).Value = 32767
args3(2).Name = &quot;Copy&quot;
args3(2).Value = true

dispatcher.executeDispatch(document, &quot;.uno:Move&quot;, &quot;&quot;, 0, args3())
	
	&apos;// now in the &quot;Untitled.ods&quot; workbook...
	&apos;// rename the &quot;Untitled.ods&quot; Search sheet, dropping the nn suffix.
dim oDocUntitled	As Object
&apos;dim oSheets			As Object
dim sSheetName		As String
dim sShortName		As String
	oDocUntitled = ThisComponent
	oSheets = oDocUntitled.Sheets
	oSheet = oDocUntitled.Sheets(0)
	sSheetName = oSheet.Name
	sShortName = left(sSheetName, len(&quot;Terrxxx_Search&quot;))
	RenameSheet(sShortName)
	

NormalExit:
	exit sub
	
ErrorHandler:
	msgbox(&quot;SuperToUntitled - unprocessed error&quot;)
	GoTo NormalExit
	
end sub		&apos;// SuperToUntitled		7/13/21.	18:34
&apos;/**/


&apos;// fsSetPubSheetName.bas
&apos;//---------------------------------------------------------------
&apos;// fsSetPubSheetName :- Set PubTerr sheet name in module var.
&apos;//		3/1/21.	wmk. 08:21
&apos;//---------------------------------------------------------------

public function fsSetPubSheetName(psSheetName As String) as void

&apos;//	Usage.	&lt;target&gt; = fsSetPubSheetName( sSheetName )
&apos;//			or fsSetPubSheetName( sSheetName )
&apos;//
&apos;// Entry.	gsPubTerrSheet module var declared
&apos;//
&apos;//	Exit.	gsPubTerrSheet = specified sheet name
&apos;//
&apos;// Calls.
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	3/16/21.	wmk.	original code
&apos;// 3/17/21.	wmk.	bug fix where attempting to set void function
&apos;//						value
&apos;//
&apos;//	Notes. The gsPubTerrSheet module var holds the name of the PubTerr
&apos;// sheet in the territory workbook. A territory workbook has the
&apos;// standardized name %Terrxxx% where xxx is the territory id
&apos;// (e.g. QTerr125 for territory 125).
&apos;//

&apos;//	constants.

&apos;//	local variables.
dim aRetValue As Any

	&apos;// code.
	ON ERROR GOTO ErrorHandler
	gsPubTerrSheet = psSheetName
	
NormalExit:
&apos;	aRetValue = 0					&apos;// this is a void function
&apos;	fsSetPubSheetName = aRetValue	&apos;// do not attempt to set retvalue
	exit function
	
ErrorHandler:
	ON ERROR GOTO
	msgbox(&quot;fsSetPubSheetName - unprocessed error&quot;)
	GoTo NormalExit

end function 	&apos;// end fsSetPubSheetName	&apos;//	3/17/21. 08:21
&apos;/**/


&apos;// fsGetSrchSheetName.bas
&apos;//---------------------------------------------------------------
&apos;// fsGetSrchSheetName - Set PubTerr sheet name in module var.
&apos;//		3/17/21.	wmk. 09:53
&apos;//---------------------------------------------------------------

public function fsGetSrchSheetName() as String

&apos;//	Usage.	sTarget = fsGetSrchSheetName()
&apos;//			
&apos;//		sTarget = reserved string var for return of name
&apos;//
&apos;// Entry.	gsPubTerrSheet module var declared
&apos;//
&apos;//	Exit.	sTarget = gsSearchSheet
&apos;//				if gsSearchSheet is empty on entry, it will be
&apos;//				set to &quot;Terrxxx_Search&quot; where xxx is taken from
&apos;//				the end of the sheet title in A1
&apos;// Calls.
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	3/17/21.		wmk.	original code; adapted from fsGetPubSheetName
&apos;//
&apos;//	Notes. The gsSearchSheet module var holds the name of the Search
&apos;// sheet in the territory workbook. A territory workbook has the
&apos;// standardized name %Terrxxx% where xxx is the territory id
&apos;// (e.g. QTerr125 for territory 125).
&apos;//

&apos;//	constants.

&apos;//	local variables.
dim sRetValue As String

	&apos;// code.
	ON ERROR GOTO ErrorHandler
	sRetValue = gsSearchSheet
	
	&apos;// check, if gsPubTerrSheet not set, set it from
	&apos;// territory id.
	if len(sRetValue) = 0 then
		sRetValue = fsGetTerrID()
		if len(sRetValue) = 0 then
			GoTo ErrorHandler
		endif
		gsSearchSheet = &quot;Terr&quot; + sRetValue + &quot;_Search&quot;
		sRetValue = gsSearchSheet
	endif
	
NormalExit:
	fsGetSrchSheetName = sRetValue
	exit function
	
ErrorHandler:
	sRetValue = &quot;&quot;
	msgbox(&quot;fsGetSrchSheetName - unprocessed error&quot;)
	GoTo NormalExit

end function 	&apos;// end fsGetSrchSheetName	3/17/21.	09:53
&apos;/**/


&apos;// fsSetSrchSheetName.bas
&apos;//---------------------------------------------------------------
&apos;// fsSetSrchSheetName :- Set PubTerr sheet name in module var.
&apos;//		3/1/21.	wmk. 08:21
&apos;//---------------------------------------------------------------

public function fsSetSrchSheetName(psSheetName As String) as void

&apos;//	Usage.	&lt;target&gt; = fsSetSrchSheetName( sSheetName )
&apos;//			or fsSetSrchSheetName( sSheetName )
&apos;//
&apos;// Entry.	gsPubTerrSheet module var declared
&apos;//
&apos;//	Exit.	gsPubTerrSheet = specified sheet name
&apos;//
&apos;// Calls.
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	3/16/21.	wmk.	original code
&apos;// 3/17/21.	wmk.	bug fix where attempting to set void function
&apos;//						value
&apos;//
&apos;//	Notes. The gsPubTerrSheet module var holds the name of the PubTerr
&apos;// sheet in the territory workbook. A territory workbook has the
&apos;// standardized name %Terrxxx% where xxx is the territory id
&apos;// (e.g. QTerr125 for territory 125).
&apos;//

&apos;//	constants.

&apos;//	local variables.
dim aRetValue As Any

	&apos;// code.
	ON ERROR GOTO ErrorHandler
	gsSearchSheet = psSheetName
	
NormalExit:
	exit function
	
ErrorHandler:
	ON ERROR GOTO
	msgbox(&quot;fsSetSrchSheetName - unprocessed error&quot;)
	GoTo NormalExit

end function 	&apos;// end fsSetSrchSheetName	&apos;//	3/17/21. 09:15
&apos;/**/


&apos;// fsGetTerrID.bas
&apos;//---------------------------------------------------------------
&apos;// fsGetTerrID - Get territory ID from sheet information.
&apos;//		3/16/21.	wmk.
&apos;//---------------------------------------------------------------

public function fsGetTerrID() as String

&apos;//	Usage.	&lt;target&gt; = fsGetTerrID()
&apos;//
&apos;//		&lt;target&gt; = string to receive territory ID.
&apos;//
&apos;// Entry.	user in any territory sheet
&apos;//			A1 contains .String = &apos;Terr..xxxx&apos; where xxxx is territory ID
&apos;//
&apos;//	Exit.	&lt;target&gt; = trim(xxxx) from A1.String
&apos;//
&apos;// Calls.
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;// 3/16/21.		wmk.	original code
&apos;//
&apos;//	Notes. This code provides a stopgap for generating anything that is
&apos;//	dependent upon the territory id.
&apos;//

&apos;//	constants.
const	COL_A=0
const	ROW_1=0

&apos;//	local variables.
dim sRetValue 		As String
dim oDoc			As Object
dim oSel			As Object
dim oRange			As Object
dim	oCell			As Object
dim iSheetIX		As Integer
dim oSheet			As Object
dim sSheetTitle		As String
dim sTerrID			As String

	&apos;// code.
	ON ERROR GOTO ErrorHandler
	sRetValue = &quot;&quot;

	oDoc = ThisComponent
	oSel = oDoc.getCurrentSelection()
	oRange = oSel.RangeAddress
	iSheetIx = oRange.Sheet
	oSheet = oDoc.Sheets(iSheetIX)

	&apos;// extrapolate territory ID from right 4 of Sheet title in A1-C1.
	oCell = oSheet.getCellByPosition(COL_A,ROW_1)
	sSheetTitle = oCell.String
	sTerrID = trim(right(sSheetTitle,4))
	sRetValue = sTerrID
	
NormalExit:
	fsGetTerrID = sRetValue
	exit function
	
ErrorHandler:
	msgbox(&quot;fsGetTerrID - unprocessed error&quot;)
	GoTo NormalExit

end function 	&apos;// end fsGetTerrID	3/16/21.	11:47
&apos;/**/

&apos;// SetPhoneWidths.bas
&apos;//---------------------------------------------------------------
&apos;// SetPhoneWidths - Set column widths on phone columns.
&apos;//		9/11/20.	wmk.	22:15
&apos;//---------------------------------------------------------------

public sub SetPhoneWidths()

&apos;//	Usage.	macro call or
&apos;//			call SetPhoneWidths()
&apos;//
&apos;// Entry.	User in RefUSA/Admin formatted territory sheet
&apos;//
&apos;//	Exit.	columns K,L widths set to 1.0&quot; (2540)
&apos;//			column M width set to 1.1&quot; (2794)
&apos;//
&apos;// Calls.
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	8/30/20.		wmk.	original code
&apos;// 9/2/20.		wmk.	preserve and restore user cell selection on entry
&apos;//						and exit; error handling added
&apos;//	9/11/20.	wmk.	code simplified; constants implemented
&apos;//
&apos;//	Notes. UNO Dispatcher exits this module, corrupting any module-wide
&apos;//	vars. Only way to preserve user cell selection on entry is in local
&apos;//	vars this sub.
&apos;//

&apos;//	constants.
const COL_K=10			&apos;// column K index
const COL_L=11			&apos;// column L index 
const COL_M=12			&apos;// column M index

const	ONE_INCH=2540
const	K_WIDTH=1.0
const	L_WIDTH=1.0
const	M_WIDTH=1.1

&apos;//	local variables.
dim oDocument   as object
dim oDispatcher as object
dim oDoc	As Object	&apos;// ThisComponent
dim oSel	As Object	&apos;// current cell selection on entry
dim oRange	As Object	&apos;// RangeAddress selected
dim oSheet	As Object	&apos;// current sheet
dim oCols	As Object	&apos;// columns this sheet
dim iSheetIx	As Integer	&apos;// this sheet index

	&apos;// code.
	ON ERROR GOTO ErrorHandler
	
	&apos;// preserve user cell selection
	oDoc = ThisComponent
	oSel = oDoc.getCurrentSelection()
	oRange = oSel.RangeAddress
	iSheetIx = oRange.Sheet
	oSheet = oDoc.Sheets(iSheetIx)
	oCols = oSheet.Columns

	oCols(COL_K).setPropertyValue(&quot;Width&quot;, K_WIDTH*ONE_INCH)
	oCols(COL_L).setPropertyValue(&quot;Width&quot;, L_WIDTH*ONE_INCH)
	oCols(COL_M).setPropertyValue(&quot;Width&quot;, M_WIDTH*ONE_INCH)
	
if true then
	GoTo EndOldCode
endif
&apos;//---------------------------------------------------------
	oDocument   = ThisComponent.CurrentController.Frame
	oDispatcher = createUnoService(&quot;com.sun.star.frame.DispatchHelper&quot;)
	&apos;// set column widths for K, L, to 1.0&quot; (2540)
	&apos;//							 M to 1.1&quot; (2794)

	&apos;// set up arguments for uno:GoToCell interface
	dim args1(0) as new com.sun.star.beans.PropertyValue
	args1(0).Name = &quot;ToPoint&quot;
	args1(0).Value = &quot;$K$6&quot;

	oDispatcher.executeDispatch(oDocument, &quot;.uno:GoToCell&quot;, &quot;&quot;, 0, args1())


rem ----------------------------------------------------------------------
&apos;dim args1(0) as new com.sun.star.beans.PropertyValue
	args1(0).Name = &quot;ColumnWidth&quot;
	args1(0).Value = 2540

	oDispatcher.executeDispatch(oDocument, &quot;.uno:ColumnWidth&quot;, &quot;&quot;, 0, args1())

	&apos;// set up arguments for uno:GoToCell interface
&apos;	dim args1(0) as new com.sun.star.beans.PropertyValue
	args1(0).Name = &quot;ToPoint&quot;
	args1(0).Value = &quot;$L$6&quot;

	oDispatcher.executeDispatch(oDocument, &quot;.uno:GoToCell&quot;, &quot;&quot;, 0, args1())


rem ----------------------------------------------------------------------
&apos;dim args1(0) as new com.sun.star.beans.PropertyValue
	args1(0).Name = &quot;ColumnWidth&quot;
	args1(0).Value = 2540

	oDispatcher.executeDispatch(oDocument, &quot;.uno:ColumnWidth&quot;, &quot;&quot;, 0, args1())

	&apos;// set up arguments for uno:GoToCell interface
&apos;	dim args1(0) as new com.sun.star.beans.PropertyValue
	args1(0).Name = &quot;ToPoint&quot;
	args1(0).Value = &quot;$M$6&quot;

	oDispatcher.executeDispatch(oDocument, &quot;.uno:GoToCell&quot;, &quot;&quot;, 0, args1())


rem ----------------------------------------------------------------------
&apos;dim args1(0) as new com.sun.star.beans.PropertyValue
	args1(0).Name = &quot;ColumnWidth&quot;
	args1(0).Value = 2790

	oDispatcher.executeDispatch(oDocument, &quot;.uno:ColumnWidth&quot;, &quot;&quot;, 0, args1())
&apos;//---------------------------------------------------------------------------
EndOldCode:

NormalExit:
	SetSelection(oRange)	&apos;// restore user cell selection
	exit sub
	
ErrorHandler:
	msgbox(&quot;SetPhoneWidths - unprocessed error.&quot;)
	
end sub		&apos;// end SetPhoneWidths	9/2/20
&apos;/**/

&apos;// SetPIDColFormat.bas
&apos;//---------------------------------------------------------------
&apos;// SetPIDColFormat - Set PropertyID column numeric format.
&apos;//		9/19/20.	wmk.
&apos;//---------------------------------------------------------------

public sub SetPIDColFormat()

&apos;//	Usage.	macro call or
&apos;//			call SetPIDColFormat()
&apos;//
&apos;// Entry.	user in any territory sheet where col A is Parcel ID
&apos;//
&apos;//	Exit.	col A formatted with 10 0&apos;s
&apos;//
&apos;// Calls.
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	9/19/20.		wmk.	original code
&apos;//
&apos;//	Notes.
&apos;//

&apos;//	constants.
const TEN_ZEROS=121			&apos;// 10 0&apos;s number format
const COL_A=0

&apos;//	local variables.
dim oDoc	As Object	&apos;// ThisComponent
dim oSel	As Object	&apos;// current cell selection on entry
dim oSheet	As Object	&apos;// current sheet
dim oRange	As Object	&apos;// RangeAddress selected
dim iSheetIx	As Integer	&apos;// sheet index this sheet
dim oCols	As Object	&apos;// .Columns array this sheet
dim oCell	As Object	&apos;// cell selected

	&apos;// code.
	ON ERROR GOTO ErrorHandler
	oDoc = ThisComponent
	oSel = oDoc.getCurrentSelection()
	oRange = oSel.RangeAddress
	iSheetIx = oRange.Sheet
	oSheet = oDoc.Sheets(iSheetIx)
	oCols = oSheet.Columns
	oCols(COL_A).setPropertyValue(&quot;NumberFormat&quot;, TEN_ZEROS)
	
NormalExit:
	exit sub
	
ErrorHandler:
	msgbox(&quot;SetPIDColFormat - unprocessed error&quot;)
	GoTo NormalExit
	
end sub		&apos;// end SetPIDColFormat		9/19/20
&apos;/**/

&apos;// GenELinkM.bas
&apos;//---------------------------------------------------------------------
&apos;// GenELinkM - Generate hyperlink(s) for selected Admin-Edit terr range.
&apos;//		7/13/21.	wmk.	10:41
&apos;//---------------------------------------------------------------------

public sub GenELinkM()

&apos;//	Usage.	macro call or
&apos;//			call GenELinkM()
&apos;//
&apos;// Entry.	Admin-Edit sheet is active; user has selected a range of
&apos;//			cells in desired row(s) to
&apos;//			extract the address field from the COL_ADDR column index
&apos;//			and create a hyperlink to look up phone/address information
&apos;//
&apos;//	Exit.	each row selected has a hperlink added in the COL_HLINK,
&apos;//			COL_HLINK1 and COL_HLINK2 columns in the form:
&apos;//			HYPERLINK(&quot;&lt;url&gt;&quot;) that will allow the end-user to click
&apos;//			on the hyperlink url and be taken to a search webpage
&apos;//
&apos;// Calls.	sGen2PhoneURL, sGen2411URL, sGen2WhtPgesURL
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	9/4/20.		wmk.	original code; adapted from GenMLinkM
&apos;// 9/8/20.		wmk.	documentation updated to latest format information
&apos;//						column range is now H-J; column B contains full address
&apos;//						error handling modified to just skip empty address row
&apos;//						ForceRecalc called to set HYPERLINKs
&apos;// 2/9/21.		wmk.	Changed to call sGen2PhoneURL to pass unit; const
&apos;//						COL_UNIT added for unit handling.
&apos;// 2/10/21.	wmk.	Changed to call sGen2411URL, sGen2WhtPgesURL
&apos;//						to pass unit.
&apos;// 7/13/21.	wmk.	eliminate non-error msgboxes for batch processing.
&apos;//
&apos;//	Notes. GenELinkM accommodates territory extracted using ImportRefUSA
&apos;//	on raw data downloaded into a .csv from ReferenceUSA.com
&apos;// The import goes through several phases.
&apos;//	The 1st phase is to an Admin-Import spreadsheet by taking the ReferenceUSA
&apos;// data and running the ImportRefUSA utility on it.

&apos;// The second phase is to an Admin-Bridge spreadsheet that has the
&apos;// data in columns compatible with MultiMail.db SplitProps table import.

&apos;// The third phase is, using the Admin-Bridge sheet, an Admin-Edit sheet
&apos;// is generated that is simplified for data entry/checking. The Admin-Edit
&apos;// sheet contains the hyperlinks to search truepeople, 411, and whitepages.
&apos;// GenELinkM is used to place the hyperlinks in the Admin-Edit sheet.
&apos;//	If there is newer information in the searches, the address records can be
&apos;// edited to either add/change names/phone numbers.

&apos;// The fourth phase is the Admin-TSExport sheet that is set up to export
&apos;// the territory in fields compatible with Territory Servant app. The
&apos;// Admin-TSExport sheet is the essential information the publisher will
&apos;// get when they have the territory checked out through Territory Servant.

&apos;// On territory completion, the spreadsheet will follow the reverse process.
&apos;// The spreadsheet will be moved directly to the Admin-Edit sheet.
&apos;// If the publisher noted changes in name(s), phone(s) or status (e.g. DoNotCall)
&apos;//	the spreadsheet will then be edited to reflect the changes.

&apos;// Once updated if necessary on the return cycle, the spreadsheet will
&apos;// migrate upwards to the Admin-Bridge spreadsheet. From there, any
&apos;// changed records can be found and replaced in the MultiMail SplitProps
&apos;// table. Once updated, the spreadsheet will go back through the phases
&apos;// and supplied to the territory servant as an updated territory.
&apos;//
&apos;//	Method. for each row, extract address field from COL_GULLADDR
&apos;//		use sGen2PhoneURL to generate url from address
&apos;//     add HYPERLINK(&quot;&lt;url&gt;&quot;) to create hyperlink
&apos;//		store hyperlink in row at COL_HLINK, COL_HLINK1, COL_HLINK2

&apos;// Notes2. Due to mods to the bridge sheet format, the address column
&apos;// now only contains the street address, and a new column was added
&apos;// next to it containing the unit. The SitusAddress column may/may not
&apos;// have a unit. So this version does not need to parse the situs. Instead
&apos;// it will parse the UnitAddress field (COL_B) which will never contain
&apos;// a unit. It will set the Unit to the unit passed as a parameter.

&apos;//	constants.
const COL_CITY=1
const ROW_CITY=2

&apos;//	constants.
const COL_UNITADDR=1		&apos;// unit address
const COL_UNIT=2			&apos;// unit
const COL_HLINK=7			&apos;// truepeoplesearch (H)
const COL_HLINK1=8			&apos;// 411 search (I)
const COL_HLINK2=9			&apos;// whitepages search (J)
const YELLOW=16776960		&apos;// decimal value of YELLOW color

&apos;// cell formatting constants.
&apos;const LJUST=1		&apos;// left-justify HoriJustify
&apos;const CJUST=2		&apos;// center HoriJustify
&apos;const RJUST=0		&apos;// right-justify HoriJustify
&apos;const YELLOW=16776960		&apos;// decimal value of YELLOW color
&apos;const TXT_HLINK=&quot;HYPERLINK(&quot;&quot;&quot;	&apos;// HYPERLINK prefix

&apos;//	local variables.
Dim oDoc As Object
Dim oSheet As Object
Dim NewColumn As Object
dim oSel as Object
dim iSheetIx as integer
dim oRange as Object
dim lThisRow as long		&apos;// current row selected on sheet

&apos;// processing variables.
dim nRowsProcessed As Integer	&apos;// count of rows processed
dim nRowCount		As Integer	&apos;// # rows to process
dim sAddress As String		&apos;// address field from current row
dim sUnit	As String		&apos;// unit field from current row
dim sURL	As String		&apos;// url generated from sAddress, sUnit
dim sHLink	As String		&apos;// HYPERTEXT link to store
dim i		As Integer		&apos;// loop counter

&apos;// XCell sheet objects
dim oCellAddr as object		&apos;// address field
dim oCellUnit As Object		&apos;// unit field
dim oCellHLink as object	&apos;// hyperlink field
dim oCity 	As object		&apos;// city for sheet
dim sCity	As String		&apos;// city from sheet

	&apos;// code.
	ON ERROR GOTO ErrorHandler
	oDoc = ThisComponent
	oSel = oDoc.getCurrentSelection()
	oRange = oSel.RangeAddress
	iSheetIx = oRange.Sheet
	oSheet = oDoc.Sheets(iSheetIx)
	
	&apos;// extract city applying to sheet
	oCity = oSheet.getCellByPosition(COL_CITY, ROW_CITY)
	sCity = trim(oCity.String)
	if len(sCity) = 0 then
		sCity = &quot;Venice&quot;
	endif
	nRowsProcessed = 0		&apos;// clear processed count

	&apos;// set row processing from oRange information
	lThisRow = oRange.StartRow - 1		&apos;// start at -1 since increment first
	nRowCount = oRange.EndRow - lThisRow	&apos;// set row count to process
	for i = 1 to nRowCount
		lThisRow = lThisRow + 1		&apos;// advance current row
		oCellAddr = oSheet.getCellByPosition(COL_UNITADDR, lThisRow)
		sAddress = trim(oCellAddr.String)		&apos;// set cell address text
		if len(sAddress) = 0 then
&apos;			msgBox(&quot;GenELinkM  - empty address field; skipping..&quot;) &apos;//
			oCellAddr.CellBackColor = YELLOW
			GoTo Nextfor
		endif	&apos;// null string - alert user, mark row and bail
		oCellUnit = oSheet.getCellByPosition(COL_UNIT, lThisRow)
		sUnit = trim(oCellUnit.String)			&apos;// unit for call(s)
		
		&apos;// Generate truepeople.. URL
		sURL = sGen2PhoneURL(sAddress, sUnit, sCity)
		sHLink = &quot;=&quot;+TXT_HLINK + sURL + CHR(34)+&quot;;&quot;+CHR(34) _
	 + &quot;Click here to search&quot; + CHR(34) + &quot;)&quot;
&apos;msgbox(&quot;Double quote = &quot; + ASC(&quot;&quot;&quot;&quot;) )
&apos;msgbox(&quot;Generated URL =&quot; + CHR(13) + CHR(10) _
&apos;		+ &quot;&apos;&quot; + sURL + &quot;&apos;&quot; + CHR(13) + CHR(10) _
&apos;		+ &quot;Generated Hypertext link = &quot; + CHR(13) + CHR(10) _
&apos;		+ &quot;&apos;&quot; + sHLink )
&apos;		oCellHLink.String = sHLink
		oCellHLink = oSheet.getCellByPosition(COL_HLINK, lThisRow)
		oCellHLink.setFormula(sHLink)
		
		&apos;// Generate 411.. URL
		sURL = sGen2411URL(sAddress, sUnit, sCity)
		sHLink = &quot;=&quot;+TXT_HLINK + sURL + CHR(34)+&quot;;&quot;+CHR(34) _
	 + &quot;Click here to search&quot; + CHR(34) + &quot;)&quot;
&apos;msgbox(&quot;Generated URL =&quot; + CHR(13) + CHR(10) _
&apos;		+ &quot;&apos;&quot; + sURL + &quot;&apos;&quot; + CHR(13) + CHR(10) _
&apos;		+ &quot;Generated Hypertext link = &quot; + CHR(13) + CHR(10) _
&apos;		+ &quot;&apos;&quot; + sHLink )
		oCellHLink = oSheet.getCellByPosition(COL_HLINK1, lThisRow)
		oCellHLink.setFormula(sHLink)

		&apos;// Generate whitepages.. URL
		sURL = sGen2WhtPgesURL(sAddress, sUnit, sCity)
		sHLink = &quot;=&quot;+TXT_HLINK + sURL + CHR(34)+&quot;;&quot;+CHR(34) _
	 + &quot;Click here to search&quot; + CHR(34) + &quot;)&quot;
&apos;msgbox(&quot;Generated URL =&quot; + CHR(13) + CHR(10) _
&apos;		+ &quot;&apos;&quot; + sURL + &quot;&apos;&quot; + CHR(13) + CHR(10) _
&apos;		+ &quot;Generated Hypertext link = &quot; + CHR(13) + CHR(10) _
&apos;		+ &quot;&apos;&quot; + sHLink )
		oCellHLink = oSheet.getCellByPosition(COL_HLINK2, lThisRow)
		oCellHLink.setFormula(sHLink)
		
Nextfor:
		nRowsProcessed = nRowsProcessed + 1

	next i
	
	ForceRecalc()
&apos;	msgbox(&quot;GenELinkM  - &quot; + nRowsProcessed + &quot; rows processed&quot;)
		
NormalExit:
	exit sub
	
ErrorHandler:
   msgbox(&quot;GenELinkM  - unprocessed error.&quot;)
   GoTo NormalExit

end sub		&apos;// end GenELinkM 	7/13/21. 10:41
&apos;/**/

&apos;// GenELinkM.bas
&apos;//---------------------------------------------------------------------
&apos;// GenELinkM - Generate hyperlink(s) for selected Admin-Edit terr range.
&apos;//		9/8/20.	wmk.	11:25
&apos;//---------------------------------------------------------------------

public sub GenELinkMOld()

&apos;//	Usage.	macro call or
&apos;//			call GenELinkM()
&apos;//
&apos;// Entry.	Admin-Edit sheet is active; user has selected a range of
&apos;//			cells in desired row(s) to
&apos;//			extract the address field from the COL_ADDR column index
&apos;//			and create a hyperlink to look up phone/address information
&apos;//
&apos;//	Exit.	each row selected has a hperlink added in the COL_HLINK,
&apos;//			COL_HLINK1 and COL_HLINK2 columns in the form:
&apos;//			HYPERLINK(&quot;&lt;url&gt;&quot;) that will allow the end-user to click
&apos;//			on the hyperlink url and be taken to a search webpage
&apos;//
&apos;// Calls.	sGenPhoneURL, sGen411URL, sGenWhtPgesURL
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	9/4/20.		wmk.	original code; adapted from GenMLinkM
&apos;// 9/8/20.		wmk.	documentation updated to latest format information
&apos;//						column range is now H-J; column B contains full address
&apos;//						error handling modified to just skip empty address row
&apos;//						ForceRecalc called to set HYPERLINKs
&apos;//
&apos;//	Notes. GenELinkM accommodates territory extracted using ImportRefUSA
&apos;//	on raw data downloaded into a .csv from ReferenceUSA.com
&apos;// The import goes through several phases.
&apos;//	The 1st phase is to an Admin-Import spreadsheet by taking the ReferenceUSA
&apos;// data and running the ImportRefUSA utility on it.

&apos;// The second phase is to an Admin-Bridge spreadsheet that has the
&apos;// data in columns compatible with MultiMail.db SplitProps table import.

&apos;// The third phase is, using the Admin-Bridge sheet, an Admin-Edit sheet
&apos;// is generated that is simplified for data entry/checking. The Admin-Edit
&apos;// sheet contains the hyperlinks to search truepeople, 411, and whitepages.
&apos;// GenELinkM is used to place the hyperlinks in the Admin-Edit sheet.
&apos;//	If there is newer information in the searches, the address records can be
&apos;// edited to either add/change names/phone numbers.

&apos;// The fourth phase is the Admin-TSExport sheet that is set up to export
&apos;// the territory in fields compatible with Territory Servant app. The
&apos;// Admin-TSExport sheet is the essential information the publisher will
&apos;// get when they have the territory checked out through Territory Servant.

&apos;// On territory completion, the spreadsheet will follow the reverse process.
&apos;// The spreadsheet will be moved directly to the Admin-Edit sheet.
&apos;// If the publisher noted changes in name(s), phone(s) or status (e.g. DoNotCall)
&apos;//	the spreadsheet will then be edited to reflect the changes.

&apos;// Once updated if necessary on the return cycle, the spreadsheet will
&apos;// migrate upwards to the Admin-Bridge spreadsheet. From there, any
&apos;// changed records can be found and replaced in the MultiMail SplitProps
&apos;// table. Once updated, the spreadsheet will go back through the phases
&apos;// and supplied to the territory servant as an updated territory.
&apos;//
&apos;//	Method. for each row, extract address field from COL_GULLADDR
&apos;//		use sGenPhoneURL to generate url from address
&apos;//     add HYPERLINK(&quot;&lt;url&gt;&quot;) to create hyperlink
&apos;//		store hyperlink in row at COL_HLINK, COL_HLINK1, COL_HLINK2

&apos;//	constants.
const COL_CITY=1
const ROW_CITY=2

&apos;//	constants.
const COL_FULLADDR=1		&apos;// full concatenated address
const COL_HLINK=7			&apos;// truepeoplesearch (H)
const COL_HLINK1=8			&apos;// 411 search (I)
const COL_HLINK2=9			&apos;// whitepages search (J)
const YELLOW=16776960		&apos;// decimal value of YELLOW color

&apos;// cell formatting constants.
&apos;const LJUST=1		&apos;// left-justify HoriJustify
&apos;const CJUST=2		&apos;// center HoriJustify
&apos;const RJUST=0		&apos;// right-justify HoriJustify
&apos;const YELLOW=16776960		&apos;// decimal value of YELLOW color
&apos;const TXT_HLINK=&quot;HYPERLINK(&quot;&quot;&quot;	&apos;// HYPERLINK prefix

&apos;//	local variables.
Dim oDoc As Object
Dim oSheet As Object
Dim NewColumn As Object
dim oSel as Object
dim iSheetIx as integer
dim oRange as Object
dim lThisRow as long		&apos;// current row selected on sheet

&apos;// processing variables.
dim nRowsProcessed As Integer	&apos;// count of rows processed
dim nRowCount		As Integer	&apos;// # rows to process
dim sAddress As String		&apos;// address field from current row
dim sURL	As String		&apos;// url generated from sAddress
dim sHLink	As String		&apos;// HYPERTEXT link to store
dim i		As Integer		&apos;// loop counter

&apos;// XCell sheet objects
dim oCellAddr as object		&apos;// address field
dim oCellHLink as object	&apos;// hyperlink field
dim oCity 	As object		&apos;// city for sheet
dim sCity	As String		&apos;// city from sheet

	&apos;// code.
	ON ERROR GOTO ErrorHandler
	oDoc = ThisComponent
	oSel = oDoc.getCurrentSelection()
	oRange = oSel.RangeAddress
	iSheetIx = oRange.Sheet
	oSheet = oDoc.Sheets(iSheetIx)
	
	&apos;// extract city applying to sheet
	oCity = oSheet.getCellByPosition(COL_CITY, ROW_CITY)
	sCity = trim(oCity.String)
	if len(sCity) = 0 then
		sCity = &quot;Venice&quot;
	endif
	nRowsProcessed = 0		&apos;// clear processed count

	&apos;// set row processing from oRange information
	lThisRow = oRange.StartRow - 1		&apos;// start at -1 since increment first
	nRowCount = oRange.EndRow - lThisRow	&apos;// set row count to process
	for i = 1 to nRowCount
		lThisRow = lThisRow + 1		&apos;// advance current row
		oCellAddr = oSheet.getCellByPosition(COL_FULLADDR, lThisRow)
		sAddress = trim(oCellAddr.String)		&apos;// set cell address text
		if len(sAddress) = 0 then
			msgBox(&quot;GenELinkM  - empty address field; skipping..&quot;) &apos;//
			oCellAddr.CellBackColor = YELLOW
			GoTo Nextfor
		endif	&apos;// null string - alert user, mark row and bail

		&apos;// Generate truepeople.. URL
		sURL = sGenPhoneURL(sAddress, sCity)
		sHLink = &quot;=&quot;+TXT_HLINK + sURL + CHR(34)+&quot;;&quot;+CHR(34) _
	 + &quot;Click here to search&quot; + CHR(34) + &quot;)&quot;
&apos;msgbox(&quot;Double quote = &quot; + ASC(&quot;&quot;&quot;&quot;) )
&apos;msgbox(&quot;Generated URL =&quot; + CHR(13) + CHR(10) _
&apos;		+ &quot;&apos;&quot; + sURL + &quot;&apos;&quot; + CHR(13) + CHR(10) _
&apos;		+ &quot;Generated Hypertext link = &quot; + CHR(13) + CHR(10) _
&apos;		+ &quot;&apos;&quot; + sHLink )
&apos;		oCellHLink.String = sHLink
		oCellHLink = oSheet.getCellByPosition(COL_HLINK, lThisRow)
		oCellHLink.setFormula(sHLink)
		
		&apos;// Generate 411.. URL
		sURL = sGen411URL(sAddress, sCity)
		sHLink = &quot;=&quot;+TXT_HLINK + sURL + CHR(34)+&quot;;&quot;+CHR(34) _
	 + &quot;Click here to search&quot; + CHR(34) + &quot;)&quot;
&apos;msgbox(&quot;Generated URL =&quot; + CHR(13) + CHR(10) _
&apos;		+ &quot;&apos;&quot; + sURL + &quot;&apos;&quot; + CHR(13) + CHR(10) _
&apos;		+ &quot;Generated Hypertext link = &quot; + CHR(13) + CHR(10) _
&apos;		+ &quot;&apos;&quot; + sHLink )
		oCellHLink = oSheet.getCellByPosition(COL_HLINK1, lThisRow)
		oCellHLink.setFormula(sHLink)

		&apos;// Generate whitepages.. URL
		sURL = sGenWhtPgesURL(sAddress, sCity)
		sHLink = &quot;=&quot;+TXT_HLINK + sURL + CHR(34)+&quot;;&quot;+CHR(34) _
	 + &quot;Click here to search&quot; + CHR(34) + &quot;)&quot;
&apos;msgbox(&quot;Generated URL =&quot; + CHR(13) + CHR(10) _
&apos;		+ &quot;&apos;&quot; + sURL + &quot;&apos;&quot; + CHR(13) + CHR(10) _
&apos;		+ &quot;Generated Hypertext link = &quot; + CHR(13) + CHR(10) _
&apos;		+ &quot;&apos;&quot; + sHLink )
		oCellHLink = oSheet.getCellByPosition(COL_HLINK2, lThisRow)
		oCellHLink.setFormula(sHLink)
		
Nextfor:
		nRowsProcessed = nRowsProcessed + 1

	next i
	
	ForceRecalc()
	msgbox(&quot;GenELinkM  - &quot; + nRowsProcessed + &quot; rows processed&quot;)
		
NormalExit:
	exit sub
	
ErrorHandler:
   msgbox(&quot;GenELinkM  - unprocessed error.&quot;)
   GoTo NormalExit

end sub		&apos;// end GenELinkM 	9/8/20.
&apos;/**/

&apos;// GenFLinkM.bas
&apos;//---------------------------------------------------------------
&apos;// GenFLinkM - Generate hyperlink(s) for selected range.
&apos;//		7/13/21.	wmk.	10:36
&apos;//---------------------------------------------------------------

public sub GenFLinkM()

&apos;//	Usage.	macro call or
&apos;//			call GenFLinkM()
&apos;//
&apos;//
&apos;// Entry.	user has selected a range of cells in desired row(s) to
&apos;//			extract the address field from the COL_ADDR column index
&apos;//			and create a hyperlink to look up phone/address information
&apos;//			from fastpeoplesearch.com
&apos;//			cell B3 has city name
&apos;//
&apos;//	Exit.	each row selected has a hperlink added in the COL_HLINK
&apos;//			column in the form:
&apos;//			HYPERLINK(&quot;&lt;url&gt;&quot;) that will allow the end-user to click
&apos;//			on the hyperlink url and be taken to a search webpage
&apos;//
&apos;// Calls.	
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;// 2/16/21.	wmk.	original code; adapted from GenHLinkM
&apos;//	2/18/21.	wmk.	bug fix &quot;City&quot; being included in sCity.
&apos;//
&apos;//	Notes. Semicolon &quot;;&quot; MUST be used for the HYPERLINK paramters
&apos;// delimiter in order for the hyperlinks to work in Excel.
&apos;// The current sGenPhoneURL only generates links to the
&apos;// truepeoplesearch.com website. It could possible be expanded in the
&apos;//	future to be able to use.
&apos;// Wishlist. Pick up COL_ADDR and COL_HLINK from predetermined cells
&apos;// in the oRange.Sheet.
&apos;//	Method. for each row, extract address field from COL_ADDR
&apos;//		use sGenPhoneURL to generate url from address
&apos;//     add HYPERLINK(&quot;&lt;url&gt;&quot;) to create hyperlink
&apos;//		store hyperlink in row at COL_HLINK

&apos;//	constants.
&apos;// see Module header...
const ROW_HEADING=4		&apos;// heading row index
const COL_ADDR=1		&apos;// column index for extracting address
const COL_FLINK=6		&apos;// column for fastpeople hyperlink
const COL_CITY=1		&apos;// column for city
const ROW_CITY=2		&apos;// row for city
const COL_UNIT=2		&apos;// column index for unit
const COL_B=1			&apos;// column index for col B
const ROW_2=1			&apos;// row index for row 2

&apos;// cell formatting constants.
const LJUST=1		&apos;// left-justify HoriJustify
const CJUST=2		&apos;// center HoriJustify
const RJUST=0		&apos;// right-justify HoriJustify
const YELLOW=16776960		&apos;// decimal value of YELLOW color
const TXT_HLINK=&quot;HYPERLINK(&quot;&quot;&quot;	&apos;// HYPERLINK prefix

&apos;//	local variables.
Dim oDoc As Object
Dim oSheet As Object
Dim NewColumn As Object
dim oSel as Object
dim iSheetIx as integer
dim oRange as Object
dim lThisRow as long		&apos;// current row selected on sheet

&apos;// processing variables.
dim nRowsProcessed	 As Integer	&apos;// count of rows processed
dim nRowCount		As Integer	&apos;// # rows to process
dim sAddress As String		&apos;// address field from current row
dim sURL	As String		&apos;// url generated from sAddress
dim sHLink	As String		&apos;// HYPERTEXT link to store
dim i		As Integer		&apos;// loop counter

&apos;// XCell sheet objects
dim oCellAddr as object		&apos;// address field
dim oCellUnit	As Object	&apos;// unit field
dim oCellFLink as object	&apos;// hyperlink field
dim oCity 	As object		&apos;// city for sheet
dim sCity	As String		&apos;// city from sheet
dim sUnit	As String		&apos;// unit from sheet
dim oCell		As Object	&apos;// working cell

	&apos;// code.
	ON ERROR GOTO ErrorHandler
	oDoc = ThisComponent
	oSel = oDoc.getCurrentSelection()
	oRange = oSel.RangeAddress
	iSheetIx = oRange.Sheet
	oSheet = oDoc.Sheets(iSheetIx)
	
	dim sCountStr 		As String
	dim nColonPos		As Integer
	dim sNumCount		As String
	&apos;// extract city applying to sheet
	oCity = oSheet.getCellByPosition(COL_CITY, ROW_CITY)
	sCity = trim(oCity.String)
	nColonPos = instr(sCity, &quot;:&quot;)
	if nColonPos &gt; 0 then
		sCity = trim(right(sCity, len(sCity)-nColonPos))
	endif
	
	if len(sCity) = 0 then
		sCity = &quot;Venice&quot;
	endif
	nRowsProcessed = 0		&apos;// clear processed count

	&apos;// set row processing from oRange information
&apos;	lThisRow = oRange.StartRow - 1		&apos;// start at -1 since increment first
	lThisRow = ROW_HEADING
	nRowCount = oRange.EndRow - lThisRow	&apos;// set row count to process

	&apos;// get row count from B2.
	oCell = oSheet.getCellByPosition(COL_B,ROW_2)		&apos;// Record Count: xxx
	sCountStr = oCell.String
	nColonPos = Instr(sCountStr, &quot;:&quot;)
	sNumCount = Right(sCountStr, len(sCountStr)-nColonPos)
	nRowCount = CInt(sNumCount)
&apos;	nRowCount = oCell.getValue()
	for i = 1 to nRowCount
		lThisRow = lThisRow + 1		&apos;// advance current row
		oCellAddr = oSheet.getCellByPosition(COL_ADDR, lThisRow)
		oCellUnit = oSheet.getCellByPosition(COL_UNIT, lThisRow)
		oCellFLink = oSheet.getCellByPosition(COL_FLINK, lThisRow)
		sAddress = trim(oCellAddr.String)		&apos;// set cell address text
		
		if len(oCellUnit.String) = 0 then
			sUnit = &quot;&quot;
		else
			sUnit = trim(oCellUnit.String)			&apos;// set unit text
		endif
		
		if len(sAddress) = 0 then
&apos;			msgBox(&quot;GenFLinkM - empty address field; halting process.&quot;)
			oCellAddr.CellBackColor = YELLOW
			exit for
		endif	&apos;// null string - alert user, mark row and bail

		&apos;// see what piece of oCellHLink contains HYPERLINK.. maybe function?
&apos;XRay oCellHLink
&apos;sLink = oCellHLink.String
&apos;msgbox(&quot;HLink cell .String = &apos;&quot; + sLink + &quot;&apos;&quot;
&apos;sLink = oCellHLink.getFormula()
&apos;msgbox(&quot;HLink cell .Formula = &apos;&quot; + sLink + &quot;&apos;&quot;
&apos;sLink = oCellHLink.Hyperlink
&apos;msgbox(&quot;HLink cell .Hyperlink = &apos;&quot; + sLink + &quot;&apos;&quot;
&apos;        if true then
&apos;        if false then
&apos;           GoTo Nextfor
&apos;        endif

		&apos;// Generate fastpeople.. URL
		sURL = sGenFastURL(sAddress, sUnit, sCity)
		sHLink = &quot;=&quot;+TXT_HLINK + sURL + CHR(34)+&quot;;&quot;+CHR(34) _
	 + &quot;Click here to search&quot; + CHR(34) + &quot;)&quot;
&apos;msgbox(&quot;Double quote = &quot; + ASC(&quot;&quot;&quot;&quot;) )
&apos;msgbox(&quot;Generated URL =&quot; + CHR(13) + CHR(10) _
&apos;		+ &quot;&apos;&quot; + sURL + &quot;&apos;&quot; + CHR(13) + CHR(10) _
&apos;		+ &quot;Generated Hypertext link = &quot; + CHR(13) + CHR(10) _
&apos;		+ &quot;&apos;&quot; + sHLink )

&apos;		oCellHLink.String = sHLink
		oCellFLink.setFormula(sHLink)
		
		
Nextfor:
		nRowsProcessed = nRowsProcessed + 1

	next i
	
&apos;	msgbox(&quot;GenFLinkM - &quot; + nRowsProcessed + &quot; rows processed&quot;)
	
NormalExit:
	exit sub
	
ErrorHandler:
   msgbox(&quot;GenFLinkM - unprocessed error.&quot;)
   GoTo NormalExit

end sub		&apos;// end GenFLinkM	7/13/21.	10:36
&apos;/**/

&apos;// GenHLinkM.bas
&apos;//---------------------------------------------------------------
&apos;// GenHLinkM - Generate hyperlink(s) for selected range.
&apos;//		8/16/20.	wmk.	14:00
&apos;//---------------------------------------------------------------

public sub GenHLinkM()

&apos;//	Usage.	macro call or
&apos;//			call GenHLinkM()
&apos;//
&apos;//
&apos;// Entry.	user has selected a range of cells in desired row(s) to
&apos;//			extract the address field from the COL_ADDR column index
&apos;//			and create a hyperlink to look up phone/address information
&apos;//
&apos;//	Exit.	each row selected has a hperlink added in the COL_HLINK
&apos;//			column in the form:
&apos;//			HYPERLINK(&quot;&lt;url&gt;&quot;) that will allow the end-user to click
&apos;//			on the hyperlink url and be taken to a search webpage
&apos;//
&apos;// Calls.	sGenPhoneURL, sGen411URL
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	8/11/20.	wmk.	original code; adapted from InsRowM.bas
&apos;// 8/13/20.	wmk.	call to sGen411URL added for 411.com lookup;
&apos;//						&quot;=&quot; added in front and &quot;Click here to search&quot;
&apos;//						added to cell
&apos;// 8/16/20.	wmk.	call to sGenWhtPgesURL added for whitepages.com
&apos;//						lookup; constants moved to module header
&apos;//
&apos;//	Notes. The curreht sGenPhoneURL only generates links to the
&apos;// truepeoplesearch.com website. It could possible be expanded in the
&apos;//	future to be able to use.
&apos;// Wishlist. Pick up COL_ADDR and COL_HLINK from predetermined cells
&apos;// in the oRange.Sheet.
&apos;//	Method. for each row, extract address field from COL_ADDR
&apos;//		use sGenPhoneURL to generate url from address
&apos;//     add HYPERLINK(&quot;&lt;url&gt;&quot;) to create hyperlink
&apos;//		store hyperlink in row at COL_HLINK

&apos;//	constants.
&apos;// see Module header...
&apos;const COL_ADDR=1		&apos;// column index for extracting address
&apos;const COL_HLINK=4		&apos;// column for truepeople hyperlink
&apos;const COL_HLINK1=5		&apos;// column for 411 hyperlink
&apos;const COL_CITY=1		&apos;// column index for city
&apos;const ROW_CITY=2		&apos;// row index for city -B3

&apos;// cell formatting constants.
&apos;const LJUST=1		&apos;// left-justify HoriJustify
&apos;const CJUST=2		&apos;// center HoriJustify
&apos;const RJUST=0		&apos;// right-justify HoriJustify
&apos;const YELLOW=16776960		&apos;// decimal value of YELLOW color
&apos;const TXT_HLINK=&quot;HYPERLINK(&quot;&quot;&quot;	&apos;// HYPERLINK prefix

&apos;//	local variables.
Dim oDoc As Object
Dim oSheet As Object
Dim NewColumn As Object
dim oSel as Object
dim iSheetIx as integer
dim oRange as Object
dim lThisRow as long		&apos;// current row selected on sheet

&apos;// processing variables.
dim nRowsProcessed	 As Integer	&apos;// count of rows processed
dim nRowCount		As Integer	&apos;// # rows to process
dim sAddress As String		&apos;// address field from current row
dim sURL	As String		&apos;// url generated from sAddress
dim sHLink	As String		&apos;// HYPERTEXT link to store
dim i		As Integer		&apos;// loop counter

&apos;// XCell sheet objects
dim oCellAddr as object		&apos;// address field
dim oCellHLink as object	&apos;// hyperlink field
dim oCity 	As object		&apos;// city for sheet
dim sCity	As String		&apos;// city from sheet

	&apos;// code.
	ON ERROR GOTO ErrorHandler
	oDoc = ThisComponent
	oSel = oDoc.getCurrentSelection()
	oRange = oSel.RangeAddress
	iSheetIx = oRange.Sheet
	oSheet = oDoc.Sheets(iSheetIx)
	
	&apos;// extract city applying to sheet
	oCity = oSheet.getCellByPosition(COL_CITY, ROW_CITY)
	sCity = trim(oCity.String)
	if len(sCity) = 0 then
		sCity = &quot;Venice&quot;
	endif
	nRowsProcessed = 0		&apos;// clear processed count

	&apos;// set row processing from oRange information
	lThisRow = oRange.StartRow - 1		&apos;// start at -1 since increment first
	nRowCount = oRange.EndRow - lThisRow	&apos;// set row count to process
	for i = 1 to nRowCount
		lThisRow = lThisRow + 1		&apos;// advance current row
		oCellAddr = oSheet.getCellByPosition(COL_ADDR, lThisRow)
		oCellHLink = oSheet.getCellByPosition(COL_HLINK, lThisRow)
		sAddress = trim(oCellAddr.String)		&apos;// set cell address text
		if len(sAddress) = 0 then
			msgBox(&quot;GenHLinkM - empty address field; halting process.&quot;)
			oCellAddr.CellBackColor = YELLOW
			exit for
		endif	&apos;// null string - alert user, mark row and bail

		&apos;// see what piece of oCellHLink contains HYPERLINK.. maybe function?
&apos;XRay oCellHLink
&apos;sLink = oCellHLink.String
&apos;msgbox(&quot;HLink cell .String = &apos;&quot; + sLink + &quot;&apos;&quot;
&apos;sLink = oCellHLink.getFormula()
&apos;msgbox(&quot;HLink cell .Formula = &apos;&quot; + sLink + &quot;&apos;&quot;
&apos;sLink = oCellHLink.Hyperlink
&apos;msgbox(&quot;HLink cell .Hyperlink = &apos;&quot; + sLink + &quot;&apos;&quot;
&apos;        if true then
&apos;        if false then
&apos;           GoTo Nextfor
&apos;        endif

		&apos;// Generate truepeople.. URL
		sURL = sGenPhoneURL(sAddress, sCity)
		sHLink = &quot;=&quot;+TXT_HLINK + sURL + CHR(34)+&quot;;&quot;+CHR(34) _
	 + &quot;Click here to search&quot; + CHR(34) + &quot;)&quot;
&apos;msgbox(&quot;Double quote = &quot; + ASC(&quot;&quot;&quot;&quot;) )
&apos;msgbox(&quot;Generated URL =&quot; + CHR(13) + CHR(10) _
&apos;		+ &quot;&apos;&quot; + sURL + &quot;&apos;&quot; + CHR(13) + CHR(10) _
&apos;		+ &quot;Generated Hypertext link = &quot; + CHR(13) + CHR(10) _
&apos;		+ &quot;&apos;&quot; + sHLink )
&apos;		oCellHLink.String = sHLink
		oCellHLink.setFormula(sHLink)
		
		&apos;// Generate 411.. URL
		sURL = sGen411URL(sAddress, sCity)
		sHLink = &quot;=&quot;+TXT_HLINK + sURL + CHR(34)+&quot;;&quot;+CHR(34) _
	 + &quot;Click here to search&quot; + CHR(34) + &quot;)&quot;
&apos;msgbox(&quot;Generated URL =&quot; + CHR(13) + CHR(10) _
&apos;		+ &quot;&apos;&quot; + sURL + &quot;&apos;&quot; + CHR(13) + CHR(10) _
&apos;		+ &quot;Generated Hypertext link = &quot; + CHR(13) + CHR(10) _
&apos;		+ &quot;&apos;&quot; + sHLink )
		oCellHLink = oSheet.getCellByPosition(COL_HLINK1, lThisRow)
		oCellHLink.setFormula(sHLink)

		&apos;// Generate whitepages.. URL
		sURL = sGenWhtPgesURL(sAddress, sCity)
		sHLink = &quot;=&quot;+TXT_HLINK + sURL + CHR(34)+&quot;;&quot;+CHR(34) _
	 + &quot;Click here to search&quot; + CHR(34) + &quot;)&quot;
&apos;msgbox(&quot;Generated URL =&quot; + CHR(13) + CHR(10) _
&apos;		+ &quot;&apos;&quot; + sURL + &quot;&apos;&quot; + CHR(13) + CHR(10) _
&apos;		+ &quot;Generated Hypertext link = &quot; + CHR(13) + CHR(10) _
&apos;		+ &quot;&apos;&quot; + sHLink )
		oCellHLink = oSheet.getCellByPosition(COL_HLINK2, lThisRow)
		oCellHLink.setFormula(sHLink)
		
Nextfor:
		nRowsProcessed = nRowsProcessed + 1

	next i
	
	msgbox(&quot;GenHLinkM - &quot; + nRowsProcessed + &quot; rows processed&quot;)
	
NormalExit:
	exit sub
	
ErrorHandler:
   msgbox(&quot;GenHLinkM - unprocessed error.&quot;)
   GoTo NormalExit

end sub		&apos;// end GenHLinkM	8/16/20.
&apos;/**/

&apos;// GenMLinkM.bas
&apos;//---------------------------------------------------------------------
&apos;// GenMLinkM - Generate hyperlink(s) for selected MultiMail terr range.
&apos;//		9/8/20.	wmk.	09:30
&apos;//---------------------------------------------------------------------

public sub GenMLinkM()

&apos;//	Usage.	macro call or
&apos;//			call GenMLinkM()
&apos;//
&apos;// Entry.	user selection is Admin-Import format sheet
&apos;//			user has selected a range of cells in desired row(s) to
&apos;//			extract the address field from the COL_ADDR column index
&apos;//			and create a hyperlink to look up phone/address information
&apos;//
&apos;//	Exit.	each row selected has a hperlink added in the COL_HLINK,
&apos;//			COL_HLINK1 and COL_HLINK2 (N, O, P) columns in the form:
&apos;//			HYPERLINK(&quot;&lt;url&gt;&quot;) that will allow the end-user to click
&apos;//			on the hyperlink url and be taken to a search webpage
&apos;//
&apos;// Calls.	sGenPhoneURL, sGen411URL, sGenWhtPgesURL
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	8/22/20.	wmk.	original code; adapted from GenHLinkM
&apos;// 8/23/20.	wmk.	columns adjusted 1 right for new &quot;Found Name&quot; column
&apos;// 9/8/20.		wmk.	add documentation that links are in cols N-P
&apos;//
&apos;//	Notes. GenMLinkM accommodates territory extracted using a combination
&apos;// of brute force physical search and ReferenceUSA.com. These supply
&apos;// the list of addresses. Since the first pass on the data came from 
&apos;// the brute force method, the downstream routines for URL generation
&apos;// use the full address. All of the ReferenceUSA.com fields are
&apos;// present in the territory spreadsheet, but a utility was written
&apos;// to bridge the split address into a full address for use with
&apos;// existing software modules.
&apos;//	Method. for each row, extract address field from COL_GULLADDR
&apos;//		use sGenPhoneURL to generate url from address
&apos;//     add HYPERLINK(&quot;&lt;url&gt;&quot;) to create hyperlink
&apos;//		store hyperlink in row at COL_HLINK, COL_HLINK1, COL_HLINK2

&apos;//	constants.
const COL_CITY=1
const ROW_CITY=2

&apos;//	constants. (shared with ConcatAddressM)
const COL_NUMBER=3			&apos;// house number
const COL_PREDIR=4			&apos;// street pre-direction
const COL_STREET=5			&apos;// street name
const COL_SUFFIX=6			&apos;// street suffix (e.g. Ave)
const COL_POSTDIR=7			&apos;// street post direction
const COL_UNIT=8			&apos;// unit/apt #
const COL_FULLADDR=9		&apos;// full concatenated address
const COL_HLINK=13			&apos;// truepeoplesearch (N)
const COL_HLINK1=14			&apos;// 411 search (O)
const COL_HLINK2=15			&apos;// whitepages search (P)
const YELLOW=16776960		&apos;// decimal value of YELLOW color

&apos;// cell formatting constants.
&apos;const LJUST=1		&apos;// left-justify HoriJustify
&apos;const CJUST=2		&apos;// center HoriJustify
&apos;const RJUST=0		&apos;// right-justify HoriJustify
&apos;const YELLOW=16776960		&apos;// decimal value of YELLOW color
&apos;const TXT_HLINK=&quot;HYPERLINK(&quot;&quot;&quot;	&apos;// HYPERLINK prefix

&apos;//	local variables.
Dim oDoc As Object
Dim oSheet As Object
Dim NewColumn As Object
dim oSel as Object
dim iSheetIx as integer
dim oRange as Object
dim lThisRow as long		&apos;// current row selected on sheet

&apos;// processing variables.
dim nRowsProcessed As Integer	&apos;// count of rows processed
dim nRowCount		As Integer	&apos;// # rows to process
dim sAddress As String		&apos;// address field from current row
dim sURL	As String		&apos;// url generated from sAddress
dim sHLink	As String		&apos;// HYPERTEXT link to store
dim i		As Integer		&apos;// loop counter

&apos;// XCell sheet objects
dim oCellAddr as object		&apos;// address field
dim oCellHLink as object	&apos;// hyperlink field
dim oCity 	As object		&apos;// city for sheet
dim sCity	As String		&apos;// city from sheet

	&apos;// code.
	ON ERROR GOTO ErrorHandler
	oDoc = ThisComponent
	oSel = oDoc.getCurrentSelection()
	oRange = oSel.RangeAddress
	iSheetIx = oRange.Sheet
	oSheet = oDoc.Sheets(iSheetIx)
	
	&apos;// extract city applying to sheet
	oCity = oSheet.getCellByPosition(COL_CITY, ROW_CITY)
	sCity = trim(oCity.String)
	if len(sCity) = 0 then
		sCity = &quot;Venice&quot;
	endif
	nRowsProcessed = 0		&apos;// clear processed count

	&apos;// set row processing from oRange information
	lThisRow = oRange.StartRow - 1		&apos;// start at -1 since increment first
	nRowCount = oRange.EndRow - lThisRow	&apos;// set row count to process
	for i = 1 to nRowCount
		lThisRow = lThisRow + 1		&apos;// advance current row
		oCellAddr = oSheet.getCellByPosition(COL_FULLADDR, lThisRow)
		oCellHLink = oSheet.getCellByPosition(COL_HLINK, lThisRow)
		sAddress = trim(oCellAddr.String)		&apos;// set cell address text
		if len(sAddress) = 0 then
			msgBox(&quot;GenMLinkM  - empty address field; halting process.&quot;)
			oCellAddr.CellBackColor = YELLOW
			exit for
		endif	&apos;// null string - alert user, mark row and bail

		&apos;// Generate truepeople.. URL
		sURL = sGenPhoneURL(sAddress, sCity)
		sHLink = &quot;=&quot;+TXT_HLINK + sURL + CHR(34)+&quot;;&quot;+CHR(34) _
	 + &quot;Click here to search&quot; + CHR(34) + &quot;)&quot;
&apos;msgbox(&quot;Double quote = &quot; + ASC(&quot;&quot;&quot;&quot;) )
&apos;msgbox(&quot;Generated URL =&quot; + CHR(13) + CHR(10) _
&apos;		+ &quot;&apos;&quot; + sURL + &quot;&apos;&quot; + CHR(13) + CHR(10) _
&apos;		+ &quot;Generated Hypertext link = &quot; + CHR(13) + CHR(10) _
&apos;		+ &quot;&apos;&quot; + sHLink )
&apos;		oCellHLink.String = sHLink
		oCellHLink.setFormula(sHLink)
		
		&apos;// Generate 411.. URL
		sURL = sGen411URL(sAddress, sCity)
		sHLink = &quot;=&quot;+TXT_HLINK + sURL + CHR(34)+&quot;;&quot;+CHR(34) _
	 + &quot;Click here to search&quot; + CHR(34) + &quot;)&quot;
&apos;msgbox(&quot;Generated URL =&quot; + CHR(13) + CHR(10) _
&apos;		+ &quot;&apos;&quot; + sURL + &quot;&apos;&quot; + CHR(13) + CHR(10) _
&apos;		+ &quot;Generated Hypertext link = &quot; + CHR(13) + CHR(10) _
&apos;		+ &quot;&apos;&quot; + sHLink )
		oCellHLink = oSheet.getCellByPosition(COL_HLINK1, lThisRow)
		oCellHLink.setFormula(sHLink)

		&apos;// Generate whitepages.. URL
		sURL = sGenWhtPgesURL(sAddress, sCity)
		sHLink = &quot;=&quot;+TXT_HLINK + sURL + CHR(34)+&quot;;&quot;+CHR(34) _
	 + &quot;Click here to search&quot; + CHR(34) + &quot;)&quot;
&apos;msgbox(&quot;Generated URL =&quot; + CHR(13) + CHR(10) _
&apos;		+ &quot;&apos;&quot; + sURL + &quot;&apos;&quot; + CHR(13) + CHR(10) _
&apos;		+ &quot;Generated Hypertext link = &quot; + CHR(13) + CHR(10) _
&apos;		+ &quot;&apos;&quot; + sHLink )
		oCellHLink = oSheet.getCellByPosition(COL_HLINK2, lThisRow)
		oCellHLink.setFormula(sHLink)
		
Nextfor:
		nRowsProcessed = nRowsProcessed + 1

	next i
	
	msgbox(&quot;GenMLinkM  - &quot; + nRowsProcessed + &quot; rows processed&quot;)
	
NormalExit:
	exit sub
	
ErrorHandler:
   msgbox(&quot;GenMLinkM  - unprocessed error.&quot;)
   GoTo NormalExit

end sub		&apos;// end GenMLinkM 	9/8/20
&apos;/**/

&apos;// GenPLinkM.bas
&apos;//---------------------------------------------------------------
&apos;// GenPLinkM - Generate hyperlinks for SCPA territory.
&apos;//		8/17/20.	wmk.	08:15
&apos;//---------------------------------------------------------------

public sub GenPLinkM()

&apos;//	Usage.	macro call or
&apos;//			call GenPLinkM()
&apos;//
&apos;// Entry.	user has selected a range of cells in desired row(s) to
&apos;//			extract the address field from the COL_ADDR column index
&apos;//			and create hyperlinks to look up phone/address information
&apos;//			Also COL_PARCEL contains the SCPA parcel number
&apos;//
&apos;//	Exit.	each row selected has a hperlink added in the COL_HLINK,
&apos;//			COL_HLINK1 and COL_HLINK2 columns in the form:
&apos;//			HYPERLINK(&quot;&lt;url&gt;&quot;) that will allow the end-user to click
&apos;//			on the hyperlink url and be taken to a search webpage
&apos;//
&apos;// Calls.	sGenPhoneURL, sGen411URL, sGenSCPAurl
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	8/17/20.	wmk.	original code; adapted from GenHLinkM
&apos;//
&apos;//	Notes.
&apos;// Wishlist. Pick up COL_ADDR and COL_HLINK from predetermined cells
&apos;// in the oRange.Sheet.
&apos;//	Method. for each row, extract address field from COL_ADDR
&apos;//		use sGenPhoneURL to generate url from address
&apos;//     add HYPERLINK(&quot;&lt;url&gt;&quot;) to create hyperlink
&apos;//		store hyperlink in row at COL_HLINK
&apos;//		use sGen411URL to generate url from address
&apos;//     add HYPERLINK(&quot;&lt;url&gt;&quot;) to create hyperlink
&apos;//		store hyperlink in row at COL_HLINK1
&apos;//		use sGenSCPAurl to generate url from address
&apos;//     add HYPERLINK(&quot;&lt;url&gt;&quot;) to create hyperlink
&apos;//		store hyperlink in row at COL_HLINK2

&apos;//	constants.
&apos;// see Module header...
&apos;const COL_ADDR=1		&apos;// column index for extracting address
&apos;const COL_HLINK=4		&apos;// column for truepeople hyperlink
&apos;const COL_HLINK1=5		&apos;// column for 411 hyperlink
&apos;const COL_HLINK2=6		&apos;// column for SCPA hyperlink
&apos;const COL_CITY=1		&apos;// column index for city
&apos;const ROW_CITY=2		&apos;// row index for city -B3

&apos;// cell formatting constants.
&apos;const LJUST=1		&apos;// left-justify HoriJustify
&apos;const CJUST=2		&apos;// center HoriJustify
&apos;const RJUST=0		&apos;// right-justify HoriJustify
&apos;const YELLOW=16776960		&apos;// decimal value of YELLOW color
&apos;const TXT_HLINK=&quot;HYPERLINK(&quot;&quot;&quot;	&apos;// HYPERLINK prefix

&apos;// new constant.
const COL_PARCEL=8		&apos;// column index for parcel ID

&apos;//	local variables.
Dim oDoc As Object
Dim oSheet As Object
Dim NewColumn As Object
dim oSel as Object
dim iSheetIx as integer
dim oRange as Object
dim lThisRow as long		&apos;// current row selected on sheet

&apos;// processing variables.
dim nRowsProcessed As Integer	&apos;// count of rows processed
dim nRowCount		As Integer	&apos;// # rows to process
dim sAddress As String		&apos;// address field from current row
dim sURL	As String		&apos;// url generated from sAddress
dim sHLink	As String		&apos;// HYPERTEXT link to store
dim i		As Integer		&apos;// loop counter

&apos;// XCell sheet objects
dim oCellAddr as object		&apos;// address field
dim oCellHLink as object	&apos;// hyperlink field
dim oCity 	As object		&apos;// city for sheet
dim sCity	As String		&apos;// city from sheet
dim oCellParcel	As Object		&apos;// parcel ID cell
dim sParcel		As String		&apos;// parcel ID from sheet

	&apos;// code.
	ON ERROR GOTO ErrorHandler
	oDoc = ThisComponent
	oSel = oDoc.getCurrentSelection()
	oRange = oSel.RangeAddress
	iSheetIx = oRange.Sheet
	oSheet = oDoc.Sheets(iSheetIx)
	
	&apos;// extract city applying to sheet
	oCity = oSheet.getCellByPosition(COL_CITY, ROW_CITY)
	sCity = trim(oCity.String)
	if len(sCity) = 0 then
		sCity = &quot;Venice&quot;
	endif
	nRowsProcessed = 0		&apos;// clear processed count

	&apos;// set row processing from oRange information
	lThisRow = oRange.StartRow - 1		&apos;// start at -1 since increment first
	nRowCount = oRange.EndRow - lThisRow	&apos;// set row count to process
	for i = 1 to nRowCount
		lThisRow = lThisRow + 1		&apos;// advance current row
		oCellAddr = oSheet.getCellByPosition(COL_ADDR, lThisRow)
		oCellHLink = oSheet.getCellByPosition(COL_HLINK, lThisRow)
		sAddress = trim(oCellAddr.String)		&apos;// set cell address text
		if len(sAddress) = 0 then
			msgBox(&quot;GenPLinkM - empty address field; halting process.&quot;)
			oCellAddr.CellBackColor = YELLOW
			exit for
		endif	&apos;// null string - alert user, mark row and bail

		&apos;// Generate truepeople.. URL
		sURL = sGenPhoneURL(sAddress, sCity)
		sHLink = &quot;=&quot;+TXT_HLINK + sURL + CHR(34)+&quot;;&quot;+CHR(34) _
	 + &quot;Click here to search&quot; + CHR(34) + &quot;)&quot;
&apos;msgbox(&quot;Double quote = &quot; + ASC(&quot;&quot;&quot;&quot;) )
&apos;msgbox(&quot;Generated URL =&quot; + CHR(13) + CHR(10) _
&apos;		+ &quot;&apos;&quot; + sURL + &quot;&apos;&quot; + CHR(13) + CHR(10) _
&apos;		+ &quot;Generated Hypertext link = &quot; + CHR(13) + CHR(10) _
&apos;		+ &quot;&apos;&quot; + sHLink )
&apos;		oCellHLink.String = sHLink
		oCellHLink.setFormula(sHLink)
		
		&apos;// Generate 411.. URL
		sURL = sGen411URL(sAddress, sCity)
		sHLink = &quot;=&quot;+TXT_HLINK + sURL + CHR(34)+&quot;;&quot;+CHR(34) _
	 + &quot;Click here to search&quot; + CHR(34) + &quot;)&quot;
&apos;msgbox(&quot;Generated URL =&quot; + CHR(13) + CHR(10) _
&apos;		+ &quot;&apos;&quot; + sURL + &quot;&apos;&quot; + CHR(13) + CHR(10) _
&apos;		+ &quot;Generated Hypertext link = &quot; + CHR(13) + CHR(10) _
&apos;		+ &quot;&apos;&quot; + sHLink )
		oCellHLink = oSheet.getCellByPosition(COL_HLINK1, lThisRow)
		oCellHLink.setFormula(sHLink)

		&apos;// Generate sc-pa.. URL
		oCellParcel = oSheet.getCellByPosition(COL_PARCEL, lThisRow)
		sParcel = trim(oCellParcel.String)
		sURL = sGenSCPAurl(sParcel)
		sHLink = &quot;=&quot;+TXT_HLINK + sURL + CHR(34)+&quot;;&quot;+CHR(34) _
	 + &quot;Click here to search&quot; + CHR(34) + &quot;)&quot;
&apos;msgbox(&quot;Generated URL =&quot; + CHR(13) + CHR(10) _
&apos;		+ &quot;&apos;&quot; + sURL + &quot;&apos;&quot; + CHR(13) + CHR(10) _
&apos;		+ &quot;Generated Hypertext link = &quot; + CHR(13) + CHR(10) _
&apos;		+ &quot;&apos;&quot; + sHLink )
		oCellHLink = oSheet.getCellByPosition(COL_HLINK2, lThisRow)
		oCellHLink.setFormula(sHLink)
		
Nextfor:
		nRowsProcessed = nRowsProcessed + 1

	next i
	
	msgbox(&quot;GenPLinkM - &quot; + nRowsProcessed + &quot; rows processed&quot;)
	
NormalExit:
	exit sub
	
ErrorHandler:
   msgbox(&quot;GenPLinkM - unprocessed error.&quot;)
   GoTo NormalExit

end sub		&apos;// end GenPLinkM	8/17/20.
&apos;/**/

&apos;// GenCLinkM.bas
&apos;//---------------------------------------------------------------
&apos;// GenCLinkM - Generate hyperlinks for SCPA businesses.
&apos;//		8/18/20.	wmk.	17:00
&apos;//---------------------------------------------------------------

public sub GenCLinkM()

&apos;//	Usage.	macro call or
&apos;//			call GenCLinkM()
&apos;//
&apos;// Entry.	user has selected a range of cells in desired row(s) to
&apos;//			extract the address field from the COL_ADDR column index
&apos;//			and create hyperlinks to look up phone/address information
&apos;//			Also COL_PARCEL contains the SCPA parcel number
&apos;//
&apos;//	Exit.	each row selected has a hperlink added in the COL_HLINK,
&apos;//			COL_HLINK1, COL_HLINK2 and COL_HLINK3 columns in the form:
&apos;//			HYPERLINK(&quot;&lt;url&gt;&quot;) that will allow the end-user to click
&apos;//			on the hyperlink url and be taken to a search webpage
&apos;//
&apos;// Calls.	sGen411URL, sGenWhtPgesURL, sGenSCPAurl
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	8/18/20.	wmk.	original code; adapted from GenHPinkM
&apos;//
&apos;//	Notes. To facilitate personal contact with business owners
&apos;// the business territories allow space for 3 names; the business
&apos;// name, and up to 2 owners. This requires overriding the
&apos;// public constants set in the header for COL_HLINK, COL_HLINK1,
&apos;// and COL_HLINK2, and adding 2 new constants. COL_PARCEL and
&apos;// COL_HLINK3.
&apos;// Wishlist. Pick up COL_ADDR and COL_HLINK from predetermined cells
&apos;// in the oRange.Sheet.
&apos;//	Method. for each row, extract address field from COL_ADDR
&apos;//		use sGenPhoneURL to generate url from address
&apos;//     add HYPERLINK(&quot;&lt;url&gt;&quot;) to create hyperlink
&apos;//		store hyperlink in row at COL_HLINK
&apos;//		use sGen411URL to generate url from address
&apos;//     add HYPERLINK(&quot;&lt;url&gt;&quot;) to create hyperlink
&apos;//		store hyperlink in row at COL_HLINK1
&apos;//		use sGenSCPAurl to generate url from address
&apos;//     add HYPERLINK(&quot;&lt;url&gt;&quot;) to create hyperlink
&apos;//		store hyperlink in row at COL_HLINK2
&apos;//		set hyperlink for sunbiz.org search
&apos;//		store hyperlink in row at COL_HLINK3

&apos;//	constants.
&apos;// see Module header...
&apos;const COL_ADDR=1		&apos;// column index for extracting address
const COL_HLINK=6		&apos;// column for 411 hyperlink
const COL_HLINK1=7		&apos;// column for whitepages hyperlink
const COL_HLINK2=8		&apos;// column for sc-pa hyperlink
const COL_PARCEL=9		&apos;// column index for parcel ID
const COL_HLINK3=10		&apos;// column for sunbiz hyperlink
&apos;const COL_CITY=1		&apos;// column index for city
&apos;const ROW_CITY=2		&apos;// row index for city -B3

&apos;// cell formatting constants.
&apos;const LJUST=1		&apos;// left-justify HoriJustify
&apos;const CJUST=2		&apos;// center HoriJustify
&apos;const RJUST=0		&apos;// right-justify HoriJustify
&apos;const YELLOW=16776960		&apos;// decimal value of YELLOW color
&apos;const TXT_HLINK=&quot;HYPERLINK(&quot;&quot;&quot;	&apos;// HYPERLINK prefix


&apos;//	local variables.
Dim oDoc As Object
Dim oSheet As Object
Dim NewColumn As Object
dim oSel as Object
dim iSheetIx as integer
dim oRange as Object
dim lThisRow as long		&apos;// current row selected on sheet

&apos;// processing variables.
dim nRowsProcessed As Integer	&apos;// count of rows processed
dim nRowCount		As Integer	&apos;// # rows to process
dim sAddress As String		&apos;// address field from current row
dim sURL	As String		&apos;// url generated from sAddress
dim sHLink	As String		&apos;// HYPERTEXT link to store
dim i		As Integer		&apos;// loop counter

&apos;// XCell sheet objects
dim oCellAddr as object		&apos;// address field
dim oCellHLink as object	&apos;// hyperlink field
dim oCity 	As object		&apos;// city for sheet
dim sCity	As String		&apos;// city from sheet
dim oCellParcel	As Object		&apos;// parcel ID cell
dim sParcel		As String		&apos;// parcel ID from sheet

	&apos;// code.
	ON ERROR GOTO ErrorHandler
	oDoc = ThisComponent
	oSel = oDoc.getCurrentSelection()
	oRange = oSel.RangeAddress
	iSheetIx = oRange.Sheet
	oSheet = oDoc.Sheets(iSheetIx)
	
	&apos;// extract city applying to sheet
	oCity = oSheet.getCellByPosition(COL_CITY, ROW_CITY)
	sCity = trim(oCity.String)
	if len(sCity) = 0 then
		sCity = &quot;Venice&quot;
	endif
	nRowsProcessed = 0		&apos;// clear processed count

	&apos;// set row processing from oRange information
	lThisRow = oRange.StartRow - 1		&apos;// start at -1 since increment first
	nRowCount = oRange.EndRow - lThisRow	&apos;// set row count to process
	for i = 1 to nRowCount
		lThisRow = lThisRow + 1		&apos;// advance current row
		oCellAddr = oSheet.getCellByPosition(COL_ADDR, lThisRow)
		oCellHLink = oSheet.getCellByPosition(COL_HLINK, lThisRow)
		sAddress = trim(oCellAddr.String)		&apos;// set cell address text
		if len(sAddress) = 0 then
			msgBox(&quot;GenCLinkM - empty address field; halting process.&quot;)
			oCellAddr.CellBackColor = YELLOW
			exit for
		endif	&apos;// null string - alert user, mark row and bail

if true then
   GoTo Gen411
endif
&apos;//------------------------------------------------------------------
		&apos;// Generate truepeople.. URL
		sURL = sGenPhoneURL(sAddress, sCity)
		sHLink = &quot;=&quot;+TXT_HLINK + sURL + CHR(34)+&quot;;&quot;+CHR(34) _
	 + &quot;Click here to search&quot; + CHR(34) + &quot;)&quot;
&apos;msgbox(&quot;Double quote = &quot; + ASC(&quot;&quot;&quot;&quot;) )
&apos;msgbox(&quot;Generated URL =&quot; + CHR(13) + CHR(10) _
&apos;		+ &quot;&apos;&quot; + sURL + &quot;&apos;&quot; + CHR(13) + CHR(10) _
&apos;		+ &quot;Generated Hypertext link = &quot; + CHR(13) + CHR(10) _
&apos;		+ &quot;&apos;&quot; + sHLink )
&apos;		oCellHLink.String = sHLink
		oCellHLink.setFormula(sHLink)
&apos;//-----------------------------------------------------------------

Gen411:		
		&apos;// Generate 411.. URL
		sURL = sGen411URL(sAddress, sCity)
		sHLink = &quot;=&quot;+TXT_HLINK + sURL + CHR(34)+&quot;;&quot;+CHR(34) _
	 + &quot;Click here to search&quot; + CHR(34) + &quot;)&quot;
&apos;msgbox(&quot;Generated URL =&quot; + CHR(13) + CHR(10) _
&apos;		+ &quot;&apos;&quot; + sURL + &quot;&apos;&quot; + CHR(13) + CHR(10) _
&apos;		+ &quot;Generated Hypertext link = &quot; + CHR(13) + CHR(10) _
&apos;		+ &quot;&apos;&quot; + sHLink )
		oCellHLink = oSheet.getCellByPosition(COL_HLINK, lThisRow)
		oCellHLink.setFormula(sHLink)

		&apos;// Generate whitepages.. URL
		sURL = sGenWhtPgesURL(sAddress, sCity)
		sHLink = &quot;=&quot;+TXT_HLINK + sURL + CHR(34)+&quot;;&quot;+CHR(34) _
	 + &quot;Click here to search&quot; + CHR(34) + &quot;)&quot;
&apos;msgbox(&quot;Generated URL =&quot; + CHR(13) + CHR(10) _
&apos;		+ &quot;&apos;&quot; + sURL + &quot;&apos;&quot; + CHR(13) + CHR(10) _
&apos;		+ &quot;Generated Hypertext link = &quot; + CHR(13) + CHR(10) _
&apos;		+ &quot;&apos;&quot; + sHLink )
		oCellHLink = oSheet.getCellByPosition(COL_HLINK1, lThisRow)
		oCellHLink.setFormula(sHLink)
		
		&apos;// Generate sc-pa.. URL
		oCellParcel = oSheet.getCellByPosition(COL_PARCEL, lThisRow)
		sParcel = trim(oCellParcel.String)
		sURL = sGenSCPAurl(sParcel)
		sHLink = &quot;=&quot;+TXT_HLINK + sURL + CHR(34)+&quot;;&quot;+CHR(34) _
	 + &quot;Click here to search&quot; + CHR(34) + &quot;)&quot;
&apos;msgbox(&quot;Generated URL =&quot; + CHR(13) + CHR(10) _
&apos;		+ &quot;&apos;&quot; + sURL + &quot;&apos;&quot; + CHR(13) + CHR(10) _
&apos;		+ &quot;Generated Hypertext link = &quot; + CHR(13) + CHR(10) _
&apos;		+ &quot;&apos;&quot; + sHLink )
		oCellHLink = oSheet.getCellByPosition(COL_HLINK2, lThisRow)
		oCellHLink.setFormula(sHLink)

		&apos;// set sunbiz.. URL
		sURL= &quot;https://dos.myflorida.com/sunbiz/search&quot;
		sHLink = &quot;=&quot;+TXT_HLINK + sURL + CHR(34)+&quot;;&quot;+CHR(34) _
	 + &quot;Click here to search&quot; + CHR(34) + &quot;)&quot;
		oCellHLink = oSheet.getCellByPosition(COL_HLINK3, lThisRow)
		oCellHLink.setFormula(sHLink)
Nextfor:
		nRowsProcessed = nRowsProcessed + 1

	next i
	
	msgbox(&quot;GenCLinkM - &quot; + nRowsProcessed + &quot; rows processed&quot;)
	
NormalExit:
	exit sub
	
ErrorHandler:
   msgbox(&quot;GenCLinkM - unprocessed error.&quot;)
   GoTo NormalExit

end sub		&apos;// end GenCLinkM	8/18/20.
&apos;/**/


&apos;// fsGetPubSheetName.bas
&apos;//---------------------------------------------------------------
&apos;// fsGetPubSheetName - Set PubTerr sheet name in module var.
&apos;//		3/16/21.	wmk. 11:44
&apos;//---------------------------------------------------------------

public function fsGetPubSheetName() as String

&apos;//	Usage.	sTarget = fsGetPubSheetName()
&apos;//			
&apos;//		sTarget = reserved string var for return of name
&apos;//
&apos;// Entry.	gsPubTerrSheet module var declared
&apos;//
&apos;//	Exit.	sTarget = gsPubTerrSheet
&apos;//				if gsPubTerrSheet is empty on entry, it will be
&apos;//				set to &quot;Terrxxx_PubTerr&quot; where xxx is taken from
&apos;//				the end of the sheet title in A1
&apos;// Calls.
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	3/16/21.		wmk.	original code
&apos;//
&apos;//	Notes. The gsPubTerrSheet module var holds the name of the PubTerr
&apos;// sheet in the territory workbook. A territory workbook has the
&apos;// standardized name %Terrxxx% where xxx is the territory id
&apos;// (e.g. QTerr125 for territory 125).
&apos;//

&apos;//	constants.

&apos;//	local variables.
dim sRetValue As String

	&apos;// code.
	ON ERROR GOTO ErrorHandler
	sRetValue = gsPubTerrSheet
	
	&apos;// check, if gsPubTerrSheet not set, set it from
	&apos;// territory id.
	if len(sRetValue) = 0 then
		sRetValue = fsGetTerrID()
		if len(sRetValue) = 0 then
			GoTo ErrorHandler
		endif
		gsPubTerrSheet = &quot;Terr&quot; + sRetValue + &quot;_PubTerr&quot;
		sRetValue = gsPubTerrSheet
	endif
	
NormalExit:
	fsGetPubSheetName = sRetValue
	exit function
	
ErrorHandler:
	sRetValue = &quot;&quot;
	msgbox(&quot;fsGetPubSheetName - unprocessed error&quot;)
	GoTo NormalExit

end function 	&apos;// end fsGetPubSheetName	3/16/21.	11:44
&apos;/**/


&apos;// GreenRow.bas - Set green background color on specified row.
&apos;//---------------------------------------------------------------
&apos;// GreenRow - Set green background color on specified row.
&apos;//		3/21/21.	wmk.	23:28
&apos;//---------------------------------------------------------------

public sub GreenRow( plRow AS Long )

&apos;//	Usage.	macro call or
&apos;//			call GreenRow( lRow )
&apos;//
&apos;//		lRow = row to set green background on
&apos;//
&apos;// Entry.	user in sheet where row is resident
&apos;//
&apos;//	Exit.	columns A - I will be set with a green background in the row
&apos;//
&apos;// Calls.
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	2/15/21.	wmk.	original code; cloned from macro recording
&apos;// 3/21/21.	wmk.	color change to lighter green
&apos;//
&apos;//	Notes. This sub is useful when wanting to distinguish boundary
&apos;// rows within a spreadsheet. e.g. when groups of rows have similar
&apos;// information, this enables the user to visually group the rows.


&apos;//	constants.
const LT_LIME=12313405		&apos;// xbbe33d

&apos;//	local variables.
dim lThisRow 	As Long
dim dispatcher	As Object		&apos;// uno dispatcher object
dim document	As Object		&apos;// uno frame reference
dim sRangeSel	As String		&apos;// string for selected range
dim sThisRow	As String		&apos;// local copy of row parameter
dim args1(0) as new com.sun.star.beans.PropertyValue	&apos;// Dispatch property arrays
dim args9(3) as new com.sun.star.beans.PropertyValue

	&apos;// code.
	ON ERROR GOTO ErrorHandler
	lThisRow = plRow
	sThisRow = trim(str(lThisRow+1))
	
	&apos;// set up uno objects.
	document   = ThisComponent.CurrentController.Frame
	dispatcher = createUnoService(&quot;com.sun.star.frame.DispatchHelper&quot;)

	&apos;// select range Ax:Ix.
&apos;	dim args1(0) as new com.sun.star.beans.PropertyValue
	sThisRow = trim(str(lThisRow+1))
	args1(0).Name = &quot;ToPoint&quot;
	sRangeSel = &quot;$A$&quot; + sThisRow + &quot;:$I$&quot; + sThisRow
	args1(0).Value = sRangeSel

	dispatcher.executeDispatch(document, &quot;.uno:GoToCell&quot;, &quot;&quot;, 0, args1())

	&apos;// now set background cell color green across selection.
	&apos;dim args9(3) as new com.sun.star.beans.PropertyValue
	args9(0).Name = &quot;BackgroundPattern.Transparent&quot;
	args9(0).Value = false
	args9(1).Name = &quot;BackgroundPattern.BackColor&quot;
	args9(1).Value = LT_LIME
	args9(2).Name = &quot;BackgroundPattern.Filtername&quot;
	args9(2).Value = &quot;&quot;
	args9(3).Name = &quot;BackgroundPattern.Position&quot;
	args9(3).Value = com.sun.star.style.GraphicLocation.NONE

	dispatcher.executeDispatch(document, &quot;.uno:BackgroundPattern&quot;, &quot;&quot;,_
								0, args9())
	
NormalExit:
	exit sub
	
ErrorHandler:
	msgbox(&quot;GreenRow - unprocessed error&quot;)
	GoTo NormalExit
	
end sub		&apos;// end GreenRow	3/21/21.	23:28
&apos;/**/

&apos;// GreenTab.bas
&apos;//---------------------------------------------------------------
&apos;// GreenTab - Change current worksheet tab color to DkLime.
&apos;//		3/21/21.	wmk.
&apos;//---------------------------------------------------------------

public sub GreenTab()

&apos;//	Usage.	macro call or
&apos;//			call GreenTab()
&apos;//
&apos;// Entry.	user has worksheet selected
&apos;//
&apos;//	Exit.	worksheet tab color changed to YELLOW
&apos;//
&apos;// Calls.
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	7/2/20.		wmk.	original code; cloned from macro recording
&apos;//
&apos;//	Notes.
&apos;//

&apos;//	constants.
const YELLOW=16776960			&apos;// YELLOW color value

&apos;//	local variables.
rem ----------------------------------------------------------------------
rem define variables
dim document   as object
dim dispatcher as object

	&apos;// code.
	ON ERROR GOTO ErrorHandler
rem ----------------------------------------------------------------------
rem get access to the document
document   = ThisComponent.CurrentController.Frame
dispatcher = createUnoService(&quot;com.sun.star.frame.DispatchHelper&quot;)

rem ----------------------------------------------------------------------
dim args1(0) as new com.sun.star.beans.PropertyValue
args1(0).Name = &quot;TabBgColor&quot;
args1(0).Value = YELLOW

dispatcher.executeDispatch(document, &quot;.uno:SetTabBgColor&quot;, &quot;&quot;, 0, args1())
	
NormalExit:
	exit sub
	
ErrorHandler:
	msgbox(&quot;YellowTab - unprocessed error&quot;)
	GoTo NormalExit
	
end sub		&apos;// end GreenTab	10/12/20
&apos;/**/


&apos;// HltAddrBlocks.bas - Highlight address blocks.
&apos;//---------------------------------------------------------------
&apos;// HltAddrBlocks - Highlight address blocks.
&apos;//		2/19/21.	wmk.	19:27
&apos;//---------------------------------------------------------------

public sub HltAddrBlocks()

&apos;//	Usage.	macro call or
&apos;//			call HltAddrBlocks()
&apos;//
&apos;// Entry.	user has sheet with rows selected to check for address blocks
&apos;//
&apos;//	Exit.	rows scanned and compared; if two or more adjacent rows have
&apos;//			the same unitaddress and unit, the first row will be
&apos;//			highlighted green
&apos;//
&apos;// Calls.	GreenRow
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	2/14/21.	wmk.	original code
&apos;// 2/15/21.	wmk.	bug fixes.
&apos;//	2/16/21.	wmk.	mod to use cell B2 Row Count: xxx for row count
&apos;// 2/17/21.	wmk.	bug fix where oRange.LastRow used to determine
&apos;//						row limit after have modified to not use selected
&apos;//						area, but use count from B2.
&apos;//	2/19/21.	wmk.	mod to use count from A2; Address and unit
&apos;//						now in Col A,B
&apos;//
&apos;//	Notes. This sub highlights the first row of any block of addresses
&apos;// that are the same. This makes it easier to see identical addresses
&apos;// as a group.
&apos;//

&apos;//	constants.
const COL_A=0
const COL_B=1
const COL_C=2
const ROW_2=1
const LTGREEN=13953643
const LTBLUE3=11847644     &apos;// 0xb4c7dc
const ROW_HEADING=4

&apos;//	local variables.
dim i				As Integer		&apos;// loop counter
dim bHltgBlocks		AS Boolean		&apos;// highlighting blocks in process flag
dim bEmptyIssued	AS Boolean		&apos;// empty row message issued
dim iStatus			AS integer		&apos;// status var
Dim oDoc As Object
Dim oSheet As Object
Dim NewColumn As Object
dim oSel as Object
dim iSheetIx as integer
dim oRange as Object

dim lThisRow as long			&apos;// current row selected on sheet
dim lLastRow	As Long			&apos;// last row to process
dim nRowCount	As Integer		&apos;// row count to process
dim nRowsProcessed	As Integer	&apos;// processed row count
dim nErrCode	As integer	&apos;// error code
dim	oCell			As Object	&apos;// working cell
dim oCellAddr		As Object	&apos;// addr current row
dim oCellNextAddr	AS Object	&apos;// addr next row
dim oCellUnit		AS Object	&apos;// unit current row
dim oCellNextUnit	AS Object	&apos;// unit next row
dim sAddress		AS String	&apos;// current row address
dim sNextAddr		As String	&apos;// next row address
dim sUnit			As String	&apos;// current row unit
dim sNextUnit		As String	&apos;// next row unit
dim sRange			As String	&apos;// highlight selection range

dim document   as object		&apos;// uno frame reference object
dim dispatcher as object		&apos;// uno dispatcher services object
dim args1(0) as new com.sun.star.beans.PropertyValue	&apos;// uno properties
dim args9(3) as new com.sun.star.beans.PropertyValue

	&apos;// code.
	ON ERROR GOTO ErrorHandler
	bHltgBlocks = false
	bEmptyIssued = false
&apos;	nErrCode = ERR_UNK
	iStatus = 0
	oDoc = ThisComponent
	oSel = oDoc.getCurrentSelection()
	oRange = oSel.RangeAddress
	iSheetIx = oRange.Sheet
	oSheet = oDoc.Sheets(iSheetIx)

	
	&apos;// initialie uno API hooks.
	document   = ThisComponent.CurrentController.Frame
	dispatcher = createUnoService(&quot;com.sun.star.frame.DispatchHelper&quot;)

&apos;msgbox(&quot;In local HltAddrBlks...&quot;)
	&apos;// set row processing from oRange information
	lThisRow = oRange.StartRow - 1		&apos;// start at -1 since increment first
	lThisRow = ROW_HEADING
	&apos;// get row count from A2.
	oCell = oSheet.getCellByPosition(COL_A,ROW_2)		&apos;// Record Count: xxx
	dim sCountStr 		As String
	dim nColonPos		As Integer
	dim sNumCount		As String
	sCountStr = oCell.String
	nColonPos = Instr(sCountStr, &quot;:&quot;)
	sNumCount = Right(sCountStr, len(sCountStr)-nColonPos)
	nRowCount = CInt(sNumCount)
	lLastRow = lThisRow + nRowCount
	nRowsProcessed = 0
&apos;	nRowCount = oCell.getValue()

	bHltgBlocks = false
	for i = 1 to nRowCount
		lThisRow = lThisRow + 1		&apos;// advance current row
		oCellAddr = oSheet.getCellByPosition(COL_A, lThisRow)
		oCellUnit = oSheet.getCellByPosition(COL_B, lThisRow)
		sAddress = ucase(trim(oCellAddr.String))		&apos;// set cell address text
		if len(trim(oCellUnit.String)) = 0 then
			sUnit = &quot;&quot;
		else
			sUnit = trim(oCellUnit.String)						&apos;// set unit address text
		endif
		
		if len(sAddress) = 0 then
			if not bEmptyIssued then
				msgBox(&quot;HLtAddrBlocks - empty address field; skipping row...&quot;)
				bEmptyIssued = true
			GoTo NextRow
			endif
		endif	&apos;// null string - skip/alert user

		&apos;// check next row.
		if lThisRow &lt; lLastRow then
		
			&apos;// see if Address and unit of next row match this row.
			oCellNextAddr = oSheet.getCellByPosition(COL_A, lThisRow+1)
			oCellNextUnit = oSheet.getCellByPosition(COL_B, lThisRow+1)
			sNextAddr = UCase(trim(oCellNextAddr.String))
			sNextUnit = trim(oCellNextUnit.String)
			
			&apos;// check for address and unit match across rows.
			if (strcomp(sAddress, sNextAddr) = 0)_ 
			  AND (strcomp(sUnit, sNextUnit) = 0) then
				if bHltgBlocks then
					oCell = oSheet.getCellByPosition(COL_A, lThisRow)
					oCell.CellBackColor = LTBLUE3
				   
				   GoTo NextRow
				else	&apos;// 2 rows the same, turn highlighting on
					bHltgBlocks = true		&apos;// turn on in block flag
					&apos;// highlight this row.
					GreenRow(lThisRow)
				endif	&apos;// end highlighting blocks conditional
				GoTo NextRow
			else 	&apos;// lines different
				if bHltgBlocks then
					bHltgBlocks = false
					oCell = oSheet.getCellByPosition(COL_A, lThisRow)
&apos;					oCell.CellBackColor = LTGREEN
					oCell.CellBackColor = LTBLUE3
				endif
			endif	&apos;// end 2 lines same address conditional
			
		endif	&apos;// end next row exists conditional
		
NextRow:
		nRowsProcessed = nRowsProcessed + 1

	next i

	msgbox(&quot;HltAddrBlocks - &quot; + nRowsProcessed + &quot; rows processed.&quot;)
	exit sub


NormalExit:
	exit sub					
	
ErrorHandler:
	msgbox(&quot;HltAddrBlocks - unprocessed error&quot;)
	GoTo NormalExit
	
end sub		&apos;// end HltAddrBlocks	2/19/21.	19:27
&apos;/**/


&apos;// HltAddrBlocks0.bas - Highlight address blocks.
&apos;//---------------------------------------------------------------
&apos;// HltAddrBlocks0 - Highlight address blocks.
&apos;//		2/15/21.	wmk.	07:10
&apos;//---------------------------------------------------------------

public sub HltAddrBlocks0()

&apos;//	Usage.	macro call or
&apos;//			call HltAddrBlocks()
&apos;//
&apos;// Entry.	user has sheet with rows selected to check for address blocks
&apos;//
&apos;//	Exit.	rows scanned and compared; if two or more adjacent rows have
&apos;//			the same unitaddress and unit, the first row will be
&apos;//			highlighted green
&apos;//
&apos;// Calls.	GreenRow
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	2/14/21.	wmk.	original code
&apos;// 2/15/21.	wmk.	bug fixes.
&apos;//
&apos;//	Notes. This sub highlights the first row of any block of addresses
&apos;// that are the same. This makes it easier to see identical addresses
&apos;// as a group.
&apos;//

&apos;//	constants.
const COL_B=1
const COL_C=2
const LTGREEN=13953643
const LTBLUE3=11847644     &apos;// 0xb4c7dc

&apos;//	local variables.
dim bHltgBlocks		AS Boolean		&apos;// highlighting blocks in process flag
dim bEmptyIssued	AS Boolean		&apos;// empty row message issued
dim iStatus			AS integer		&apos;// status var
Dim oDoc As Object
Dim oSheet As Object
Dim NewColumn As Object
dim oSel as Object
dim iSheetIx as integer
dim oRange as Object

dim lThisRow as long		&apos;// current row selected on sheet
dim nErrCode	As integer	&apos;// error code
dim	oCell			As Object	&apos;// working cell
dim oCellAddr		As Object	&apos;// addr current row
dim oCellNextAddr	AS Object	&apos;// addr next row
dim oCellUnit		AS Object	&apos;// unit current row
dim oCellNextUnit	AS Object	&apos;// unit next row
dim sAddress		AS String	&apos;// current row address
dim sNextAddr		As String	&apos;// next row address
dim sUnit			As String	&apos;// current row unit
dim sNextUnit		As String	&apos;// next row unit
dim sRange			As String	&apos;// highlight selection range

dim document   as object		&apos;// uno frame reference object
dim dispatcher as object		&apos;// uno dispatcher services object
dim args1(0) as new com.sun.star.beans.PropertyValue	&apos;// uno properties
dim args9(3) as new com.sun.star.beans.PropertyValue

	&apos;// code.
	ON ERROR GOTO ErrorHandler
	bHltgBlocks = false
	bEmptyIssued = false
	
&apos;	nErrCode = ERR_UNK
	iStatus = 0
	oDoc = ThisComponent
	oSel = oDoc.getCurrentSelection()
	oRange = oSel.RangeAddress
	iSheetIx = oRange.Sheet
	oSheet = oDoc.Sheets(iSheetIx)

	
	&apos;// initialie uno API hooks.
	document   = ThisComponent.CurrentController.Frame
	dispatcher = createUnoService(&quot;com.sun.star.frame.DispatchHelper&quot;)

	&apos;// set row processing from oRange information
	lThisRow = oRange.StartRow - 1		&apos;// start at -1 since increment first
	nRowCount = oRange.EndRow - lThisRow	&apos;// set row count to process

	for i = 1 to nRowCount
		lThisRow = lThisRow + 1		&apos;// advance current row
		oCellAddr = oSheet.getCellByPosition(COL_B, lThisRow)
		oCellUnit = oSheet.getCellByPosition(COL_C, lThisRow)
		sAddress = ucase(trim(oCellAddr.String))		&apos;// set cell address text
		sUnit = trim(oCellUnit.String)						&apos;// set unit address text
		if len(sAddress) = 0 then
			if not bEmptyIssued then
				msgBox(&quot;HLtAddrBlocks - empty address field; skipping row...&quot;)
				bEmptyIssued = true
			GoTo NextRow
			endif
		endif	&apos;// null string - skip/alert user

		&apos;// check next row.
		if lThisRow &lt; oRange.EndRow then
		
			&apos;// see if Address and unit of next row match this row.
			oCellNextAddr = oSheet.getCellByPosition(COL_B, lThisRow+1)
			oCellNextUnit = oSheet.getCellByPosition(COL_C, lThisRow+1)
			sNextAddr = UCase(trim(oCellNextAddr.String))
			sNextUnit = trim(oCellNextUnit.String)
			
			&apos;// check for address and unit match across rows.
			if (strcomp(sAddress, sNextAddr) = 0)_ 
			  AND (strcomp(sUnit, sNextUnit) = 0) then
				if bHltgBlocks then
					oCell = oSheet.getCellByPosition(COL_A, lThisRow)
					oCell.CellBackColor = LTBLUE3
				   
				   GoTo NextRow
				else	&apos;// 2 rows the same, turn highlighting on
					bHltgBlocks = true		&apos;// turn on in block flag
					&apos;// highlight this row.
					GreenRow(lThisRow)
				endif	&apos;// end highlighting blocks conditional
				GoTo NextRow
			else 	&apos;// lines different
				if bHltgBlocks then
					bHltgBlocks = false
					oCell = oSheet.getCellByPosition(COL_A, lThisRow)
&apos;					oCell.CellBackColor = LTGREEN
					oCell.CellBackColor = LTBLUE3
				endif
			endif	&apos;// end 2 lines same address conditional
			
		endif	&apos;// end next row exists conditional
		
NextRow:
		nRowsProcessed = nRowsProcessed + 1

	next i

	msgbox(&quot;HltAddrBlocks - &quot; + nRowsProcessed + &quot; rows processed.&quot;)
	exit sub


NormalExit:
	exit sub					
	
ErrorHandler:
	msgbox(&quot;HltAddrBlocks - unprocessed error&quot;)
	GoTo NormalExit
	
end sub		&apos;// end HltAddrBlocks	2/15/21	07:10
&apos;/**/


&apos;// HltAddrBlocks3.bas - Highlight address blocks.
&apos;//---------------------------------------------------------------
&apos;// HltAddrBlocks3 - Highlight address blocks.
&apos;//		7/12/21.	wmk.	19:33
&apos;//---------------------------------------------------------------

public sub HltAddrBlocks3()

&apos;//	Usage.	macro call or
&apos;//			call HltAddrBlocks3()
&apos;//
&apos;// Entry.	user has sheet with rows selected to check for address blocks
&apos;//
&apos;//	Exit.	rows scanned and compared; if two or more adjacent rows have
&apos;//			the same unitaddress and unit, the first row will be
&apos;//			highlighted green; subsequent matching row(s) will have Unit
&apos;//			field highlighted lt blue
&apos;//
&apos;// Calls.	GreenRow
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	2/14/21.	wmk.	original code
&apos;// 2/15/21.	wmk.	bug fixes.
&apos;//	2/16/21.	wmk.	mod to use cell B2 Row Count: xxx for row count
&apos;// 2/17/21.	wmk.	bug fix where oRange.LastRow used to determine
&apos;//						row limit after have modified to not use selected
&apos;//						area, but use count from B2.
&apos;//	2/19/21.	wmk.	mod to use count from A2; Address and unit
&apos;//						now in Col A,B
&apos;// 2/20/21.	wmk.	highlight Unit field in subsequent matching rows;
&apos;//						bug fix where last row not highlighted if in 
&apos;//						block
&apos;//	7/12/21.	wmk.	msgbox eliminated to facilitate batch processing.
&apos;//
&apos;//	Notes. This sub highlights the first row of any block of addresses
&apos;// that are the same. This makes it easier to see identical addresses
&apos;// as a group.
&apos;//

&apos;//	constants.
const COL_A=0
const COL_B=1
const COL_C=2
const ROW_2=1
const LTGREEN=13953643
const LTBLUE3=11847644     &apos;// 0xb4c7dc
const ROW_HEADING=4

&apos;//	local variables.
dim i				As Integer		&apos;// loop counter
dim bHltgBlocks3		AS Boolean		&apos;// highlighting blocks in process flag
dim bEmptyIssued	AS Boolean		&apos;// empty row message issued
dim iStatus			AS integer		&apos;// status var
Dim oDoc As Object
Dim oSheet As Object
Dim NewColumn As Object
dim oSel as Object
dim iSheetIx as integer
dim oRange as Object

dim lThisRow as long			&apos;// current row selected on sheet
dim lLastRow	As Long			&apos;// last row to process
dim nRowCount	As Integer		&apos;// row count to process
dim nRowsProcessed	As Integer	&apos;// processed row count
dim nErrCode	As integer	&apos;// error code
dim	oCell			As Object	&apos;// working cell
dim oCellAddr		As Object	&apos;// addr current row
dim oCellNextAddr	AS Object	&apos;// addr next row
dim oCellUnit		AS Object	&apos;// unit current row
dim oCellNextUnit	AS Object	&apos;// unit next row
dim sAddress		AS String	&apos;// current row address
dim sNextAddr		As String	&apos;// next row address
dim sUnit			As String	&apos;// current row unit
dim sNextUnit		As String	&apos;// next row unit
dim sRange			As String	&apos;// highlight selection range

dim document   as object		&apos;// uno frame reference object
dim dispatcher as object		&apos;// uno dispatcher services object
dim args1(0) as new com.sun.star.beans.PropertyValue	&apos;// uno properties
dim args9(3) as new com.sun.star.beans.PropertyValue

	&apos;// code.
	ON ERROR GOTO ErrorHandler
	bHltgBlocks3 = false
	bEmptyIssued = false
&apos;	nErrCode = ERR_UNK
	iStatus = 0
	oDoc = ThisComponent
	oSel = oDoc.getCurrentSelection()
	oRange = oSel.RangeAddress
	iSheetIx = oRange.Sheet
	oSheet = oDoc.Sheets(iSheetIx)

	
	&apos;// initialie uno API hooks.
	document   = ThisComponent.CurrentController.Frame
	dispatcher = createUnoService(&quot;com.sun.star.frame.DispatchHelper&quot;)

&apos;msgbox(&quot;In local HltAddrBlks...&quot;)
	&apos;// set row processing from oRange information
	lThisRow = oRange.StartRow - 1		&apos;// start at -1 since increment first
	lThisRow = ROW_HEADING
	&apos;// get row count from A2.
	oCell = oSheet.getCellByPosition(COL_A,ROW_2)		&apos;// Record Count: xxx
	dim sCountStr 		As String
	dim nColonPos		As Integer
	dim sNumCount		As String
	sCountStr = oCell.String
	nColonPos = Instr(sCountStr, &quot;:&quot;)
	sNumCount = Right(sCountStr, len(sCountStr)-nColonPos)
	nRowCount = CInt(sNumCount)
	lLastRow = lThisRow + nRowCount
	nRowsProcessed = 0
&apos;	nRowCount = oCell.getValue()

	bHltgBlocks3 = false
	for i = 1 to nRowCount
		lThisRow = lThisRow + 1		&apos;// advance current row
		oCellAddr = oSheet.getCellByPosition(COL_A, lThisRow)
		oCellUnit = oSheet.getCellByPosition(COL_B, lThisRow)
		sAddress = ucase(trim(oCellAddr.String))		&apos;// set cell address text
		if len(trim(oCellUnit.String)) = 0 then
			sUnit = &quot;&quot;
		else
			sUnit = trim(oCellUnit.String)						&apos;// set unit address text
		endif
		
		if len(sAddress) = 0 then
			if not bEmptyIssued then
				msgBox(&quot;HLtAddrBlocks3 - empty address field; skipping row...&quot;)
				bEmptyIssued = true
			GoTo NextRow
			endif
		endif	&apos;// null string - skip/alert user

		&apos;// check next row.
		if lThisRow &lt; lLastRow then
		
			&apos;// see if Address and unit of next row match this row.
			oCellNextAddr = oSheet.getCellByPosition(COL_A, lThisRow+1)
			oCellNextUnit = oSheet.getCellByPosition(COL_B, lThisRow+1)
			sNextAddr = UCase(trim(oCellNextAddr.String))
			sNextUnit = trim(oCellNextUnit.String)
			
			&apos;// check for address and unit match across rows.
			if (strcomp(sAddress, sNextAddr) = 0)_ 
			  AND (strcomp(sUnit, sNextUnit) = 0) then
				if bHltgBlocks3 then
					oCell = oSheet.getCellByPosition(COL_B, lThisRow)
					oCell.CellBackColor = LTBLUE3
				   
				   GoTo NextRow
				else	&apos;// 2 rows the same, turn highlighting on
					bHltgBlocks3 = true		&apos;// turn on in block flag
					&apos;// highlight this row.
					GreenRow(lThisRow)
				endif	&apos;// end highlighting blocks conditional
				GoTo NextRow
			else 	&apos;// lines different
				if bHltgBlocks3 then
					bHltgBlocks3 = false
					oCell = oSheet.getCellByPosition(COL_B, lThisRow)
&apos;					oCell.CellBackColor = LTGREEN
					oCell.CellBackColor = LTBLUE3
				endif
			endif	&apos;// end 2 lines same address conditional
			
		else	&apos;// at last row
			if bHltgBlocks3 then
				bHltgBlocks3 = false
				oCell = oSheet.getCellByPosition(COL_B, lThisRow)
				oCell.CellBackColor = LTBLUE3
			endif
		endif	&apos;// end next row exists conditional
		
NextRow:
		nRowsProcessed = nRowsProcessed + 1

	next i

&apos;	msgbox(&quot;HltAddrBlocks3 - &quot; + nRowsProcessed + &quot; rows processed.&quot;)
	exit sub


NormalExit:
	exit sub					
	
ErrorHandler:
	msgbox(&quot;HltAddrBlocks3 - unprocessed error&quot;)
	GoTo NormalExit
	
end sub		&apos;// end HltAddrBlocks3	7/12/21.	19:33
&apos;/**/

&apos;// HltAddrBlocks4.bas - Highlight address blocks for Search sheet.
&apos;//---------------------------------------------------------------
&apos;// HltAddrBlocks4 - Highlight address blocks for Search sheet.
&apos;//		7/13/21.	wmk.	10:43
&apos;//---------------------------------------------------------------

public sub HltAddrBlocks4()

&apos;//	Usage.	macro call or
&apos;//			call HltAddrBlocks4()
&apos;//
&apos;// Entry.	user has sheet with rows selected to check for address blocks
&apos;//
&apos;//	Exit.	rows scanned and compared; if two or more adjacent rows have
&apos;//			the same unitaddress and unit, the first row will be
&apos;//			highlighted green; subsequent matching row(s) will have Unit
&apos;//			field highlighted lt blue
&apos;//
&apos;// Calls.	GreenRow
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	3/4/21.		wmk.	original code; adapted from HltAddrBlocks3.
&apos;//	7/13/21.	wmk.	elimiinate non-error msgbox&apos;s for batch processing.
&apos;//
&apos;//	Notes. This sub highlights the first row of any block of addresses
&apos;// that are the same. It also extends the highlighing with blue in
&apos;// subsequent rows that are the same address.
&apos;// This makes it easier to see identical addresses as a group.
&apos;//

&apos;//	constants.
const COL_A=0
const COL_B=1
const COL_C=2
const ROW_2=1
const LTGREEN=13953643
const LTBLUE3=11847644     &apos;// 0xb4c7dc
const ROW_HEADING=4

&apos;//	local variables.
dim i				As Integer		&apos;// loop counter
dim bHltgBlocks4		AS Boolean		&apos;// highlighting blocks in process flag
dim bEmptyIssued	AS Boolean		&apos;// empty row message issued
dim iStatus			AS integer		&apos;// status var
Dim oDoc As Object
Dim oSheet As Object
Dim NewColumn As Object
dim oSel as Object
dim iSheetIx as integer
dim oRange as Object

dim lThisRow as long			&apos;// current row selected on sheet
dim lLastRow	As Long			&apos;// last row to process
dim nRowCount	As Integer		&apos;// row count to process
dim nRowsProcessed	As Integer	&apos;// processed row count
dim nErrCode	As integer	&apos;// error code
dim	oCell			As Object	&apos;// working cell
dim oCellAddr		As Object	&apos;// addr current row
dim oCellNextAddr	AS Object	&apos;// addr next row
dim oCellUnit		AS Object	&apos;// unit current row
dim oCellNextUnit	AS Object	&apos;// unit next row
dim sAddress		AS String	&apos;// current row address
dim sNextAddr		As String	&apos;// next row address
dim sUnit			As String	&apos;// current row unit
dim sNextUnit		As String	&apos;// next row unit
dim sRange			As String	&apos;// highlight selection range

dim document   as object		&apos;// uno frame reference object
dim dispatcher as object		&apos;// uno dispatcher services object
dim args1(0) as new com.sun.star.beans.PropertyValue	&apos;// uno properties
dim args9(3) as new com.sun.star.beans.PropertyValue

	&apos;// code.
	ON ERROR GOTO ErrorHandler
	bHltgBlocks4 = false
	bEmptyIssued = false
&apos;	nErrCode = ERR_UNK
	iStatus = 0
	oDoc = ThisComponent
	oSel = oDoc.getCurrentSelection()
	oRange = oSel.RangeAddress
	iSheetIx = oRange.Sheet
	oSheet = oDoc.Sheets(iSheetIx)

	
	&apos;// initialie uno API hooks.
	document   = ThisComponent.CurrentController.Frame
	dispatcher = createUnoService(&quot;com.sun.star.frame.DispatchHelper&quot;)

&apos;msgbox(&quot;In local HltAddrBlks...&quot;)
	&apos;// set row processing from oRange information
	lThisRow = oRange.StartRow - 1		&apos;// start at -1 since increment first
	lThisRow = ROW_HEADING
	&apos;// get row count from A2.
	oCell = oSheet.getCellByPosition(COL_B,ROW_2)		&apos;// Record Count: xxx
	dim sCountStr 		As String
	dim nColonPos		As Integer
	dim sNumCount		As String
	sCountStr = oCell.String
	nColonPos = Instr(sCountStr, &quot;:&quot;)
	sNumCount = Right(sCountStr, len(sCountStr)-nColonPos)
	nRowCount = CInt(sNumCount)
	lLastRow = lThisRow + nRowCount
	nRowsProcessed = 0
&apos;	nRowCount = oCell.getValue()

	bHltgBlocks4 = false
	for i = 1 to nRowCount
		lThisRow = lThisRow + 1		&apos;// advance current row
		oCellAddr = oSheet.getCellByPosition(COL_B, lThisRow)
		oCellUnit = oSheet.getCellByPosition(COL_C, lThisRow)
		sAddress = ucase(trim(oCellAddr.String))		&apos;// set cell address text
		if len(trim(oCellUnit.String)) = 0 then
			sUnit = &quot;&quot;
		else
			sUnit = trim(oCellUnit.String)						&apos;// set unit address text
		endif
		
		if len(sAddress) = 0 then
			if not bEmptyIssued then
				msgBox(&quot;HLtAddrBlocks4 - empty address field; skipping row...&quot;)
				bEmptyIssued = true
			GoTo NextRow
			endif
		endif	&apos;// null string - skip/alert user

		&apos;// check next row.
		if lThisRow &lt; lLastRow then
		
			&apos;// see if Address and unit of next row match this row.
			oCellNextAddr = oSheet.getCellByPosition(COL_B, lThisRow+1)
			oCellNextUnit = oSheet.getCellByPosition(COL_C, lThisRow+1)
			sNextAddr = UCase(trim(oCellNextAddr.String))
			sNextUnit = trim(oCellNextUnit.String)
			
			&apos;// check for address and unit match across rows.
			if (strcomp(sAddress, sNextAddr) = 0)_ 
			  AND (strcomp(sUnit, sNextUnit) = 0) then
				if bHltgBlocks4 then
					oCell = oSheet.getCellByPosition(COL_C, lThisRow)
					oCell.CellBackColor = LTBLUE3
				   
				   GoTo NextRow
				else	&apos;// 2 rows the same, turn highlighting on
					bHltgBlocks4 = true		&apos;// turn on in block flag
					&apos;// highlight this row.
					GreenRow(lThisRow)
				endif	&apos;// end highlighting blocks conditional
				GoTo NextRow
			else 	&apos;// lines different
				if bHltgBlocks4 then
					bHltgBlocks4 = false
					oCell = oSheet.getCellByPosition(COL_C, lThisRow)
&apos;					oCell.CellBackColor = LTGREEN
					oCell.CellBackColor = LTBLUE3
				endif
			endif	&apos;// end 2 lines same address conditional
			
		else	&apos;// at last row
			if bHltgBlocks4 then
				bHltgBlocks4 = false
				oCell = oSheet.getCellByPosition(COL_C, lThisRow)
				oCell.CellBackColor = LTBLUE3
			endif
		endif	&apos;// end next row exists conditional
		
NextRow:
		nRowsProcessed = nRowsProcessed + 1

	next i

&apos;	msgbox(&quot;HltAddrBlocks4 - &quot; + nRowsProcessed + &quot; rows processed.&quot;)
	exit sub


NormalExit:
	exit sub					
	
ErrorHandler:
	msgbox(&quot;HltAddrBlocks4 - unprocessed error&quot;)
	GoTo NormalExit
	
end sub		&apos;// end HltAddrBlocks4	7/13/21.	10:43
&apos;/**/


&apos;// StripHLinkM.bas
&apos;//---------------------------------------------------------------
&apos;// StripHLinkM - Strip hyperlink function to isolate URL.
&apos;//		8/16/20.	wmk.	15:00
&apos;//---------------------------------------------------------------

public sub StripHLinkM()

&apos;//	Usage.	macro call or
&apos;//			call StripHLinkM()
&apos;//
&apos;//
&apos;// Entry.	user has selected a range of cells in desired row(s) to
&apos;//			strip the HYPERLINK function from, leaving only the URL
&apos;//
&apos;//	Exit.	each row selected has a hperlink added in the COL_HLINK
&apos;//			and COL_HLINK1 columns in the form:
&apos;//			HYPERLINK(&quot;&lt;url&gt;&quot;) that will allow the end-user to click
&apos;//			on the hyperlink url and be taken to a search webpage
&apos;//
&apos;// Calls.
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	8/16/20.	wmk.	original code; adapted from GenHLinkM; constants
&apos;// 					moved to Module1 header; modified to de-link
&apos;//						3 URL columns
&apos;//
&apos;// Wishlist. Pick up COL_ADDR and COL_HLINK from predetermined cells
&apos;// in the oRange.Sheet.
&apos;//	Method. for each row, extract HYPERLINK field from COL_HLINK
&apos;//		and COL_HLINK1
&apos;//		use cell.getFormula() function to extract formula from cell
&apos;//     strip &quot;=HYPERLINK(&quot; from front of formula, &quot;,&quot;Click to search&quot;)&quot;
&apos;//     from end of formula to isolate URL
&apos;//		use cell.setFormula() function to set &quot;=&quot; at front of URL and
&apos;//       store as new formula

&apos;// constants.
&apos;// see Module header...

&apos;//	local variables.
Dim oDoc As Object
Dim oSheet As Object
Dim NewColumn As Object
dim oSel as Object
dim iSheetIx as integer
dim oRange as Object
dim lThisRow as long		&apos;// current row selected on sheet

&apos;// processing variables.
dim nRowsProcessed As Integer	&apos;// count of rows processed
dim sURL	As String		&apos;// url generated from sAddress
dim sHLink	As String		&apos;// HYPERTEXT link to store
dim i		As Integer		&apos;// loop counter
dim sLink	As String		&apos;// existing HYPERTEXT link string
dim nLinkLen	As	Integer	&apos;// existing link length
dim nURLLen	As Integer		&apos;// URL length

&apos;// XCell sheet objects
dim oCellHLink as object	&apos;// hyperlink field

	&apos;// code.
	ON ERROR GOTO ErrorHandler
	oDoc = ThisComponent
	oSel = oDoc.getCurrentSelection()
	oRange = oSel.RangeAddress
	iSheetIx = oRange.Sheet
	oSheet = oDoc.Sheets(iSheetIx)
	
	nRowsProcessed = 0		&apos;// clear processed count

	&apos;// set row processing from oRange information
	lThisRow = oRange.StartRow - 1		&apos;// start at -1 since increment first
	nRowCount = oRange.EndRow - lThisRow	&apos;// set row count to process
	for i = 1 to nRowCount
		lThisRow = lThisRow + 1		&apos;// advance current row
		
		&apos;// delink truepeoplesearch
		oCellHLink = oSheet.getCellByPosition(COL_HLINK, lThisRow)
		sHLink = oCellHLink.getFormula()	&apos;// retrieve hyperlink formula text
		nLinkLen = Len(sHLink)
		if nLinkLen = 0 then
			msgBox(&quot;StripHLinkM - empty hyperlink field; skipping.&quot;)
			oCellAddr.CellBackColor = YELLOW
			GoTo NextLink
		endif	&apos;// null string - alert user, mark row and continue

		&apos;// strip &quot;=HYPERLINK(&quot; from front of function string
		&apos;// strip &quot;, &quot;Click here to search&quot;&quot; from back of function
		nStripLen = Len(&quot;=HYPERLINK(&quot;)
		sURL = &quot;=&quot; + Right(sHLink, nLinkLen-nStripLen)
		nURLLen = Len(sURL)
		nStripLen = Len(&quot;,&quot; + CHR(34) + &quot;Click here to search&quot; + CHR(34) + &quot;)&quot;)
		sURL = Left(sURL, nURLLen-nStripLen)
		oCellHLink.setFormula(sURL)
msgbox(&quot;StripHLinkM - URL =&quot; +CHR(13)+CHR(10) + sURL)

NextLink:
		&apos;// delink 411.com
		oCellHLink = oSheet.getCellByPosition(COL_HLINK1, lThisRow)
		sHLink = oCellHLink.getFormula()	&apos;// retrieve hyperlink formula text
		nLinkLen = Len(sHLink)
		if nLinkLen = 0 then
			msgBox(&quot;StripHLinkM - empty hyperlink field; skipping.&quot;)
			oCellAddr.CellBackColor = YELLOW
			GoTo Nextfor
		endif	&apos;// null string - alert user, mark row and continue

		&apos;// strip &quot;=HYPERLINK(&quot; from front of function string
		&apos;// strip &quot;, &quot;Click here to search&quot;&quot; from back of function
		nStripLen = Len(&quot;=HYPERLINK(&quot;)
		sURL = &quot;=&quot; + Right(sHLink, nLinkLen-nStripLen)
		nURLLen = Len(sURL)
		nStripLen = Len(&quot;,&quot; + CHR(34) + &quot;Click here to search&quot; + CHR(34) + &quot;)&quot;)
		sURL = Left(sURL, nURLLen-nStripLen)
		oCellHLink.setFormula(sURL)
msgbox(&quot;StripHLinkM - URL =&quot; +CHR(13)+CHR(10) + sURL)

NextLink2:
		&apos;// delink whitepages.com
		oCellHLink = oSheet.getCellByPosition(COL_HLINK2, lThisRow)
		sHLink = oCellHLink.getFormula()	&apos;// retrieve hyperlink formula text
		nLinkLen = Len(sHLink)
		if nLinkLen = 0 then
			msgBox(&quot;StripHLinkM - empty hyperlink field; skipping.&quot;)
			oCellAddr.CellBackColor = YELLOW
			GoTo Nextfor
		endif	&apos;// null string - alert user, mark row and continue

		&apos;// strip &quot;=HYPERLINK(&quot; from front of function string
		&apos;// strip &quot;, &quot;Click here to search&quot;&quot; from back of function
		nStripLen = Len(&quot;=HYPERLINK(&quot;)
		sURL = &quot;=&quot; + Right(sHLink, nLinkLen-nStripLen)
		nURLLen = Len(sURL)
		nStripLen = Len(&quot;,&quot; + CHR(34) + &quot;Click here to search&quot; + CHR(34) + &quot;)&quot;)
		sURL = Left(sURL, nURLLen-nStripLen)
		oCellHLink.setFormula(sURL)
msgbox(&quot;StripHLinkM - URL =&quot; +CHR(13)+CHR(10) + sURL)
		
Nextfor:
		nRowsProcessed = nRowsProcessed + 1

	next i
	
	msgbox(&quot;StripHLinkM - &quot; + nRowsProcessed + &quot; rows processed&quot;)
	
NormalExit:
	exit sub
	
ErrorHandler:
   msgbox(&quot;StripHLinkM - unprocessed error.&quot;)
   GoTo NormalExit

end sub		&apos;// end StripHLinkM	8/16/20.
&apos;/**/

&apos;// TabColor.bas
&apos;//---------------------------------------------------------------
&apos;// TabColor - Change current worksheet tab color.
&apos;//		10/15/20.	wmk.
&apos;//---------------------------------------------------------------

public sub TabColor(plColor As long)

&apos;//	Usage.	macro call or
&apos;//			call TabColor()
&apos;//
&apos;// Entry.	user has worksheet selected
&apos;//
&apos;//	Exit.	worksheet tab color changed to passed color
&apos;//
&apos;// Calls.
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	10/15/20.		wmk.	original code; adapted from YellowTab
&apos;//
&apos;//	Notes.	color constants are store here; sheet CellColor.ods in
&apos;//	Intermediate-csvs folder allows quick grab of color values


&apos;//	constants.
const YELLOW=16776960			&apos;// YELLOW color value
const DKLIME=620774				&apos;// DARKLIME color value

&apos;//	local variables.
rem ----------------------------------------------------------------------
rem define variables
dim document   as object
dim dispatcher as object

	&apos;// code.
	ON ERROR GOTO ErrorHandler
rem ----------------------------------------------------------------------
rem get access to the document
document   = ThisComponent.CurrentController.Frame
dispatcher = createUnoService(&quot;com.sun.star.frame.DispatchHelper&quot;)

rem ----------------------------------------------------------------------
dim args1(0) as new com.sun.star.beans.PropertyValue
args1(0).Name = &quot;TabBgColor&quot;
args1(0).Value = plColor

dispatcher.executeDispatch(document, &quot;.uno:SetTabBgColor&quot;, &quot;&quot;, 0, args1())
	
NormalExit:
	exit sub
	
ErrorHandler:
	msgbox(&quot;TabColor - unprocessed error&quot;)
	GoTo NormalExit
	
end sub		&apos;// end TabColor	10/15/20
&apos;/**/

&apos;// TerrHelp.bas
&apos;//---------------------------------------------------------------
&apos;// TerrHelp -Help info for Territories.
&apos;//		7/15/21.	wmk. 06:26
&apos;//---------------------------------------------------------------

public sub TerrHelp()

&apos;//	Usage.	macro call or
&apos;//			call TerrHelp()
&apos;//
&apos;// Entry.	User invoked macro or hit Shift-F7 for help with TerrKeys.cfg
&apos;// 		active
&apos;//
&apos;//	Exit.	Help msgbox displayed.
&apos;//
&apos;// Calls.
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	1/14/21.	wmk.	original code
&apos;// 7/15/21.	wmk.	help menu corrections to Ctrl-8 and Shft-F7;
&apos;//						switch to &amp; concatenation from +.
&apos;//
&apos;//	Notes. TerrKeys.cfg is stored on the ~/TerrData path and has the
&apos;// following keys defined:
&apos;//	
&apos;//		Ctrl-4 - invokes macro to generate PubTerr sheets from query	
&apos;//		Ctrl-6 - invokes SetGridLand macro to prompt user for setting
&apos;//				 Page format controls Grid:Yes and Landscape:Yes
&apos;//		Ctrl-7 - invokes SaveToXlsx macro to save current sheet in
&apos;//				 .xlsx format
&apos;//		Ctrl-8 - invokes ExportAsPDF macro to export current sheet
&apos;//				 as a PDF	
&apos;//		Shft-F7 - this menu
&apos;//

&apos;//	constants.

&apos;//	local variables.

	&apos;// code.
	ON ERROR GOTO ErrorHandler
	msgBox (&quot;Hotkeys are stored in the file TerrKeys.cfg on the path&quot;_
	 &amp;chr(13)&amp;chr(10) &amp; &quot;~/Territories/TerrData&quot; &amp; chr(13)&amp;chr(10)_
	 &amp; &quot;and may be loaded from Tools/Customize/Keyboard...&quot; &amp;chr(13)&amp;chr(10)_
	 &amp;chr(13)&amp;chr(10) &amp; &quot;     Ctrl-4      Generate territory sheets from query&quot;_
	 &amp;chr(13)&amp;chr(10) &amp; &quot;     Ctrl-6      Set Page Grid and Landscape controls&quot;_
	 &amp;chr(13)&amp;chr(10) &amp; &quot;     Ctrl-7      Save sheet to .xlsx file&quot;_
	 &amp;chr(13)&amp;chr(10) &amp; &quot;     Ctrl-8      Export sheet to PDF file&quot;_
	 &amp;chr(13)&amp;chr(10) &amp; &quot;     Shift-F7    This Help menu&quot; &amp;chr(13)&amp;chr(10),_
	  0, &quot;Territories Help&quot;)
if 1 = 0 then
	msgBox (&quot;Hotkeys are stored in the file TerrKeys.cfg on the path&quot;_
	 +chr(13)+chr(10) + &quot;~/Territories/TerrData&quot; + chr(13)+chr(10)_
	 + &quot;and may be loaded from Tools/Customize/Keyboard...&quot; +chr(13)+chr(10)_
	 +chr(13)+chr(10) + &quot;     Ctrl-6      Set Page Grid and Landscape controls&quot;_
	 +chr(13)+chr(10) + &quot;     Ctrl-7      Save sheet to .xlsx file&quot;_
	 +chr(13)+chr(10) + &quot;     Ctrl-8      Export sheet to PDF file&quot;_
	 +chr(13)+chr(10) + &quot;Shift-F7    Help&quot; +chr(13)+chr(10),_
	  0, &quot;Territories Help&quot;)
endif

NormalExit:
	exit sub
	
ErrorHandler:
	msgbox(&quot;TerrHelp - unprocessed error&quot;)
	GoTo NormalExit
	
end sub		&apos;// end TerrHelp	7/15/21.	06:26
&apos;/**/


&apos;// TerrToBridge.bas
&apos;//---------------------------------------------------------------
&apos;// TerrToBridge - Pub-Territory sheet to Admin-Bridge sheet.
&apos;//		9/19/20.	wmk.	19:45
&apos;//---------------------------------------------------------------

public sub TerrToBridge()

&apos;//	Usage.	macro call or
&apos;//			call TerrToBridge()
&apos;//
&apos;//	Entry..	user in a &quot;Pub-Territory&quot; formatted sheet with the following fields:
&apos;//        A    	B      C       D      E     F    		G		   H		I
&apos;//		Address  Name1  Name2   Phone1  Phone2 RU/Phone	 DoNotCall	Foreign	Personal/Notes
&apos;//[source] B      C	  D		   E	  F	        G          J       L		-
&apos;//
&apos;// Exit.	entry sheet transformed to Admin-Bridge with following fields:
&apos;//[src]  E1	 	   A           B       C         D      E      F
&apos;//	OwningParcel  UnitAddress  Resident1 Resident2 Phone1 Phone2 RUPhone
&apos;//			A			B			C		D		  E		 F		G	
&apos;//
&apos;//[src] B4     D4        G       -    H       C2       fsAddrToSCFormat  -
&apos;//  SubTerr CongTerr DoNotCall RSO Foreign  RecordDate SitusAddress  DelPending
&apos;//		H		I		   J     K     L		M			  N			  O
&apos;//
&apos;// Calls.	BoldHeadings, ForceRecalc, SetTerrWidths,
&apos;//			SetSelection, MergeOwnerCells, MergeStreetsCells,
&apos;//			MergeSheetType
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	9/18/20.	wmk.	original code; adapted from EditToTerr
&apos;//	9/19/20.	wmk.	Merge.. calls; FreezeView call added
&apos;//
&apos;//	Notes.
&apos;// Method.
&apos;//     Insert new column A
&apos;//     col A heading to &quot;OwningParcel&quot;
&apos;//		Move header B1-I4 to A1
&apos;//		col B heading to &quot;UnitAddress&quot;
&apos;//		col C heading to &quot;Resident1&quot;
&apos;//		col D heading to &quot;Resident2&quot;
&apos;//		col G heading to &quot;RefUSA&quot;
&apos;//     insert 2 cols at H
&apos;//     col H heading to &quot;SubTerritory
&apos;//		col I heading to &quot;CongTerrID&quot;
&apos;//     insert 1 col at K
&apos;//     col K heading to &quot;RSO&quot;
&apos;//     del col M
&apos;//		col M heAding to &quot;RecordDate&quot;
&apos;//		col N heading to &quot;SitusAddress&quot;
&apos;//		col O heading to &quot;DelPending&quot;
&apos;// for each active row
&apos;//			Ax = E1 OwnerParcel
&apos;//			Nx = fsAddrToSCFormat(Bx)
&apos;//			Mx = C2 date
&apos;//			Ix = D4 CongTerrID
&apos;//			Hx = B4 SubTerritory
&apos;// next row
&apos;//		H1 = &quot;Admin-Bridge formatted sheet&quot; 

&apos;//	constants.
const COL_PARCEL=0		&apos;// &quot;OwningParcel&quot; column index
const COL_A=0
const COL_B=1
const COL_C=2	
const COL_D=3
const COL_E=4
const COL_F=5
const COL_G=6			&apos;// column G index
const COL_H=7			&apos;// column H index
const COL_I=8			&apos;// column I index
const COL_J=9			&apos;// column J index
const COL_K=10			&apos;// column K index
const COL_L=11			&apos;// column L index
const COL_M=12			&apos;// column M index (RecordDate)
const COL_N=13			&apos;// column N index (SitusAddress)
const COL_O=14			&apos;// column O index (DelPending)
const ROW_1=0
const ROW_2=1
const ROW_3=2
const ROW_4=3
const ROW_HEADING=4		&apos;// headings row index
const LJUST=1		&apos;// left-justify HoriJustify				&apos;// mod052020
const CJUST=2		&apos;// center HoriJustify						&apos;// mod052020
const RJUST=3		&apos;// right-justify HoriJustify				&apos;// mod052320
const MDYY=30		&apos;// &apos;M/D/YY&apos; format value

&apos;//	local variables.
Dim oDoc As Object
Dim oSheet As Object
Dim NewColumn As Object
dim oSel as Object
dim iSheetIx as integer
dim oRange as Object
dim lThisRow as long		&apos;// current row selected on sheet
dim oMrgRange	As Object	&apos;// merge range

dim oCell	As Object		&apos;// cell working on
dim i		As Integer		&apos;// loop index
dim sPropID	As String		&apos;// property ID
dim sSubTerr	As String	&apos;// subterritory
dim sCongTerr	As String	&apos;// cong terr ID
dim lRowCount	As Long		&apos;// row count of addresses
dim dDate		As Double	&apos;// date value
dim sAddr		As String	&apos;// full address
dim sNotes		As String	&apos;// notes field
dim nCols		As Integer	&apos;// removal column count
dim oCols		As Object	&apos;// .Columns array this sheet
dim oCell2		As Object	&apos;// target cell when moving cell contents

	&apos;// code.
	ON ERROR GoTo ErrorHandler
	oDoc = ThisComponent
	oSel = oDoc.getCurrentSelection()
	oRange = oSel.RangeAddress
	iSheetIx = oRange.Sheet
	oSheet = oDoc.Sheets(iSheetIx)
	oCols = oSheet.Columns
	
	oCell =	oSheet.getCellByPosition(COL_B, ROW_2)
	lRowCount = oCell.Value


	&apos;//     Insert new column A
	&apos;//     col A heading to &quot;OwningParcel&quot;
	oCols.insertByIndex(COL_A, 1)
	oCell = oSheet.getCellByPosition(COL_A, ROW_HEADING)
	oCell.String = &quot;OwningParcel&quot;
	oCell.HoriJustify = CJUST

	&apos;//		Move header B1-I4 to A1
	oMrgRange = oRange
	oMrgRange.StartColumn = COL_B
	oMrgRange.EndColumn = COL_I
	oMrgRange.StartRow = ROW_1
	oMrgRange.EndRow = ROW_4
dim oTarget as new com.sun.star.table.CellAddress
	oTarget.Sheet = oRange.Sheet
	oTarget.Column = COL_A
	oTarget.Row = ROW_1
	oSheet.moveRange(oTarget,oMrgRange)

	&apos;//	restore B2 formula row count
	oCell = oSheet.getCellByPosition(COL_B, ROW_2)
	oCell.setFormula(&quot;=COUNTA($A$6:$A$1299)&quot;)
	
	&apos;//		col B heading to &quot;UnitAddress&quot;
	oCell = oSheet.getCellByPosition(COL_B, ROW_HEADING)
	oCell.String = &quot;UnitAddress&quot;
	oCell.HoriJustify = CJUST
	
	&apos;//		col C heading to &quot;Resident1&quot;
	oCell = oSheet.getCellByPosition(COL_C, ROW_HEADING)
	oCell.String = &quot;Resident1&quot;
	oCell.HoriJustify = CJUST
	
	&apos;//		col D heading to &quot;Resident2&quot;
	oCell = oSheet.getCellByPosition(COL_D, ROW_HEADING)
	oCell.String = &quot;Resident2&quot;
	oCell.HoriJustify = CJUST

	&apos;//		col G heading to &quot;RefUSA&quot;
	oCell = oSheet.getCellByPosition(COL_G, ROW_HEADING)
	oCell.String = &quot;RefUSA&quot;
	oCell.HoriJustify = CJUST

	&apos;//		clear old H1 title 
	oCell = oSheet.getCellByPosition(COL_H, ROW_1)
	oCell.String = &quot;&quot;

	&apos;//     insert 2 cols at H
	&apos;//     col H heading to &quot;SubTerritory
	&apos;//		col I heading to &quot;CongTerrID&quot;
	oCols.insertByIndex(COL_H, 2)
	oCell = oSheet.getCellByPosition(COL_H, ROW_HEADING)
	oCell.String = &quot;SubTerritory&quot;
	oCell.HoriJustify = CJUST
	oCell = oSheet.getCellByPosition(COL_I, ROW_HEADING)
	oCell.String = &quot;CongTerrID&quot;
	oCell.HoriJustify = CJUST
	
	&apos;//     insert 1 col at K
	&apos;//     col K heading to &quot;RSO&quot;
	oCols.insertByIndex(COL_K,1)
	oCell = oSheet.getCellByPosition(COL_K, ROW_HEADING)
	oCell.String = &quot;RSO&quot;
	oCell.HoriJustify = CJUST
	
	&apos;//     del col M
	&apos;//		col M heading to &quot;RecordDate&quot;
	oCols.removeByIndex(COL_M, 1)
	oCell = oSheet.getCellByPosition(COL_M, ROW_HEADING)
	oCell.String = &quot;RecordDate&quot;
	oCell.HoriJustify = CJUST
	
	&apos;//		col N heading to &quot;SitusAddress&quot;
	oCell = oSheet.getCellByPosition(COL_N, ROW_HEADING)
	oCell.String = &quot;SitusAddress&quot;
	oCell.HoriJustify = CJUST

	&apos;//		col O heading to &quot;DelPending&quot;
	oCell = oSheet.getCellByPosition(COL_O, ROW_HEADING)
	oCell.String = &quot;DelPending&quot;
	oCell.HoriJustify = CJUST

	&apos;// grab E1 PropertyID
	oCell = oSheet.getCellByPosition(COL_E, ROW_1)
	sPropID = oCell.String
	
	&apos;// for each active row
	lThisRow = ROW_HEADING
	for i = 0 to lRowCount-1
		lThisRow = lThisRow + 1

		&apos;//			Ax = E1 OwnerParcel
		oCell = oSheet.getCellByPosition(COL_A, lThisRow)
		oCell.String = sPropID
		
		&apos;//			Hx = B4 SubTerritory
		oCell = oSheet.getCellByPosition(COL_H, lThisRow)
		oCell.setFormula(&quot;=$B$4&quot;)
		
		&apos;//			Ix = D4 CongTerrID
		oCell = oSheet.getCellByPosition(COL_I, lThisRow)
		oCell.setFormula(&quot;=$D$4&quot;)

		&apos;//			Mx = C2 date
		oCell = oSheet.getCellByPosition(COL_C, ROW_2)
		oCell2 = oSheet.getCellByPosition(COL_M, lThisRow)
		oCell2.setValue(oCell.getValue())
		oCell2.NumberFormat = MDYY
		
		&apos;//			Nx = fsAddrToSCFormat(Bx)
		oCell = oSheet.getCellByPosition(COL_B, lThisRow)
		sAddr = oCell.String
		oCell2 = oSheet.getCellByPosition(COL_N, lThisRow)
		oCell2.String = fsAddrToSCFormat(sAddr)
		oCell2.HoriJustify = LJUST
		
	&apos;// next row
	next i

	&apos;//		H1 = &quot;Admin-Bridge formatted sheet&quot; 
	oCell = oSheet.getCellByPosition(COL_H, ROW_1)
	oCell.String = &quot;Admin-Bridge formatted sheet&quot;

	&apos;// tidy up header information
	ForceRecalc()
	BoldHeadings()
	SetBridgeColWidths()
&apos;	MergeAreaCells()
&apos;	MergeOwnerCells()
&apos;	MergePropIDCells()
&apos;	MergeSheetType()
&apos;	MergeStreetsCells()
	FreezeView()
	
NormalExit:
	exit sub

ErrorHandler:
	msgbox(&quot;TerrToBridge - unprocessed error.&quot;)
	GoTo NormalExit

end sub		&apos;// end TerrToBridge		9/19/20
&apos;/**/

&apos;// TSToEdit.bas
&apos;//---------------------------------------------------------------
&apos;// TSToEdit - Convert TS formatted territory to Admin-Edit format.
&apos;//		9/12/20.	wmk.	08:00
&apos;//---------------------------------------------------------------

public sub TSToEdit()

&apos;//	Usage.	macro call or
&apos;//			call TSToEdit()
&apos;//
&apos;// Entry.	user has TS formatted territory selected
&apos;// following are the columns A - id, B - name, C - phone_number
&apos;//							  D - street_address E - city_state_zip
&apos;//							  F - notes
&apos;//
&apos;//	Exit.	sheet reformatted to Admin-Edit sheet format
&apos;// following are the Admin-Edit columns: A - OwningParcel, B - UnitAddress,
&apos;//		C - Resident1, D - Resident2, E - Phone1, F - Phone2,
&apos;//		G - RefUSA/Phone, H - search/truepeople, I - search/411,
&apos;//		J - search/whitepages, K - SubTerritory, L - CongTerrID,
&apos;//		M - DoNotCall, N - RSO, O - Foreign, P - RecordDate
&apos;//
&apos;// Calls.
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	9/10/20.		wmk.	original code
&apos;// 9/12/20.		wmk.	bug fixes with column headings
&apos;//
&apos;//	Notes. In the Admin-Edit sheet, only columns B, C, E come from column
&apos;// data in the TS formatted sheet. The header information is assumed to
&apos;// contain the values for column A, column K and column L. Column O
&apos;// will be flagged with an &apos;x&apos; if column F (notes) contains &apos;foreign&apos;
&apos;// (not case-sensitive). Column M will be flagged with an &apos;x&apos; if column F
&apos;// (notes) contains &apos;dnc&apos; (not case-sensitive). Column N will be flagged 
&apos;//	with an &apos;x&apos; if column F (notes) contains &apos;rso&apos; (not case-sensitive).
&apos;//
&apos;// Method.
&apos;//		move header information B1-I4 to A1
&apos;//		change column A heading to &quot;OwningParcel&quot;
&apos;//		change column E heading to &quot;Phone1&quot;
&apos;//		set column G - P headings to &quot;RefUSA/PHone&quot;..&quot;RecordDate&quot;
&apos;//		loop on all active rows (pass 1)
&apos;//			process column F (notes); if &apos;dnc&apos; set &apos;x&apos; in column M this row
&apos;//				if &apos;foreign&apos; set &apos;x&apos; in column O this row,
&apos;//				if &apos;rso&apos; set &apos;x&apos; in column N this row
&apos;//			set column F to &quot;&quot; (Phone2)
&apos;//			set column A to property ID from E1
&apos;//			set column E to column C (phone_number)
&apos;//			set column C to column B (name)
&apos;//			set column B to column D (street_address)
&apos;//			set column D to &quot;&quot; (Resident2)
&apos;//			set column K to SubTerritory from B4
&apos;//			set column L to CongTerrID from D4
&apos;//		next row
&apos;//		select all active rows
&apos;//		use GenELinkM to generate all hyperlinks
&apos;//		set H1 to &quot;Admin-Edit formatted sheet&apos;
&apos;//		set all headings bold
&apos;//		set EditColWidths
&apos;//		force recalc

&apos;//	constants.
const COL_PARCEL=0		&apos;// &quot;OwningParcel&quot; column index
const COL_A=0
const COL_B=1
const COL_C=2	
const COL_D=3
const COL_E=4
const COL_F=5
const COL_G=6			&apos;// column G index
const COL_H=7			&apos;// column H index
const COL_I=8			&apos;// column I index
const COL_J=9			&apos;// column J index
const COL_K=10			&apos;// column K index
const COL_L=11			&apos;// column L index 
const COL_M=12			&apos;// column M index (DoNotCall)
const COL_N=13			&apos;// column N index (RSO)
const COL_O=14			&apos;// column O index (Foreign)
const COL_P=15			&apos;// column P index (RecordDate)
const ROW_1=0
const ROW_2=1
const ROW_3=2
const ROW_4=3
const ROW_HEADING=4		&apos;// headings row index
const LJUST=1		&apos;// left-justify HoriJustify				&apos;// mod052020
const CJUST=2		&apos;// center HoriJustify						&apos;// mod052020
const RJUST=3		&apos;// right-justify HoriJustify				&apos;// mod052320
const MDYY=30		&apos;// &apos;M/D/YY&apos; format value

&apos;//	local variables.
Dim oDoc As Object
Dim oSheet As Object
Dim NewColumn As Object
dim oSel as Object
dim iSheetIx as integer
dim oRange as Object
dim lThisRow as long		&apos;// current row selected on sheet
dim oMrgRange	As Object	&apos;// merge range

dim oCell	As Object		&apos;// cell working on
dim oCell2	As Object		&apos;// related cell to cell working on
dim oCellPhone	As Object	&apos;// cell with Phone1
dim i		As Integer		&apos;// loop index
dim sPropID	As String		&apos;// property ID
dim sSubTerr	As String	&apos;// subterritory
dim sCongTerr	As String	&apos;// cong terr ID
dim lRowCount	As Long		&apos;// row count of addresses
dim dDate		As Double	&apos;// date value
dim sCityStZip	As String	&apos;// concatenated City, State, Zip
dim sNotes		As String	&apos;// notes field
dim	nCols		As Integer	&apos;// column count to remove
dim nPos		As Integer	&apos;// position of string within notes

	&apos;// code.
	ON ERROR GoTo ErrorHandler
	oDoc = ThisComponent
	oSel = oDoc.getCurrentSelection()
	oRange = oSel.RangeAddress
	iSheetIx = oRange.Sheet
	oSheet = oDoc.Sheets(iSheetIx)
	
&apos;//		Move B1-I4 entries to A1
	oMrgRange = oRange
	oMrgRange.StartColumn = COL_B
	oMrgRange.EndColumn = COL_I
	oMrgRange.StartRow = ROW_1
	oMrgRange.EndRow = ROW_4
dim oTarget as new com.sun.star.table.CellAddress
	oTarget.Sheet = oRange.Sheet
	oTarget.Column = COL_A
	oTarget.Row = ROW_1
	oSheet.moveRange(oTarget,oMrgRange)

	&apos;// pick up row count from header
	oCell =	oSheet.getCellByPosition(COL_B, ROW_2)
	lRowCount = oCell.Value

	&apos;// pick up propertyID from header
	oCell = oSheet.getCellByPosition(COL_E, ROW_1)
	sPropID = oCell.String
	
	&apos;// pick up SubTerritory from header B4
	oCell =	oSheet.getCellByPosition(COL_B, ROW_4)
	sSubTerr = oCell.String
	
	&apos;// pick up CongTerrID from header D4
	oCell =	oSheet.getCellByPosition(COL_D, ROW_4)
	sCongTerr = oCell.String
	
&apos;//		change column A heading to &quot;OwningParcel&quot;
	oCell =	oSheet.getCellByPosition(COL_A, ROW_HEADING)
	oCell.String = &quot;OwningParcel&quot;
	
&apos;//		change column B heading to &quot;UnitAddress&quot;
	oCell =	oSheet.getCellByPosition(COL_B, ROW_HEADING)
	oCell.String = &quot;OwningParcel&quot;

&apos;//		change column D heading to &quot;Resident2&quot;
	oCell =	oSheet.getCellByPosition(COL_D, ROW_HEADING)
	oCell.String = &quot;Resident2&quot;

&apos;//		change column C heading to &quot;Resident1&quot;
	oCell =	oSheet.getCellByPosition(COL_C, ROW_HEADING)
	oCell.String = &quot;Resident1&quot;

&apos;//		change column E heading to &quot;Phone1&quot;
	oCell =	oSheet.getCellByPosition(COL_E, ROW_HEADING)
	oCell.String = &quot;Phone1&quot;
	
&apos;//		change column F heading to &quot;Phone2&quot;
	oCell =	oSheet.getCellByPosition(COL_F, ROW_HEADING)
	oCell.String = &quot;Phone2&quot;
	
&apos;//		set column G - P headings to &quot;RefUSA/Phone&quot;..&quot;RecordDate&quot;
	oCell =	oSheet.getCellByPosition(COL_G, ROW_HEADING-1)
	oCell.String = &quot;RefUSA&quot;
	oCell.HoriJustify = CJUST
	oCell =	oSheet.getCellByPosition(COL_G, ROW_HEADING)
	oCell.String = &quot;Phone Number&quot;
	oCell.HoriJustify = CJUST
	oCell =	oSheet.getCellByPosition(COL_H, ROW_HEADING-1)
	oCell.String = &quot;search&quot;
	oCell.HoriJustify = CJUST
	oCell =	oSheet.getCellByPosition(COL_H, ROW_HEADING)
	oCell.String = &quot;truepeople&quot;
	oCell.HoriJustify = CJUST
	oCell =	oSheet.getCellByPosition(COL_I, ROW_HEADING-1)
	oCell.String = &quot;search&quot;
	oCell.HoriJustify = CJUST
	oCell =	oSheet.getCellByPosition(COL_I, ROW_HEADING)
	oCell.String = &quot;411&quot;
	oCell.HoriJustify = CJUST
	oCell =	oSheet.getCellByPosition(COL_J, ROW_HEADING-1)
	oCell.String = &quot;search&quot;
	oCell.HoriJustify = CJUST
	oCell =	oSheet.getCellByPosition(COL_J, ROW_HEADING)
	oCell.String = &quot;whitepages&quot;
	oCell.HoriJustify = CJUST
	oCell =	oSheet.getCellByPosition(COL_K, ROW_HEADING)
	oCell.String = &quot;SubTerritory&quot;
	oCell.HoriJustify = CJUST
	oCell =	oSheet.getCellByPosition(COL_L, ROW_HEADING)
	oCell.String = &quot;CongTerrID&quot;
	oCell.HoriJustify = CJUST
	oCell =	oSheet.getCellByPosition(COL_M, ROW_HEADING)
	oCell.String = &quot;DoNotCall&quot;
	oCell.HoriJustify = CJUST
	oCell =	oSheet.getCellByPosition(COL_N, ROW_HEADING)
	oCell.String = &quot;RSO&quot;
	oCell.HoriJustify = CJUST
	oCell =	oSheet.getCellByPosition(COL_O, ROW_HEADING)
	oCell.String = &quot;Foreign&quot;
	oCell.HoriJustify = CJUST
	oCell =	oSheet.getCellByPosition(COL_P, ROW_HEADING)
	oCell.String = &quot;RecordDate&quot;
	oCell.HoriJustify = CJUST

	lThisRow = ROW_HEADING
&apos;// loop on all active rows
	for i = 0 to lRowCount-1
		lThisRow = lThisRow + 1
&apos;//			process column F (notes); if &apos;dnc&apos; set &apos;x&apos; in column M this row
&apos;//				if &apos;foreign&apos; set &apos;x&apos; in column O this row,
&apos;//				if &apos;rso&apos; set &apos;x&apos; in column N this row
&apos;//			set column F to &quot;&quot; (Phone2)
		oCell =	oSheet.getCellByPosition(COL_F, lThisRow)
		sNotes = LCase(trim(oCell.String))
		oCell.String = &quot;&quot;
		nPos = InStr(sNotes, &quot;dnc&quot;)
		if nPos &gt; 0 then
			oCell2 = oSheet.getCellByPosition(COL_M, lThisRow)
			oCell2.String = &quot;x&quot;
			oCell2.HoriJustify = CJUST
		endif
		nPos = InStr(sNotes, &quot;foreign&quot;)
		if nPos &gt; 0 then
			oCell2 = oSheet.getCellByPosition(COL_O, lThisRow)
			oCell2.String = &quot;x&quot;
			oCell2.HoriJustify = CJUST
		endif
		nPos = InStr(sNotes, &quot;rso&quot;)
		if nPos &gt; 0 then
			oCell2 = oSheet.getCellByPosition(COL_N, lThisRow)
			oCell2.String = &quot;x&quot;
			oCell2.HoriJustify = CJUST
		endif
		
		&apos;//	set column A to property ID from E1
		oCell =	oSheet.getCellByPosition(COL_A, lThisRow)
		oCell.String = sPropID
		
		&apos;//	set column E to column C (phone_number)
		oCell =	oSheet.getCellByPosition(COL_C, lThisRow)
		oCell2 = oSheet.getCellByPosition(COL_E, lThisRow)
		oCell2.String = oCell.String

		&apos;//		set column C to column B (name)
		oCell2 = oSheet.getCellByPosition(COL_B, lThisRow)
		oCell.String = oCell2.String

		&apos;//		set column B to column D (street_address)
		oCell =	oSheet.getCellByPosition(COL_D, lThisRow)
		oCell2.String = oCell.String

		&apos;//		set column D to &quot;&quot; (Resident2)
		oCell.String = &quot;&quot;
		
		&apos;//		set column K to SubTerritory from B4
		oCell =	oSheet.getCellByPosition(COL_K, lThisRow)
		oCell.String = sSubTerr
	
		&apos;//		set column L to CongTerrID from D4
		oCell =	oSheet.getCellByPosition(COL_L, lThisRow)
		oCell.String = sCongTerr

	next i

	&apos;//	select all active rows
	&apos;//	use GenELinkM to generate all hyperlinks
	SelectActiveRows()
	GenELinkM()
	
	&apos;//	set H1 to &quot;Admin-Edit formatted sheet&apos;
	oCell =	oSheet.getCellByPosition(COL_H, ROW_1)
	oCell.String = &quot;Admin-Edit formatted sheet&quot;
		
	&apos;//	set all headings bold
	BoldHeadings()
	
	&apos;//	set EditColWidths
	SetEditColWidths()
	
	&apos;//	force recalc
	ForceRecalc()
	
	&apos;// restore selection
	SetSelection(oRange)
	
NormalExit:
	exit sub
	
ErrorHandler:
	msgbox(&quot;TSToEdit - unprocessed error.&quot;)
	GoTo NormalExit

end sub		&apos;// end TSToEdit		9/12/20
&apos;/**/

&apos;// UnprotectSheet.bas
&apos;//----------------------------------------------------------------------
&apos;// UnprotectSheet - Remove protection from selected sheet (no password).
&apos;//		10/12/20.	wmk.
&apos;//----------------------------------------------------------------------

public sub UnprotectSheet()

&apos;//	Usage.	macro call or
&apos;//			call UnprotectSheet()
&apos;//
&apos;//
&apos;// Entry.	selected sheet &quot;protected&quot; (no password)
&apos;//
&apos;//	Exit.	selected sheet &quot;unprotected&quot;
&apos;//
&apos;// Calls.
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	10/12/20.		wmk.	original code
&apos;//
&apos;//	Notes.
&apos;//

&apos;//	constants.

&apos;//	local variables.
rem ----------------------------------------------------------------------
rem define variables
dim document   as object
dim dispatcher as object

	&apos;// code.
	ON ERROR GOTO ErrorHandler
rem ----------------------------------------------------------------------
rem get access to the document
document   = ThisComponent.CurrentController.Frame
dispatcher = createUnoService(&quot;com.sun.star.frame.DispatchHelper&quot;)

rem ----------------------------------------------------------------------
dim args1(0) as new com.sun.star.beans.PropertyValue
args1(0).Name = &quot;Protect&quot;
args1(0).Value = false

dispatcher.executeDispatch(document, &quot;.uno:Protect&quot;, &quot;&quot;, 0, args1())
	
NormalExit:
	exit sub
	
ErrorHandler:
	msgbox(&quot;UnprotectSheet - unprocessed error&quot;)
	GoTo NormalExit
	
end sub		&apos;// end UnprotectSheet		10/12/20
&apos;/**/


&apos;// CenterUnitHstead.bas
&apos;//---------------------------------------------------------------
&apos;// CenterUnitHstead - Center Unit and Homestead columns in PubTerr sheet.
&apos;//		1/1/21.	wmk.
&apos;//---------------------------------------------------------------

public sub CenterUnitHstead()

&apos;//	Usage.	macro call or
&apos;//			call CenterUnitHstead()
&apos;//
&apos;//
&apos;// Entry.	_PubTerr formatted sheet selected
&apos;//
&apos;//	Exit.	Unit and Homestead columns centered
&apos;//
&apos;// Calls.
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	1/14/21.		wmk.	original code
&apos;//
&apos;//	Notes. &lt;Insert notes here&gt;
&apos;//

&apos;//	constants.
const COL_B=1
const COL_E=4
const CJUST=2		&apos;// center justify

&apos;//	local variables.
dim oDoc		As Object		&apos;// ThisComponent
dim oSel		As Object
dim oRange		As Object
dim iSheetIx	As Integer
dim oSheet		As Object
dim oCols		AS Object

	&apos;// code.
	ON ERROR GOTO ErrorHandler
	oDoc = ThisComponent
	oSel = oDoc.getCurrentSelection()
	oRange = oSel.RangeAddress
	iSheetIx = oRange.Sheet
	oSheet = oDoc.Sheets(iSheetIx)
	oCols = oSheet.Columns
	oCols(COL_B).setPropertyValue(&quot;HoriJustify&quot;, CJUST)
	oCols(COL_E).setPropertyValue(&quot;HoriJustify&quot;, CJUST)
	
NormalExit:
	exit sub
	
ErrorHandler:
	msgbox(&quot;CenterUnitHstead - unprocessed error&quot;)
	GoTo NormalExit
	
end sub		&apos;// end CenterUnitHstead
&apos;/**/

&apos;// CenterUnitHstead2.bas
&apos;//---------------------------------------------------------------
&apos;// CenterUnitHstead2 - Center Unit and Homestead columns in PubTerr sheet.
&apos;//		2/14/21.	wmk.
&apos;//---------------------------------------------------------------

public sub CenterUnitHstead2()

&apos;//	Usage.	macro call or
&apos;//			call CenterUnitHstead2()
&apos;//
&apos;// Entry.	_PubTerr formatted sheet selected
&apos;//			COL_A is homestead
&apos;//			COL C is unit
&apos;//
&apos;//	Exit.	Unit and Homestead columns centered
&apos;//
&apos;// Calls.
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	2/14/21.		wmk.	original code; cloned from CenterUnitHstead
&apos;//
&apos;//	Notes. Support for new format simpllfied Pub_Terr sheet.
&apos;//

&apos;//	constants.
const COL_A=0
const COL_B=1
const COL_C=2
const COL_E=4
const CJUST=2		&apos;// center justify

&apos;//	local variables.
dim oDoc		As Object		&apos;// ThisComponent
dim oSel		As Object
dim oRange		As Object
dim iSheetIx	As Integer
dim oSheet		As Object
dim oCols		AS Object

	&apos;// code.
	ON ERROR GOTO ErrorHandler
	oDoc = ThisComponent
	oSel = oDoc.getCurrentSelection()
	oRange = oSel.RangeAddress
	iSheetIx = oRange.Sheet
	oSheet = oDoc.Sheets(iSheetIx)
	oCols = oSheet.Columns
	oCols(COL_A).setPropertyValue(&quot;HoriJustify&quot;, CJUST)
	oCols(COL_C).setPropertyValue(&quot;HoriJustify&quot;, CJUST)
	
NormalExit:
	exit sub
	
ErrorHandler:
	msgbox(&quot;CenterUnitHstead2 - unprocessed error&quot;)
	GoTo NormalExit
	
end sub		&apos;// end CenterUnitHstead2	2/14/21.
&apos;/**/

&apos;// CenterUnitHstead3.bas
&apos;//---------------------------------------------------------------
&apos;// CenterUnitHstead3 - Center Unit and Homestead columns in PubTerr sheet.
&apos;//		2/19/21.	wmk.
&apos;//---------------------------------------------------------------

public sub CenterUnitHstead3()

&apos;//	Usage.	macro call or
&apos;//			call CenterUnitHstead3()
&apos;//
&apos;// Entry.	_PubTerr formatted sheet selected
&apos;//			COL_C is homestead
&apos;//			COL B is unit
&apos;//
&apos;//	Exit.	Unit and Homestead columns centered
&apos;//
&apos;// Calls.
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	2/19/21.	wmk.	original code; cloned from CenterUnitHstead2
&apos;//
&apos;//	Notes. Support for new format simplified Pub_Terr sheet.
&apos;//

&apos;//	constants.
const COL_A=0
const COL_B=1
const COL_C=2
const COL_E=4
const CJUST=2		&apos;// center justify

&apos;//	local variables.
dim oDoc		As Object		&apos;// ThisComponent
dim oSel		As Object
dim oRange		As Object
dim iSheetIx	As Integer
dim oSheet		As Object
dim oCols		AS Object

	&apos;// code.
	ON ERROR GOTO ErrorHandler
	oDoc = ThisComponent
	oSel = oDoc.getCurrentSelection()
	oRange = oSel.RangeAddress
	iSheetIx = oRange.Sheet
	oSheet = oDoc.Sheets(iSheetIx)
	oCols = oSheet.Columns
	oCols(COL_B).setPropertyValue(&quot;HoriJustify&quot;, CJUST)
	oCols(COL_C).setPropertyValue(&quot;HoriJustify&quot;, CJUST)
	
NormalExit:
	exit sub
	
ErrorHandler:
	msgbox(&quot;CenterUnitHstead3 - unprocessed error&quot;)
	GoTo NormalExit
	
end sub		&apos;// end CenterUnitHstead3
&apos;/**/

</script:module>