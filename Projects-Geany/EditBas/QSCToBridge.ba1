&apos;// QSCToBridge.bas
&apos;//-------------------------------------------------------------------
&apos;// QSCToBridge - Query SC extracted .csv sheet to Admin-Bridge sheet.
&apos;//		10/24/20.	wmk.	16:45
&apos;//-------------------------------------------------------------------

public sub QSCToBridge()

&apos;//	Usage.	macro call or
&apos;//			call QSCToBridge(); used to get multiowner condos from SC
&apos;//			query to MultiMail.db [SplitOwners table] via Bridge
&apos;//
&apos;// Entry.
&apos;//	sheet selected with .csv fields generated by SQL/Query of any of the
&apos;// SC download tables (e.g. VeniceNTerritory) with rows selected by query
&apos;// (typically a property address that may be a multiunit/multiowner condo.
&apos;// QSCToBridge assumes headings row present from query.
&apos;//
&apos;// Following are the SC columns and .Props columns:
&apos;//
&apos;//	&quot;Account #&quot;	&quot;Owner 1&quot;	&quot;Owner 2&quot;	&quot;Owner 3&quot;	&quot;Mailing Address 1&quot;
&apos;//		A			B			C			D			E
&apos;//	&quot;Mailing Address 2&quot;	  &quot;Mailing City&quot;	&quot;Mailing State&quot;	&quot;Mailing Zip Code&quot;
&apos;//			F					G					H				I
&apos;//
&apos;//	&quot;Mailing Country&quot;   Situs Address (Property Address)	Situs City
&apos;//		J						K								L		
&apos;//
&apos;//	Situs State 	Situs Zip Code		Property Use
&apos;// 	M				N					O				
&apos;//
&apos;//	Exit.	produces an &quot;Admin-Bridge&quot; formatted sheet with the x..Props columns:
&apos;//	OwningParcel  UnitAddress  	Unit		 Resident1	 Phone1 Phone2 RefUSA-Phone
&apos;//	 A (from A)	  B (from K)	C (from K)  D (from B)		E	   F		G	
&apos;//
&apos;//  SubTerrItory CongTerrID DoNotCall RSO Foreign  RecordDate SitusAddress
&apos;//		H				I		   J     K     L	(header C2)		N (from K)
&apos;//
&apos;//  Property Use	DelPending
&apos;//		O (from O)		P
&apos;//
&apos;//		along with 4 header rows, populated with the Admin-Bridge header information.
&apos;//&lt;Area-CommonName&gt;			Property ID	&lt;OwnerParcel&gt;			Admin-Bridge formatted sheet
&apos;//Units shown:	63	9/16/20	Owner		&lt;OwnerName1&gt;
&apos;//City	Venice	34285	Streets/Addrs	&lt;Streets-Address(s)&gt;
&apos;//SubTerritory		CongTerrID
&apos;//
&apos;// Calls.	InsertTerrHdr, ForceRecalc.
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	9/23/20.	wmk.	original code; adapted from QcsvToBridge
&apos;// 9/30/20.	wmk.	added BoldHeadings, FreezeView calls; dead code removed
&apos;// 10/24/20.	wmk.	modified to support Unit field, Resident2 field dropped
&apos;//
&apos;//	Notes.	When this routine is picking up rows of a resultant query
&apos;// from SC data, if the rows are territory parcels that are NOT 
&apos;// SplitProps parcels, there will be relevant unit information in the
&apos;// SC data. If they ARE parcels that are SplitProps, there should NEVER
&apos;// be any unit token in the situs address.
&apos;//
&apos;// Method.
&apos;//		Remove all columns P through rightmost (AW?)
&apos;//			Z is index 25 AZ is 51  AW is 47
&apos;//		Move column B contents to D
&apos;//		Move column K contents (substr(1,35) to B
&apos;//     Move column K contents (substr(36,*) to C
&apos;//		Remove columns E through J
&apos;//		Insert Territory sheet header at top
&apos;//		
&apos;//	constants.
const COL_PARCEL=0		&apos;// &quot;OwningParcel&quot; column index
const COL_A=0
const COL_B=1
const COL_C=2	
const COL_D=3
const COL_E=4
const COL_F=5
const COL_G=6			&apos;// column G index
const COL_H=7			&apos;// column H index
const COL_I=8			&apos;// column I index
const COL_J=9			&apos;// column J index
const COL_K=10			&apos;// column K index
const COL_L=11			&apos;// column L index (DoNotCall)
const COL_M=12			&apos;// column M index (RSO)
const COL_N=13			&apos;// column N index (Foreign)
const COL_O=14			&apos;// column O index (Property Use)
const COL_P=15			&apos;// column P index
const COL_AW=47			&apos;// column AW index (Status)
const ROW_1=0
const ROW_2=1
const ROW_3=2
const ROW_4=3
const ROW_HEADING=4		&apos;// headings row index
const LJUST=1		&apos;// left-justify HoriJustify				&apos;// mod052020
const CJUST=2		&apos;// center HoriJustify						&apos;// mod052020
const RJUST=3		&apos;// right-justify HoriJustify				&apos;// mod052320
const MDYY=30		&apos;// &apos;M/D/YY&apos; format value
const ZEROS_4=121	&apos;// four zeros number format value

&apos;//	local variables.
Dim oDoc As Object
Dim oSheet As Object
Dim NewColumn As Object
dim oSel as Object
dim oSel2	As Object		&apos;// active row selection
dim iSheetIx as integer
dim oRange as Object
dim lThisRow as long		&apos;// current row selected on sheet
dim oMrgRange	As Object	&apos;// merge range

dim oCell	As Object		&apos;// cell working on
dim oCell2	As Object		&apos;// related to cell working on
dim i		As Integer		&apos;// loop index
dim sPropID	As String		&apos;// property ID
dim sSubTerr	As String	&apos;// subterritory
dim sCongTerr	As String	&apos;// cong terr ID
dim lRowCount	As Long		&apos;// row count of addresses
dim dDate		As Double	&apos;// date value
dim sCityStZip	As String	&apos;// concatenated City, State, Zip
dim sNotes		As String	&apos;// notes field
dim nCols		As Integer	&apos;// removal column count
dim oCols		As Object	&apos;// .Columns this sheet
dim sCity		As String
dim sZip		As String

	&apos;// code.
	ON ERROR GoTo ErrorHandler
	oDoc = ThisComponent
	oSel = oDoc.getCurrentSelection()
	oRange = oSel.RangeAddress
	iSheetIx = oRange.Sheet
	oSheet = oDoc.Sheets(iSheetIx)
	oCols = oSheet.Columns
	
	&apos;// get active row count (no heading)
	SelectActiveRows()
	oSel2 = oDoc.getCurrentSelection()
	oMrgRange = oSel2.RangeAddress
	lRowCount = oMrgRange.EndRow+1 - oMrgRange.StartRow + ROW_HEADING
	SetSelection(oRange)		&apos;// restore entry selection



&apos;//		Remove all columns P through rightmost (AW?)
&apos;//			Z is index 25 AZ is 51  AW is 47
	oSheet.Columns.removeByIndex(COL_P, COL_AW+1-COL_O)

&apos;//		Move column B contents to D
	oMrgRange = oRange
	oMrgRange.StartColumn = COL_B
	oMrgRange.EndColumn = COL_B
	oMrgRange.StartRow = ROW_2
	oMrgRange.EndRow = ROW_2 + lRowCount-1
dim oTarget as new com.sun.star.table.CellAddress
	oTarget.Sheet = oRange.Sheet
	oTarget.Column = COL_D
	oTarget.Row = ROW_2
	oSheet.moveRange(oTarget,oMrgRange)
	

&apos;//		Move column B contents to C
	oMrgRange = oRange
	oMrgRange.StartColumn = COL_B
	oMrgRange.EndColumn = COL_B
	oMrgRange.StartRow = ROW_2
	oMrgRange.EndRow = ROW_2 + lRowCount-1
	oTarget.Sheet = oRange.Sheet
	oTarget.Column = COL_C
	oTarget.Row = ROW_2
	oSheet.moveRange(oTarget,oMrgRange)

&apos;//		Copy column K contents (with unit) to B
	oMrgRange = oRange
	oMrgRange.StartColumn = COL_K
	oMrgRange.EndColumn = COL_K
	oMrgRange.StartRow = ROW_2
	oMrgRange.EndRow = ROW_2 + lRowCount-1
	oTarget.Sheet = oRange.Sheet
	oTarget.Column = COL_B
	oTarget.Row = ROW_2
	oSheet.copyRange(oTarget,oMrgRange)

&apos;//		Remove columns E through J
	oSheet.Columns.removeByIndex(COL_E, COL_J+1-COL_E)

&apos;//		Move column I to column O
	oMrgRange = oRange
	oMrgRange.StartColumn = COL_I
	oMrgRange.EndColumn = COL_I
	oMrgRange.StartRow = ROW_2
	oMrgRange.EndRow = ROW_2 + lRowCount-1
	oTarget.Sheet = oRange.Sheet
	oTarget.Column = COL_O
	oTarget.Row = ROW_2
	oSheet.moveRange(oTarget,oMrgRange)
	oCols(COL_O).setPropertyValue(&quot;NumberFormat&quot;, ZEROS_4)
	oCols(COL_O).setPropertyValue(&quot;HoriJustify&quot;, CJUST)
	
&apos;//		Insert Territory sheet header at top
	InsertTerrHdr(&quot;Admin-Bridge formatted sheet&quot;)

&apos;//     column E info to col N
	oMrgRange = oRange
	oMrgRange.StartColumn = COL_E
	oMrgRange.EndColumn = COL_E
	oMrgRange.StartRow = ROW_HEADING+1
	oMrgRange.EndRow = ROW_HEADING + lRowCount
	oTarget.Sheet = oRange.Sheet
	oTarget.Column = COL_N
	oTarget.Row = ROW_HEADING+1
	oSheet.moveRange(oTarget,oMrgRange)

&apos;//		City from F6 to B3
	oCell = oSheet.getCellByPosition(COL_F, ROW_HEADING+1)
	sCity = oCell.String
	oCell2 = oSheet.getCellByPosition(COL_B, ROW_3)
	oCell2.String = sCity
	
&apos;//		Zip  from H6 to C3
	oCell = oSheet.getCellByPosition(COL_H, ROW_HEADING+1)
	sZip = oCell.String
	oCell2 = oSheet.getCellByPosition(COL_C, ROW_3)
	oCell2.String = sZip
	
&apos;//	empty columns F - H, using columns I - K
	oMrgRange = oRange
	oMrgRange.StartColumn = COL_I
	oMrgRange.EndColumn = COL_K
	oMrgRange.StartRow = ROW_HEADING+1
	oMrgRange.EndRow = ROW_HEADING + lRowCount
	oTarget.Sheet = oRange.Sheet
	oTarget.Column = COL_F
	oTarget.Row = ROW_HEADING+1
	oSheet.copyRange(oTarget,oMrgRange)

	lThisRow = ROW_HEADING
&apos;// for each active row
&apos;// set all H values to &quot;=$B$4&quot; formula, SubTerritory
&apos;// set all I values to &quot;=$D$4&quot; formula, CongTerrID

	for i = 0 to lRowCount-1
		lThisRow = lThisRow + 1

	&apos;// set all C values (Unit) to substr(B,36)
		oCell = oSheet.getCellByPosition(COL_B, lThisRow)
		oCell2 = oSheet.getCellByPosition(COL_C, lThisRow)
		oCell2.String = substr(oCell.String, 36)
		
	&apos;// set all B values (UnitAddress) to substr(B,1,35)
		oCell.String = trim(substr(oCell.String, 1, 35))
		
	&apos;//	set all H values to &quot;=$B$4&quot; SubTerritory
		oCell = oSheet.getCellByPosition(COL_H, lThisRow)
		oCell.setFormula(&quot;=$B$4&quot;)
		oCell.HoriJustify = CJUST
		
	&apos;// set all I values to &quot;$D$4&quot;	CongTerrID
		oCell = oSheet.getCellByPosition(COL_I, lThisRow)
		oCell.setFormula(&quot;=$D$4&quot;)
		oCell.HoriJustify = CJUST

&apos;// next row
	next i
	
	SetBridgeHeadings()
	SetBridgeColWidths()
	BoldHeadings()
	ForceRecalc()
	FreezeView()
	
NormalExit:
	exit sub

ErrorHandler:
	msgbox(&quot;QSCToBridge - unprocessed error.&quot;)
	GoTo NormalExit

end sub		&apos;// end QSCToBridge		10/24/20
