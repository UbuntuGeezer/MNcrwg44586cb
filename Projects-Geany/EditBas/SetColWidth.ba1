&apos;// SetColWidth.bas
&apos;//---------------------------------------------------------------
&apos;// SetColWidth - Set column width for specified column.
&apos;//		9/11/20.	wmk.	22:30
&apos;//---------------------------------------------------------------

public sub SetColWidth(plCol As Long, pdWidth As Single)

&apos;//	Usage.	call SetColWidth(lCol, dWidth)
&apos;//
&apos;//		lCol - column index on which to set width
&apos;//		dWidth - column width to set (inches&quot;
&apos;//
&apos;// Entry.	User in RefUSA/Admin formatted territory sheet
&apos;//
&apos;//	Exit.	column lCol width set to dWidth&quot; (2540=1&quot;)
&apos;//
&apos;// Calls.	PushSelection, PopSelection, fIdxColName
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	9/2/20.		wmk.	original code
&apos;// 9/5/20.		wmk.	separated params for dispatcher call
&apos;//
&apos;//	Notes. Column width is specified in inches, 2540 = 1 inch.
&apos;//	PushSelection, PopSelection and associated &quot;static&quot; vars must
&apos;// be in the same module as this sub.

&apos;//	constants.
const	INCH_BASE=2540

&apos;//	local variables.
dim oDocument   as object
dim oDispatcher as object
dim sCellName	As String	&apos;// cell name in format $col$row
dim sColName	As String	&apos;// column name
dim oDoc		As Object	&apos;// ThisComponent
dim oSel		As Object	&apos;// selected Range is here .RangeAddress
dim oRange		As Object	&apos;// range selected
dim oSheet		As Object	&apos;// this sheet
dim oCols		As Object	&apos;// .Columns this sheet
dim iSheetIx	As Integer	&apos;// this sheet index

	&apos;// code.
	oDoc = ThisComponent
	oSel = oDoc.getCurrentSelection()
	oRange = oSel.RangeAddress
	iSheetIx = oRange.Sheet
	oSheet = oDoc.Sheets(iSheetIx)
	oCols = oSheet.Columns
	oCols(plCol).setPropertyValue(&quot;Width&quot;, pdWidth*INCH_BASE)

if true then
	GoTo EndOldCode
endif

&apos;//----------------------------------------------------------------
	sColName = &quot;&quot;		&apos;// empty column name

	&apos;// preserve current selection
	
	oDocument   = ThisComponent.CurrentController.Frame
	oDispatcher = createUnoService(&quot;com.sun.star.frame.DispatchHelper&quot;)

	&apos;// set column width for selected to specified width

	&apos;// set up arguments for uno:GoToCell interface
	sColName = fIdxColName(plCol)
	sCellName = &quot;$&quot; + sColName + &quot;$1&quot;		&apos;// set 1st row as target
	dim args1(0) as new com.sun.star.beans.PropertyValue
	args1(0).Name = &quot;ToPoint&quot;
	args1(0).Value = sCellName

	oDispatcher.executeDispatch(oDocument, &quot;.uno:GoToCell&quot;, &quot;&quot;, 0, args1())


rem ----------------------------------------------------------------------
dim args2(0) as new com.sun.star.beans.PropertyValue
	args2(0).Name = &quot;ColumnWidth&quot;
	args2(0).Value = pdWidth * INCH_BASE

	oDispatcher.executeDispatch(oDocument, &quot;.uno:ColumnWidth&quot;, &quot;&quot;, 0, args2())
&apos;dim args1(0) as new com.sun.star.beans.PropertyValue
&apos;	args1(0).Name = &quot;ColumnWidth&quot;
&apos;	args1(0).Value = pdWidth * INCH_BASE

&apos;	oDispatcher.executeDispatch(oDocument, &quot;.uno:ColumnWidth&quot;, &quot;&quot;, 0, args1())
&apos;//---------------------------------------------------------------------------
EndOldCode:	
NormalExit:
	SetSelection(oRange)		&apos;// restore user selection on entry
	exit sub
	
ErrorHandler:
	msgbox(&quot;SetColWidth - unprocessed error.&quot;)
	GoTo NormalExit
	
end sub		&apos;// end SetColWidth	9/11/20
